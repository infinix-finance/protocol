{
  "address": "0x673eBF354266a139e649Cffe91Ea1d5703440dFd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decayRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMinter",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inflationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_decayRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintDuration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintableSupply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextMintTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recordMintEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_decayRate",
          "type": "tuple"
        }
      ],
      "name": "setDecayRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyDecayEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8af989605105b1441ed408bad8478923dc42a795cec1a1bad0d22665701aed4e",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x673eBF354266a139e649Cffe91Ea1d5703440dFd",
    "transactionIndex": 0,
    "gasUsed": "983676",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa184d8a2b192d9cdbf0cf83d24480b5a05334f78eb83b1a1d3256673a66975aa",
    "transactionHash": "0x8af989605105b1441ed408bad8478923dc42a795cec1a1bad0d22665701aed4e",
    "logs": [],
    "blockNumber": 10579738,
    "cumulativeGasUsed": "983676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f54165b21f7a8419402d8a8ce3bda827",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decayRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inflationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decayRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableSupply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recordMintEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_decayRate\",\"type\":\"tuple\"}],\"name\":\"setDecayRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyDecayEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/SupplySchedule.sol\":\"SupplySchedule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"contracts/SupplySchedule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IfnxFiOwnableUpgrade} from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport {Decimal, SafeMath} from \\\"./utils/Decimal.sol\\\";\\nimport {BlockContext} from \\\"./utils/BlockContext.sol\\\";\\nimport {IMinter} from \\\"./interface/IMinter.sol\\\";\\n\\ncontract SupplySchedule is IfnxFiOwnableUpgrade, BlockContext {\\n    using Decimal for Decimal.decimal;\\n    using SafeMath for uint256;\\n\\n    //\\n    // CONSTANTS\\n    //\\n\\n    // 4 years is 365 * 4 + 1 = 1,461 days\\n    // 7 days * 52 weeks * 4 years = 1,456 days. if we add one more week, total days will be 1,463 days.\\n    // it's over 4 years and closest to 4 years. 209 weeks = 4 * 52 + 1 weeks\\n    uint256 private constant SUPPLY_DECAY_PERIOD = 209 weeks;\\n\\n    // Percentage growth of terminal supply per annum\\n    uint256 private constant TERMINAL_SUPPLY_EPOCH_RATE = 474970697307300; // 2.5% annual ~= 0.04749% weekly\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n    Decimal.decimal public inflationRate;\\n    Decimal.decimal public decayRate;\\n\\n    uint256 public mintDuration; // default is 1 week\\n    uint256 public nextMintTime;\\n    uint256 public supplyDecayEndTime; // startSchedule time + 4 years\\n\\n    IMinter private minter;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function initialize(\\n        IMinter _minter,\\n        uint256 _inflationRate,\\n        uint256 _decayRate,\\n        uint256 _mintDuration\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        minter = _minter;\\n        inflationRate = Decimal.decimal(_inflationRate);\\n        mintDuration = _mintDuration;\\n        decayRate = Decimal.decimal(_decayRate);\\n    }\\n\\n    //\\n    // PUBLIC FUNCTIONS\\n    //\\n\\n    function startSchedule() external onlyOwner {\\n        require(mintDuration > 0, \\\"mint duration is 0\\\");\\n        nextMintTime = _blockTimestamp() + mintDuration;\\n        supplyDecayEndTime = _blockTimestamp().add(SUPPLY_DECAY_PERIOD);\\n    }\\n\\n    function setDecayRate(Decimal.decimal memory _decayRate) public onlyOwner {\\n        decayRate = _decayRate;\\n    }\\n\\n    function recordMintEvent() external {\\n        require(_msgSender() == address(minter), \\\"!minter\\\");\\n        //@audit - inflationRate will continue to decay even after supplyDecayEndTime, but I guess that should be fine? (@detoo)\\n        inflationRate = inflationRate.mulD(Decimal.one().subD(decayRate));\\n        nextMintTime = nextMintTime.add(mintDuration);\\n    }\\n\\n    //\\n    // VIEW functions\\n    //\\n    function mintableSupply() external view returns (Decimal.decimal memory) {\\n        if (!isMintable()) {\\n            return Decimal.zero();\\n        }\\n        uint256 totalSupply = minter.getIfnxToken().totalSupply();\\n        if (_blockTimestamp() >= supplyDecayEndTime) {\\n            return Decimal.decimal(totalSupply).mulD(Decimal.decimal(TERMINAL_SUPPLY_EPOCH_RATE));\\n        }\\n        return Decimal.decimal(totalSupply).mulD(inflationRate);\\n    }\\n\\n    function isMintable() public view returns (bool) {\\n        if (nextMintTime == 0) {\\n            return false;\\n        }\\n        return _blockTimestamp() >= nextMintTime;\\n    }\\n\\n    function isStarted() external view returns (bool) {\\n        return nextMintTime > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc486d123f68e46ffba7b52ebfefdbe08ca54b2137df3716fb71ab8023eae1a5d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMinter {\\n    function mintReward() external;\\n\\n    function mintForLoss(Decimal.decimal memory _amount) external;\\n\\n    function getIfnxToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x253fd10327d44c024ea635e48c6c5d51202ffef1e79328eb4fe8bacd56a31fba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506110d4806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636fdb8191116100a2578063a83ef51511610071578063a83ef515146101c3578063a9c1f2f1146101cb578063b38e008e146101d3578063bc5920ba146101db578063cc5c095c146101e35761010b565b80636fdb8191146101a3578063715018a6146101ab5780638c4e8c21146101b35780638da5cb5b146101bb5761010b565b806346b45af7116100de57806346b45af71461015e5780634ec81af114610173578063544736e6146101865780636c8381f81461018e5761010b565b806313af4035146101105780631be2688a146101255780632166979d1461013857806331f9e35b14610140575b600080fd5b61012361011e366004610c78565b6101f8565b005b610123610133366004610cea565b6102da565b610123610315565b6101486103b5565b6040516101559190611080565b60405180910390f35b6101666103bb565b6040516101559190610d53565b610123610181366004610cb0565b6103e3565b6101666104b6565b6101966104be565b6040516101559190610d3f565b6101236104cd565b610123610554565b6101486105d3565b6101966105d9565b6101486105e8565b6101486105ee565b6101486105f4565b6101236105fa565b6101eb6106bd565b6040516101559190611076565b610200610848565b6065546001600160a01b039081169116146102365760405162461bcd60e51b815260040161022d90610e97565b60405180910390fd5b6001600160a01b03811661025c5760405162461bcd60e51b815260040161022d90611008565b6065546001600160a01b038281169116141561028a5760405162461bcd60e51b815260040161022d90610fc2565b6066546001600160a01b03828116911614156102b85760405162461bcd60e51b815260040161022d90610e50565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6102e2610848565b6065546001600160a01b0390811691161461030f5760405162461bcd60e51b815260040161022d90610e97565b5160cc55565b60d0546001600160a01b0316610329610848565b6001600160a01b03161461034f5760405162461bcd60e51b815260040161022d90610db1565b604080516020810190915260cc5481526103979061037b9061036f61084c565b9063ffffffff61087016565b604080516020810190915260cb5481529063ffffffff61089e16565b5160cb5560cd5460ce546103b09163ffffffff6108c116565b60ce55565b60cb5481565b600060ce54600014156103d0575060006103e0565b60ce546103db6108ed565b101590505b90565b600054610100900460ff16806103fc57506103fc6108f1565b8061040a575060005460ff16155b6104265760405162461bcd60e51b815260040161022d90610f25565b600054610100900460ff16158015610451576000805460ff1961ff0019909116610100171660011790555b6104596108f7565b60d080546001600160a01b0319166001600160a01b03871617905560408051602080820183529086905260cb86905560cd849055815190810190915283905260cc83905580156104af576000805461ff00191690555b5050505050565b60ce54151590565b6066546001600160a01b031690565b6104d5610848565b6065546001600160a01b039081169116146105025760405162461bcd60e51b815260040161022d90610e97565b600060cd54116105245760405162461bcd60e51b815260040161022d9061104a565b60cd5461052f6108ed565b0160ce5561054f630788c2806105436108ed565b9063ffffffff6108c116565b60cf55565b61055c610848565b6065546001600160a01b039081169116146105895760405162461bcd60e51b815260040161022d90610e97565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b60ce5481565b6065546001600160a01b031690565b60cd5481565b60cc5481565b60cf5481565b6066546001600160a01b03166106225760405162461bcd60e51b815260040161022d90610f73565b61062a610848565b6066546001600160a01b039081169116146106575760405162461bcd60e51b815260040161022d90610e09565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6106c5610c65565b6106cd6103bb565b6106e0576106d961098a565b90506103e0565b60d0546040805163343f70ff60e01b815290516000926001600160a01b03169163343f70ff916004808301926020929190829003018186803b15801561072557600080fd5b505afa158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d9190610c94565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd9190610d27565b905060cf546107da6108ed565b106108175760408051602080820183526601affbbbb114a48252825190810190925282825261080f919063ffffffff61089e16565b9150506103e0565b604080516020808201835260cb5482528251908101909252828252610842919063ffffffff61089e16565b91505090565b3390565b610854610c65565b604051806020016040528061086960126109a5565b9052905090565b610878610c65565b610880610c65565b825184516108939163ffffffff6109ae16565b815290505b92915050565b6108a6610c65565b6108ae610c65565b825184516108939163ffffffff6109f016565b6000828201838110156108e65760405162461bcd60e51b815260040161022d90610dd2565b9392505050565b4290565b303b1590565b600054610100900460ff168061091057506109106108f1565b8061091e575060005460ff16155b61093a5760405162461bcd60e51b815260040161022d90610f25565b600054610100900460ff16158015610965576000805460ff1961ff0019909116610100171660011790555b61096d6109fe565b610975610a7f565b8015610987576000805461ff00191690555b50565b610992610c65565b5060408051602081019091526000815290565b60ff16600a0a90565b60006108e683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b59565b60006108e683836012610b85565b600054610100900460ff1680610a175750610a176108f1565b80610a25575060005460ff16155b610a415760405162461bcd60e51b815260040161022d90610f25565b600054610100900460ff16158015610975576000805460ff1961ff0019909116610100171660011790558015610987576000805461ff001916905550565b600054610100900460ff1680610a985750610a986108f1565b80610aa6575060005460ff16155b610ac25760405162461bcd60e51b815260040161022d90610f25565b600054610100900460ff16158015610aed576000805460ff1961ff0019909116610100171660011790555b6000610af7610848565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610987576000805461ff001916905550565b60008184841115610b7d5760405162461bcd60e51b815260040161022d9190610d5e565b505050900390565b6000610baf610b93836109a5565b610ba3868663ffffffff610bb716565b9063ffffffff610bf116565b949350505050565b600082610bc657506000610898565b82820282848281610bd357fe5b04146108e65760405162461bcd60e51b815260040161022d90610ee4565b60006108e683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060008183610c4f5760405162461bcd60e51b815260040161022d9190610d5e565b506000838581610c5b57fe5b0495945050505050565b6040518060200160405280600081525090565b600060208284031215610c89578081fd5b81356108e681611089565b600060208284031215610ca5578081fd5b81516108e681611089565b60008060008060808587031215610cc5578283fd5b8435610cd081611089565b966020860135965060408601359560600135945092505050565b600060208284031215610cfb578081fd5b6040516020810181811067ffffffffffffffff82111715610d1a578283fd5b6040529135825250919050565b600060208284031215610d38578081fd5b5051919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b81811015610d8a57858101830151858201604001528201610d6e565b81811115610d9b5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526007908201526610b6b4b73a32b960c91b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526012908201527106d696e74206475726174696f6e20697320360741b604082015260600190565b9051815260200190565b90815260200190565b6001600160a01b038116811461098757600080fdfea26469706673582212202f104c689aefe489917a7ced4759aec3a4219088986ac1f0d1ea60f63bfd65f564736f6c63430006090033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18203,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 18205,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 18379,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17238,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12998,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "inflationRate",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(decimal)17272_storage"
      },
      {
        "astId": 13000,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "decayRate",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(decimal)17272_storage"
      },
      {
        "astId": 13002,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "mintDuration",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 13004,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "nextMintTime",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 13006,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "supplyDecayEndTime",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 13008,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "minter",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(IMinter)14947"
      },
      {
        "astId": 13012,
        "contract": "contracts/SupplySchedule.sol:SupplySchedule",
        "label": "__gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMinter)14947": {
        "encoding": "inplace",
        "label": "contract IMinter",
        "numberOfBytes": "20"
      },
      "t_struct(decimal)17272_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 17271,
            "contract": "contracts/SupplySchedule.sol:SupplySchedule",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}