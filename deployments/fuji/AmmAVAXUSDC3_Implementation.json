{
  "address": "0xdCBc819B2bb4522990CB69E04c6Dc8621ac8cfa7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxHoldingBaseAsset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestNotionalCap",
          "type": "uint256"
        }
      ],
      "name": "CapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "rate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingPrice",
          "type": "uint256"
        }
      ],
      "name": "FundingRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "cumulativeNotional",
          "type": "int256"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetReserve",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReserveSnapshotted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementPrice",
          "type": "uint256"
        }
      ],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IAmm.Dir",
          "name": "dir",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapInput",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IAmm.Dir",
          "name": "dir",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quoteAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "SwapOutput",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_ORACLE_SPREAD_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_fromQuoteReserve",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_fromBaseReserve",
          "type": "tuple"
        }
      ],
      "name": "calcBaseAssetAfterLiquidityMigration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fluctuationLimitRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingBufferPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingRate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAssetDelta",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAssetDeltaThisFundingPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCumulativeNotional",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetPoolAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetPoolAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputPriceWithReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getInputTwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestLiquidityChangedSnapshots",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "cumulativeNotional",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "quoteAssetReserve",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "baseAssetReserve",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "totalPositionSize",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAmm.LiquidityChangedSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getLiquidityChangedSnapshots",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "cumulativeNotional",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "quoteAssetReserve",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "baseAssetReserve",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "totalPositionSize",
              "type": "tuple"
            }
          ],
          "internalType": "struct IAmm.LiquidityChangedSnapshot",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxHoldingBaseAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenInterestNotionalCap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetPoolAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetPoolAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputPriceWithReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "getOutputTwap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserve",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSnapshotLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpotPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_intervalInSeconds",
          "type": "uint256"
        }
      ],
      "name": "getTwapPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalShutdown",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAssetReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tradeLimitRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceFeedKey",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fluctuationLimitRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tollRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_spreadRatio",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        }
      ],
      "name": "isOverFluctuationLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverSpreadLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextFundingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "open",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reserveSnapshots",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "quoteAssetReserve",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "baseAssetReserve",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_maxHoldingBaseAsset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_openInterestNotionalCap",
          "type": "tuple"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterParty",
          "type": "address"
        }
      ],
      "name": "setCounterParty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_fluctuationLimitRatio",
          "type": "tuple"
        }
      ],
      "name": "setFluctuationLimitRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_globalShutdown",
          "type": "address"
        }
      ],
      "name": "setGlobalShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "setOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "setSpotPriceTwapInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_spreadRatio",
          "type": "tuple"
        }
      ],
      "name": "setSpreadRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_tollRatio",
          "type": "tuple"
        }
      ],
      "name": "setTollRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleFunding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spotPriceTwapInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spreadRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfQuote",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmountLimit",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_canOverFluctuationLimit",
          "type": "bool"
        }
      ],
      "name": "swapInput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAmm.Dir",
          "name": "_dirOfBase",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "swapOutput",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tollAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tollRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPositionSize",
      "outputs": [
        {
          "internalType": "int256",
          "name": "d",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeLimitRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42c2a067149489f719c5edc28af66d2bd8c76bf2776e9a6e5d5f07a978e4a2ae",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0xdCBc819B2bb4522990CB69E04c6Dc8621ac8cfa7",
    "transactionIndex": 0,
    "gasUsed": "3832185",
    "logsBloom": "0x
    "blockHash": "0x2225d9e8f7a1808134b48c886ba1513bca594aa378f26873846f4965ab12b38f",
    "transactionHash": "0x42c2a067149489f719c5edc28af66d2bd8c76bf2776e9a6e5d5f07a978e4a2ae",
    "logs": [],
    "blockNumber": 10579882,
    "cumulativeGasUsed": "3832185",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1b7591a75579d779edef390e2b1d74a1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxHoldingBaseAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestNotionalCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"rate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"}],\"name\":\"FundingRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cumulativeNotional\",\"type\":\"int256\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReserveSnapshotted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IAmm.Dir\",\"name\":\"dir\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"}],\"name\":\"SwapInput\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IAmm.Dir\",\"name\":\"dir\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"}],\"name\":\"SwapOutput\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ORACLE_SPREAD_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_fromQuoteReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_fromBaseReserve\",\"type\":\"tuple\"}],\"name\":\"calcBaseAssetAfterLiquidityMigration\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"}],\"name\":\"calcFee\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluctuationLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingBufferPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAssetDelta\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAssetDeltaThisFundingPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeNotional\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getInputPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetPoolAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetPoolAmount\",\"type\":\"tuple\"}],\"name\":\"getInputPriceWithReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getInputTwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestLiquidityChangedSnapshots\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"cumulativeNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"quoteAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"baseAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"totalPositionSize\",\"type\":\"tuple\"}],\"internalType\":\"struct IAmm.LiquidityChangedSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLiquidityChangedSnapshots\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"cumulativeNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"quoteAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"baseAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"totalPositionSize\",\"type\":\"tuple\"}],\"internalType\":\"struct IAmm.LiquidityChangedSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxHoldingBaseAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenInterestNotionalCap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetPoolAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetPoolAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputPriceWithReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"getOutputTwap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSnapshotLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpotPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_intervalInSeconds\",\"type\":\"uint256\"}],\"name\":\"getTwapPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalShutdown\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAssetReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeLimitRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceFeedKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fluctuationLimitRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tollRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spreadRatio\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"}],\"name\":\"isOverFluctuationLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverSpreadLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFundingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reserveSnapshots\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"quoteAssetReserve\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"baseAssetReserve\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_maxHoldingBaseAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_openInterestNotionalCap\",\"type\":\"tuple\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterParty\",\"type\":\"address\"}],\"name\":\"setCounterParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_fluctuationLimitRatio\",\"type\":\"tuple\"}],\"name\":\"setFluctuationLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_globalShutdown\",\"type\":\"address\"}],\"name\":\"setGlobalShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"setSpotPriceTwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_spreadRatio\",\"type\":\"tuple\"}],\"name\":\"setSpreadRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_tollRatio\",\"type\":\"tuple\"}],\"name\":\"setTollRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleFunding\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotPriceTwapInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfQuote\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmountLimit\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_canOverFluctuationLimit\",\"type\":\"bool\"}],\"name\":\"swapInput\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAmm.Dir\",\"name\":\"_dirOfBase\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"swapOutput\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tollAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tollRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositionSize\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"calcFee((uint256))\":{\"params\":{\"_quoteAssetAmount\":\"quoteAssetAmount\"},\"returns\":{\"_0\":\"total tx fee\"}},\"getInputPrice(uint8,(uint256))\":{\"params\":{\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"getInputTwap(uint8,(uint256))\":{\"params\":{\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"getOutputPrice(uint8,(uint256))\":{\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`.\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"getOutputTwap(uint8,(uint256))\":{\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`.\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"getReserve()\":{\"returns\":{\"_0\":\"(quote asset reserve, base asset reserve)\"}},\"getSpotPrice()\":{\"returns\":{\"_0\":\"spot price\"}},\"getUnderlyingPrice()\":{\"returns\":{\"_0\":\"underlying price\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCap((uint256),(uint256))\":{\"details\":\"only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm\",\"params\":{\"_maxHoldingBaseAsset\":\"max position size that traders can hold in 18 digits\",\"_openInterestNotionalCap\":\"open interest cap, denominated in quoteToken\"}},\"setCounterParty(address)\":{\"details\":\"only owner can call this function\",\"params\":{\"_counterParty\":\"address of counter party\"}},\"setFluctuationLimitRatio((uint256))\":{\"details\":\"only owner can call this function\",\"params\":{\"_fluctuationLimitRatio\":\"fluctuation limit rate in 18 digits, 0 means skip the checking\"}},\"setGlobalShutdown(address)\":{\"details\":\"only owner can call this function\",\"params\":{\"_globalShutdown\":\"address of `globalShutdown`\"}},\"setOpen(bool)\":{\"details\":\"only owner can call this function\",\"params\":{\"_open\":\"open to trade is true, otherwise is false.\"}},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"setPriceFeed(address)\":{\"details\":\"only owner can call\",\"params\":{\"_priceFeed\":\"new price feed for this AMM\"}},\"setSpotPriceTwapInterval(uint256)\":{\"details\":\"only owner can call this function\",\"params\":{\"_interval\":\"time interval in seconds\"}},\"setSpreadRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_spreadRatio\":\"new toll spread in 18 digits\"}},\"setTollRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_tollRatio\":\"new toll ratio in 18 digits\"}},\"settleFunding()\":{\"details\":\"only allow to update while reaching `nextFundingTime`\",\"returns\":{\"_0\":\"premium fraction of this period in 18 digits\"}},\"shutdown()\":{\"details\":\"only `globalShutdown` or owner can call this function The price calculation is in `globalShutdown`.\"},\"swapInput(uint8,(uint256),(uint256),bool)\":{\"details\":\"Only clearingHouse can call this function\",\"params\":{\"_baseAssetAmountLimit\":\"minimum base asset amount expected to get to prevent front running\",\"_canOverFluctuationLimit\":\"if tx can go over fluctuation limit once; for partial liquidation\",\"_dirOfQuote\":\"ADD_TO_AMM for long, REMOVE_FROM_AMM for short\",\"_quoteAssetAmount\":\"quote asset amount\"},\"returns\":{\"_0\":\"base asset amount\"}},\"swapOutput(uint8,(uint256),(uint256))\":{\"details\":\"only clearingHouse can call this function\",\"params\":{\"_baseAssetAmount\":\"base asset amount\",\"_dirOfBase\":\"ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput\",\"_quoteAssetAmountLimit\":\"limit of quote asset amount; for slippage protection\"},\"returns\":{\"_0\":\"quote asset amount\"}},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}}},\"userdoc\":{\"methods\":{\"calcFee((uint256))\":{\"notice\":\"calculate total fee (including toll and spread) by input quoteAssetAmount\"},\"getInputPrice(uint8,(uint256))\":{\"notice\":\"get input amount. returns how many base asset you will get with the input quote amount.\"},\"getInputTwap(uint8,(uint256))\":{\"notice\":\"get input twap amount. returns how many base asset you will get with the input quote amount based on twap price.\"},\"getOutputPrice(uint8,(uint256))\":{\"notice\":\"get output price. return how many quote asset you will get with the input base amount\"},\"getOutputTwap(uint8,(uint256))\":{\"notice\":\"get output twap amount. return how many quote asset you will get with the input base amount on twap price.\"},\"getReserve()\":{\"notice\":\"get current quote/base asset reserve.\"},\"getSpotPrice()\":{\"notice\":\"get spot price based on current quote/base asset reserve.\"},\"getTwapPrice(uint256)\":{\"notice\":\"get twap price\"},\"getUnderlyingPrice()\":{\"notice\":\"get underlying price provided by oracle\"},\"setCap((uint256),(uint256))\":{\"notice\":\"set new cap during guarded period, which is max position size that traders can hold\"},\"setCounterParty(address)\":{\"notice\":\"set counter party\"},\"setFluctuationLimitRatio((uint256))\":{\"notice\":\"set fluctuation limit rate. Default value is `1 / max leverage`\"},\"setGlobalShutdown(address)\":{\"notice\":\"set `globalShutdown`\"},\"setOpen(bool)\":{\"notice\":\"set `open` flag. Amm is open to trade if `open` is true. Default is false.\"},\"setPriceFeed(address)\":{\"notice\":\"set priceFee address\"},\"setSpotPriceTwapInterval(uint256)\":{\"notice\":\"set time interval for twap calculation, default is 1 hour\"},\"setSpreadRatio((uint256))\":{\"notice\":\"set new spread ratio\"},\"setTollRatio((uint256))\":{\"notice\":\"set new toll ratio\"},\"settleFunding()\":{\"notice\":\"update funding rate\"},\"shutdown()\":{\"notice\":\"shutdown amm,\"},\"swapInput(uint8,(uint256),(uint256),bool)\":{\"notice\":\"Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`\"},\"swapOutput(uint8,(uint256),(uint256))\":{\"notice\":\"swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Amm.sol\":\"Amm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"contracts/Amm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { BlockContext } from \\\"./utils/BlockContext.sol\\\";\\nimport { IPriceFeed } from \\\"./interface/IPriceFeed.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Decimal } from \\\"./utils/Decimal.sol\\\";\\nimport { SignedDecimal } from \\\"./utils/SignedDecimal.sol\\\";\\nimport { MixedDecimal } from \\\"./utils/MixedDecimal.sol\\\";\\nimport { IfnxFiOwnableUpgrade } from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport { IAmm } from \\\"./interface/IAmm.sol\\\";\\n\\ncontract Amm is IAmm, IfnxFiOwnableUpgrade, BlockContext {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using MixedDecimal for SignedDecimal.signedDecimal;\\n\\n    //\\n    // CONSTANT\\n    //\\n    // because position decimal rounding error,\\n    // if the position size is less than IGNORABLE_DIGIT_FOR_SHUTDOWN, it's equal size is 0\\n    uint256 private constant IGNORABLE_DIGIT_FOR_SHUTDOWN = 100;\\n\\n    // a margin to prevent from rounding when calc liquidity multiplier limit\\n    uint256 private constant MARGIN_FOR_LIQUIDITY_MIGRATION_ROUNDING = 1e9;\\n\\n    //\\n    // EVENTS\\n    //\\n    event SwapInput(Dir dir, uint256 quoteAssetAmount, uint256 baseAssetAmount);\\n    event SwapOutput(Dir dir, uint256 quoteAssetAmount, uint256 baseAssetAmount);\\n    event FundingRateUpdated(int256 rate, uint256 underlyingPrice);\\n    event ReserveSnapshotted(uint256 quoteAssetReserve, uint256 baseAssetReserve, uint256 timestamp);\\n    event LiquidityChanged(uint256 quoteReserve, uint256 baseReserve, int256 cumulativeNotional);\\n    event CapChanged(uint256 maxHoldingBaseAsset, uint256 openInterestNotionalCap);\\n    event Shutdown(uint256 settlementPrice);\\n    event PriceFeedUpdated(address priceFeed);\\n\\n    //\\n    // MODIFIERS\\n    //\\n    modifier onlyOpen() {\\n        require(open, \\\"amm was closed\\\");\\n        _;\\n    }\\n\\n    modifier onlyCounterParty() {\\n        require(counterParty == _msgSender(), \\\"caller is not counterParty\\\");\\n        _;\\n    }\\n\\n    //\\n    // enum and struct\\n    //\\n    struct ReserveSnapshot {\\n        Decimal.decimal quoteAssetReserve;\\n        Decimal.decimal baseAssetReserve;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n    // internal usage\\n    enum QuoteAssetDir { QUOTE_IN, QUOTE_OUT }\\n    // internal usage\\n    enum TwapCalcOption { RESERVE_ASSET, INPUT_ASSET }\\n\\n    // To record current base/quote asset to calculate TWAP\\n\\n    struct TwapInputAsset {\\n        Dir dir;\\n        Decimal.decimal assetAmount;\\n        QuoteAssetDir inOrOut;\\n    }\\n\\n    struct TwapPriceCalcParams {\\n        TwapCalcOption opt;\\n        uint256 snapshotIndex;\\n        TwapInputAsset asset;\\n    }\\n\\n    //\\n    // Constant\\n    //\\n    // 10%\\n    uint256 public constant MAX_ORACLE_SPREAD_RATIO = 1e17;\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n\\n    // DEPRECATED\\n    // update during every swap and calculate total amm pnl per funding period\\n    SignedDecimal.signedDecimal private baseAssetDeltaThisFundingPeriod;\\n\\n    // update during every swap and used when shutting amm down. it's trader's total base asset size\\n    SignedDecimal.signedDecimal public totalPositionSize;\\n\\n    // latest funding rate = ((twap market price - twap oracle price) / twap oracle price) / 24\\n    SignedDecimal.signedDecimal public fundingRate;\\n\\n    SignedDecimal.signedDecimal private cumulativeNotional;\\n\\n    Decimal.decimal private settlementPrice;\\n    Decimal.decimal public tradeLimitRatio;\\n    Decimal.decimal public quoteAssetReserve;\\n    Decimal.decimal public baseAssetReserve;\\n    Decimal.decimal public fluctuationLimitRatio;\\n\\n    // owner can update\\n    Decimal.decimal public tollRatio;\\n    Decimal.decimal public spreadRatio;\\n    Decimal.decimal public tollAmount;\\n    Decimal.decimal private maxHoldingBaseAsset;\\n    Decimal.decimal private openInterestNotionalCap;\\n\\n    // init cumulativePositionMultiplier is 1, will be updated every time when amm reserve increase/decrease\\n    Decimal.decimal private cumulativePositionMultiplier;\\n\\n    // snapshot of amm reserve when change liquidity's invariant\\n    LiquidityChangedSnapshot[] private liquidityChangedSnapshots;\\n\\n    uint256 public spotPriceTwapInterval;\\n    uint256 public fundingPeriod;\\n    uint256 public fundingBufferPeriod;\\n    uint256 public nextFundingTime;\\n    bytes32 public priceFeedKey;\\n    ReserveSnapshot[] public reserveSnapshots;\\n\\n    address private counterParty;\\n    address public globalShutdown;\\n    IERC20 public override quoteAsset;\\n    IPriceFeed public priceFeed;\\n    bool public override open;\\n    uint256[50] private __gap;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n\\n    //\\n    // FUNCTIONS\\n    //\\n    function initialize(\\n        uint256 _quoteAssetReserve,\\n        uint256 _baseAssetReserve,\\n        uint256 _tradeLimitRatio,\\n        uint256 _fundingPeriod,\\n        IPriceFeed _priceFeed,\\n        bytes32 _priceFeedKey,\\n        address _quoteAsset,\\n        uint256 _fluctuationLimitRatio,\\n        uint256 _tollRatio,\\n        uint256 _spreadRatio\\n    ) public initializer {\\n        require(\\n            _quoteAssetReserve != 0 &&\\n                _tradeLimitRatio != 0 &&\\n                _baseAssetReserve != 0 &&\\n                _fundingPeriod != 0 &&\\n                address(_priceFeed) != address(0) &&\\n                _quoteAsset != address(0),\\n            \\\"invalid input\\\"\\n        );\\n        __Ownable_init();\\n\\n        quoteAssetReserve = Decimal.decimal(_quoteAssetReserve);\\n        baseAssetReserve = Decimal.decimal(_baseAssetReserve);\\n        tradeLimitRatio = Decimal.decimal(_tradeLimitRatio);\\n        tollRatio = Decimal.decimal(_tollRatio);\\n        spreadRatio = Decimal.decimal(_spreadRatio);\\n        fluctuationLimitRatio = Decimal.decimal(_fluctuationLimitRatio);\\n        fundingPeriod = _fundingPeriod;\\n        fundingBufferPeriod = _fundingPeriod.div(2);\\n        spotPriceTwapInterval = 1 hours;\\n        priceFeedKey = _priceFeedKey;\\n        quoteAsset = IERC20(_quoteAsset);\\n        priceFeed = _priceFeed;\\n        cumulativePositionMultiplier = Decimal.one();\\n        liquidityChangedSnapshots.push(\\n            LiquidityChangedSnapshot({\\n                cumulativeNotional: SignedDecimal.zero(),\\n                baseAssetReserve: baseAssetReserve,\\n                quoteAssetReserve: quoteAssetReserve,\\n                totalPositionSize: SignedDecimal.zero()\\n            })\\n        );\\n        reserveSnapshots.push(ReserveSnapshot(quoteAssetReserve, baseAssetReserve, _blockTimestamp(), _blockNumber()));\\n        emit ReserveSnapshotted(quoteAssetReserve.toUint(), baseAssetReserve.toUint(), _blockTimestamp());\\n    }\\n\\n    /**\\n     * @notice Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`\\n     * @dev Only clearingHouse can call this function\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short\\n     * @param _quoteAssetAmount quote asset amount\\n     * @param _baseAssetAmountLimit minimum base asset amount expected to get to prevent front running\\n     * @param _canOverFluctuationLimit if tx can go over fluctuation limit once; for partial liquidation\\n     * @return base asset amount\\n     */\\n    function swapInput(\\n        Dir _dirOfQuote,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external override onlyOpen onlyCounterParty returns (Decimal.decimal memory) {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        if (_dirOfQuote == Dir.REMOVE_FROM_AMM) {\\n            require(\\n                quoteAssetReserve.mulD(tradeLimitRatio).toUint() >= _quoteAssetAmount.toUint(),\\n                \\\"over trading limit\\\"\\n            );\\n        }\\n\\n        Decimal.decimal memory baseAssetAmount = getInputPrice(_dirOfQuote, _quoteAssetAmount);\\n        // If LONG, exchanged base amount should be more than _baseAssetAmountLimit,\\n        // otherwise(SHORT), exchanged base amount should be less than _baseAssetAmountLimit.\\n        // In SHORT case, more position means more debt so should not be larger than _baseAssetAmountLimit\\n        if (_baseAssetAmountLimit.toUint() != 0) {\\n            if (_dirOfQuote == Dir.ADD_TO_AMM) {\\n                require(baseAssetAmount.toUint() >= _baseAssetAmountLimit.toUint(), \\\"Less than minimal base token\\\");\\n            } else {\\n                require(baseAssetAmount.toUint() <= _baseAssetAmountLimit.toUint(), \\\"More than maximal base token\\\");\\n            }\\n        }\\n\\n        updateReserve(_dirOfQuote, _quoteAssetAmount, baseAssetAmount, _canOverFluctuationLimit);\\n        emit SwapInput(_dirOfQuote, _quoteAssetAmount.toUint(), baseAssetAmount.toUint());\\n        return baseAssetAmount;\\n    }\\n\\n    /**\\n     * @notice swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit\\n     * @dev only clearingHouse can call this function\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput\\n     * @param _baseAssetAmount base asset amount\\n     * @param _quoteAssetAmountLimit limit of quote asset amount; for slippage protection\\n     * @return quote asset amount\\n     */\\n    function swapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external override onlyOpen onlyCounterParty returns (Decimal.decimal memory) {\\n        return implSwapOutput(_dirOfBase, _baseAssetAmount, _quoteAssetAmountLimit);\\n    }\\n\\n    /**\\n     * @notice update funding rate\\n     * @dev only allow to update while reaching `nextFundingTime`\\n     * @return premium fraction of this period in 18 digits\\n     */\\n    function settleFunding() external override onlyOpen onlyCounterParty returns (SignedDecimal.signedDecimal memory) {\\n        require(_blockTimestamp() >= nextFundingTime, \\\"settle funding too early\\\");\\n\\n        // premium = twapMarketPrice - vwapIndexPrice\\n        // timeFraction = fundingPeriod(1 hour) / 1 day\\n        // premiumFraction = premium * timeFraction\\n        Decimal.decimal memory underlyingPrice = getUnderlyingPrice();\\n        SignedDecimal.signedDecimal memory premium =\\n            MixedDecimal.fromDecimal(getTwapPrice(spotPriceTwapInterval)).subD(underlyingPrice);\\n        SignedDecimal.signedDecimal memory premiumFraction = premium.mulScalar(fundingPeriod).divScalar(int256(1 days));\\n\\n        // update funding rate = premiumFraction / twapIndexPrice\\n        updateFundingRate(premiumFraction, underlyingPrice);\\n\\n        // in order to prevent multiple funding settlement during very short time after network congestion\\n        uint256 minNextValidFundingTime = _blockTimestamp().add(fundingBufferPeriod);\\n\\n        // floor((nextFundingTime + fundingPeriod) / 3600) * 3600\\n        uint256 nextFundingTimeOnHourStart = nextFundingTime.add(fundingPeriod).div(1 hours).mul(1 hours);\\n\\n        // max(nextFundingTimeOnHourStart, minNextValidFundingTime)\\n        nextFundingTime = nextFundingTimeOnHourStart > minNextValidFundingTime\\n            ? nextFundingTimeOnHourStart\\n            : minNextValidFundingTime;\\n\\n        // DEPRECATED only for backward compatibility before we upgrade ClearingHouse\\n        // reset funding related states\\n        baseAssetDeltaThisFundingPeriod = SignedDecimal.zero();\\n\\n        return premiumFraction;\\n    }\\n\\n    function calcBaseAssetAfterLiquidityMigration(\\n        SignedDecimal.signedDecimal memory _baseAssetAmount,\\n        Decimal.decimal memory _fromQuoteReserve,\\n        Decimal.decimal memory _fromBaseReserve\\n    ) public view override returns (SignedDecimal.signedDecimal memory) {\\n        if (_baseAssetAmount.toUint() == 0) {\\n            return _baseAssetAmount;\\n        }\\n\\n        bool isPositiveValue = _baseAssetAmount.toInt() > 0 ? true : false;\\n\\n        // measure the trader position's notional value on the old curve\\n        // (by simulating closing the position)\\n        Decimal.decimal memory posNotional =\\n            getOutputPriceWithReserves(\\n                isPositiveValue ? Dir.ADD_TO_AMM : Dir.REMOVE_FROM_AMM,\\n                _baseAssetAmount.abs(),\\n                _fromQuoteReserve,\\n                _fromBaseReserve\\n            );\\n\\n        // calculate and apply the required size on the new curve\\n        SignedDecimal.signedDecimal memory newBaseAsset =\\n            MixedDecimal.fromDecimal(\\n                getInputPrice(isPositiveValue ? Dir.REMOVE_FROM_AMM : Dir.ADD_TO_AMM, posNotional)\\n            );\\n        return newBaseAsset.mulScalar(isPositiveValue ? 1 : int256(-1));\\n    }\\n\\n    /**\\n     * @notice shutdown amm,\\n     * @dev only `globalShutdown` or owner can call this function\\n     * The price calculation is in `globalShutdown`.\\n     */\\n    function shutdown() external override {\\n        require(_msgSender() == owner() || _msgSender() == globalShutdown, \\\"not owner nor globalShutdown\\\");\\n        implShutdown();\\n    }\\n\\n    /**\\n     * @notice set counter party\\n     * @dev only owner can call this function\\n     * @param _counterParty address of counter party\\n     */\\n    function setCounterParty(address _counterParty) external onlyOwner {\\n        counterParty = _counterParty;\\n    }\\n\\n    /**\\n     * @notice set `globalShutdown`\\n     * @dev only owner can call this function\\n     * @param _globalShutdown address of `globalShutdown`\\n     */\\n    function setGlobalShutdown(address _globalShutdown) external onlyOwner {\\n        globalShutdown = _globalShutdown;\\n    }\\n\\n    /**\\n     * @notice set fluctuation limit rate. Default value is `1 / max leverage`\\n     * @dev only owner can call this function\\n     * @param _fluctuationLimitRatio fluctuation limit rate in 18 digits, 0 means skip the checking\\n     */\\n    function setFluctuationLimitRatio(Decimal.decimal memory _fluctuationLimitRatio) public onlyOwner {\\n        fluctuationLimitRatio = _fluctuationLimitRatio;\\n    }\\n\\n    /**\\n     * @notice set time interval for twap calculation, default is 1 hour\\n     * @dev only owner can call this function\\n     * @param _interval time interval in seconds\\n     */\\n    function setSpotPriceTwapInterval(uint256 _interval) external onlyOwner {\\n        require(_interval != 0, \\\"can not set interval to 0\\\");\\n        spotPriceTwapInterval = _interval;\\n    }\\n\\n    /**\\n     * @notice set `open` flag. Amm is open to trade if `open` is true. Default is false.\\n     * @dev only owner can call this function\\n     * @param _open open to trade is true, otherwise is false.\\n     */\\n    function setOpen(bool _open) external onlyOwner {\\n        if (open == _open) return;\\n\\n        open = _open;\\n        if (_open) {\\n            nextFundingTime = _blockTimestamp().add(fundingPeriod).div(1 hours).mul(1 hours);\\n        }\\n    }\\n\\n    /**\\n     * @notice set new toll ratio\\n     * @dev only owner can call\\n     * @param _tollRatio new toll ratio in 18 digits\\n     */\\n    function setTollRatio(Decimal.decimal memory _tollRatio) public onlyOwner {\\n        tollRatio = _tollRatio;\\n    }\\n\\n    /**\\n     * @notice set new spread ratio\\n     * @dev only owner can call\\n     * @param _spreadRatio new toll spread in 18 digits\\n     */\\n    function setSpreadRatio(Decimal.decimal memory _spreadRatio) public onlyOwner {\\n        spreadRatio = _spreadRatio;\\n    }\\n\\n    /**\\n     * @notice set new cap during guarded period, which is max position size that traders can hold\\n     * @dev only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm\\n     * @param _maxHoldingBaseAsset max position size that traders can hold in 18 digits\\n     * @param _openInterestNotionalCap open interest cap, denominated in quoteToken\\n     */\\n    function setCap(Decimal.decimal memory _maxHoldingBaseAsset, Decimal.decimal memory _openInterestNotionalCap)\\n        public\\n        onlyOwner\\n    {\\n        maxHoldingBaseAsset = _maxHoldingBaseAsset;\\n        openInterestNotionalCap = _openInterestNotionalCap;\\n        emit CapChanged(maxHoldingBaseAsset.toUint(), openInterestNotionalCap.toUint());\\n    }\\n\\n    /**\\n     * @notice set priceFee address\\n     * @dev only owner can call\\n     * @param _priceFeed new price feed for this AMM\\n     */\\n    function setPriceFeed(IPriceFeed _priceFeed) public onlyOwner {\\n        require(address(_priceFeed) != address(0), \\\"invalid PriceFeed address\\\");\\n        priceFeed = _priceFeed;\\n        emit PriceFeedUpdated(address(priceFeed));\\n    }\\n\\n    //\\n    // VIEW FUNCTIONS\\n    //\\n\\n    function isOverFluctuationLimit(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // Skip the check if the limit is 0\\n        if (fluctuationLimitRatio.toUint() == 0) {\\n            return false;\\n        }\\n\\n        (Decimal.decimal memory upperLimit, Decimal.decimal memory lowerLimit) = getPriceBoundariesOfLastBlock();\\n\\n        Decimal.decimal memory quoteAssetExchanged = getOutputPrice(_dirOfBase, _baseAssetAmount);\\n        Decimal.decimal memory price =\\n            (_dirOfBase == Dir.REMOVE_FROM_AMM)\\n                ? quoteAssetReserve.addD(quoteAssetExchanged).divD(baseAssetReserve.subD(_baseAssetAmount))\\n                : quoteAssetReserve.subD(quoteAssetExchanged).divD(baseAssetReserve.addD(_baseAssetAmount));\\n\\n        if (price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice get input twap amount.\\n     * returns how many base asset you will get with the input quote amount based on twap price.\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\\n     * @param _quoteAssetAmount quote asset amount\\n     * @return base asset amount\\n     */\\n    function getInputTwap(Dir _dirOfQuote, Decimal.decimal memory _quoteAssetAmount)\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return implGetInputAssetTwapPrice(_dirOfQuote, _quoteAssetAmount, QuoteAssetDir.QUOTE_IN, 15 minutes);\\n    }\\n\\n    /**\\n     * @notice get output twap amount.\\n     * return how many quote asset you will get with the input base amount on twap price.\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`.\\n     * @param _baseAssetAmount base asset amount\\n     * @return quote asset amount\\n     */\\n    function getOutputTwap(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return implGetInputAssetTwapPrice(_dirOfBase, _baseAssetAmount, QuoteAssetDir.QUOTE_OUT, 15 minutes);\\n    }\\n\\n    /**\\n     * @notice get input amount. returns how many base asset you will get with the input quote amount.\\n     * @param _dirOfQuote ADD_TO_AMM for long, REMOVE_FROM_AMM for short.\\n     * @param _quoteAssetAmount quote asset amount\\n     * @return base asset amount\\n     */\\n    function getInputPrice(Dir _dirOfQuote, Decimal.decimal memory _quoteAssetAmount)\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return getInputPriceWithReserves(_dirOfQuote, _quoteAssetAmount, quoteAssetReserve, baseAssetReserve);\\n    }\\n\\n    /**\\n     * @notice get output price. return how many quote asset you will get with the input base amount\\n     * @param _dirOfBase ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`.\\n     * @param _baseAssetAmount base asset amount\\n     * @return quote asset amount\\n     */\\n    function getOutputPrice(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        public\\n        view\\n        override\\n        returns (Decimal.decimal memory)\\n    {\\n        return getOutputPriceWithReserves(_dirOfBase, _baseAssetAmount, quoteAssetReserve, baseAssetReserve);\\n    }\\n\\n    /**\\n     * @notice get underlying price provided by oracle\\n     * @return underlying price\\n     */\\n    function getUnderlyingPrice() public view override returns (Decimal.decimal memory) {\\n        return Decimal.decimal(priceFeed.getPrice(priceFeedKey));\\n    }\\n\\n\\n    /**\\n     * @notice get spot price based on current quote/base asset reserve.\\n     * @return spot price\\n     */\\n    function getSpotPrice() public view override returns (Decimal.decimal memory) {\\n        return quoteAssetReserve.divD(baseAssetReserve);\\n    }\\n\\n    /**\\n     * @notice get twap price\\n     */\\n    function getTwapPrice(uint256 _intervalInSeconds) public view returns (Decimal.decimal memory) {\\n        return implGetReserveTwapPrice(_intervalInSeconds);\\n    }\\n\\n    /**\\n     * @notice get current quote/base asset reserve.\\n     * @return (quote asset reserve, base asset reserve)\\n     */\\n    function getReserve() external view returns (Decimal.decimal memory, Decimal.decimal memory) {\\n        return (quoteAssetReserve, baseAssetReserve);\\n    }\\n\\n    function getSnapshotLen() external view returns (uint256) {\\n        return reserveSnapshots.length;\\n    }\\n\\n    function getLiquidityHistoryLength() external view override returns (uint256) {\\n        return liquidityChangedSnapshots.length;\\n    }\\n\\n    function getCumulativeNotional() external view override returns (SignedDecimal.signedDecimal memory) {\\n        return cumulativeNotional;\\n    }\\n\\n    function getLatestLiquidityChangedSnapshots() public view returns (LiquidityChangedSnapshot memory) {\\n        return liquidityChangedSnapshots[liquidityChangedSnapshots.length.sub(1)];\\n    }\\n\\n    function getLiquidityChangedSnapshots(uint256 i) external view override returns (LiquidityChangedSnapshot memory) {\\n        require(i < liquidityChangedSnapshots.length, \\\"incorrect index\\\");\\n        return liquidityChangedSnapshots[i];\\n    }\\n\\n    function getSettlementPrice() external view override returns (Decimal.decimal memory) {\\n        return settlementPrice;\\n    }\\n\\n    // DEPRECATED only for backward compatibility before we upgrade ClearingHouse\\n    function getBaseAssetDeltaThisFundingPeriod() external view override returns (SignedDecimal.signedDecimal memory) {\\n        return baseAssetDeltaThisFundingPeriod;\\n    }\\n\\n    function getMaxHoldingBaseAsset() external view override returns (Decimal.decimal memory) {\\n        return maxHoldingBaseAsset;\\n    }\\n\\n    function getOpenInterestNotionalCap() external view override returns (Decimal.decimal memory) {\\n        return openInterestNotionalCap;\\n    }\\n\\n    function getBaseAssetDelta() external view override returns (SignedDecimal.signedDecimal memory) {\\n        return totalPositionSize;\\n    }\\n\\n    function isOverSpreadLimit() external view override returns (bool) {\\n        Decimal.decimal memory oraclePrice = getUnderlyingPrice();\\n        require(oraclePrice.toUint() > 0, \\\"underlying price is 0\\\");\\n        Decimal.decimal memory marketPrice = getSpotPrice();\\n        Decimal.decimal memory oracleSpreadRatioAbs =\\n            MixedDecimal.fromDecimal(marketPrice).subD(oraclePrice).divD(oraclePrice).abs();\\n\\n        return oracleSpreadRatioAbs.toUint() >= MAX_ORACLE_SPREAD_RATIO ? true : false;\\n    }\\n\\n    /**\\n     * @notice calculate total fee (including toll and spread) by input quoteAssetAmount\\n     * @param _quoteAssetAmount quoteAssetAmount\\n     * @return total tx fee\\n     */\\n    function calcFee(Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        override\\n        returns (Decimal.decimal memory, Decimal.decimal memory)\\n    {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return (Decimal.zero(), Decimal.zero());\\n        }\\n        return (_quoteAssetAmount.mulD(tollRatio), _quoteAssetAmount.mulD(spreadRatio));\\n    }\\n\\n    /*       plus/minus 1 while the amount is not dividable\\n     *\\n     *        getInputPrice                         getOutputPrice\\n     *\\n     *     \\uff21\\uff24\\uff24      (amount - 1)              (amount + 1)   \\uff32\\uff25\\uff2d\\uff2f\\uff36\\uff25\\n     *      \\u25e5\\u25e4            \\u25b2                         |             \\u25e2\\u25e3\\n     *      \\u25e5\\u25e4  ------->  |                         \\u25bc  <--------  \\u25e2\\u25e3\\n     *    -------      -------                   -------        -------\\n     *    |  Q  |      |  B  |                   |  Q  |        |  B  |\\n     *    -------      -------                   -------        -------\\n     *      \\u25e5\\u25e4  ------->  \\u25b2                         |  <--------  \\u25e2\\u25e3\\n     *      \\u25e5\\u25e4            |                         \\u25bc             \\u25e2\\u25e3\\n     *   \\uff32\\uff25\\uff2d\\uff2f\\uff36\\uff25  (amount + 1)              (amount + 1)      \\uff21\\uff24\\uff24\\n     **/\\n\\n    function getInputPriceWithReserves(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) public pure override returns (Decimal.decimal memory) {\\n        if (_quoteAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n\\n        bool isAddToAmm = _dirOfQuote == Dir.ADD_TO_AMM;\\n        SignedDecimal.signedDecimal memory invariant =\\n            MixedDecimal.fromDecimal(_quoteAssetPoolAmount.mulD(_baseAssetPoolAmount));\\n        SignedDecimal.signedDecimal memory baseAssetAfter;\\n        Decimal.decimal memory quoteAssetAfter;\\n        Decimal.decimal memory baseAssetBought;\\n        if (isAddToAmm) {\\n            quoteAssetAfter = _quoteAssetPoolAmount.addD(_quoteAssetAmount);\\n        } else {\\n            quoteAssetAfter = _quoteAssetPoolAmount.subD(_quoteAssetAmount);\\n        }\\n        require(quoteAssetAfter.toUint() != 0, \\\"quote asset after is 0\\\");\\n\\n        baseAssetAfter = invariant.divD(quoteAssetAfter);\\n        baseAssetBought = baseAssetAfter.subD(_baseAssetPoolAmount).abs();\\n\\n        // if the amount is not dividable, return 1 wei less for trader\\n        if (invariant.abs().modD(quoteAssetAfter).toUint() != 0) {\\n            if (isAddToAmm) {\\n                baseAssetBought = baseAssetBought.subD(Decimal.decimal(1));\\n            } else {\\n                baseAssetBought = baseAssetBought.addD(Decimal.decimal(1));\\n            }\\n        }\\n\\n        return baseAssetBought;\\n    }\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) public pure override returns (Decimal.decimal memory) {\\n        if (_baseAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n\\n        bool isAddToAmm = _dirOfBase == Dir.ADD_TO_AMM;\\n        SignedDecimal.signedDecimal memory invariant =\\n            MixedDecimal.fromDecimal(_quoteAssetPoolAmount.mulD(_baseAssetPoolAmount));\\n        SignedDecimal.signedDecimal memory quoteAssetAfter;\\n        Decimal.decimal memory baseAssetAfter;\\n        Decimal.decimal memory quoteAssetSold;\\n\\n        if (isAddToAmm) {\\n            baseAssetAfter = _baseAssetPoolAmount.addD(_baseAssetAmount);\\n        } else {\\n            baseAssetAfter = _baseAssetPoolAmount.subD(_baseAssetAmount);\\n        }\\n        require(baseAssetAfter.toUint() != 0, \\\"base asset after is 0\\\");\\n\\n        quoteAssetAfter = invariant.divD(baseAssetAfter);\\n        quoteAssetSold = quoteAssetAfter.subD(_quoteAssetPoolAmount).abs();\\n\\n        // if the amount is not dividable, return 1 wei less for trader\\n        if (invariant.abs().modD(baseAssetAfter).toUint() != 0) {\\n            if (isAddToAmm) {\\n                quoteAssetSold = quoteAssetSold.subD(Decimal.decimal(1));\\n            } else {\\n                quoteAssetSold = quoteAssetSold.addD(Decimal.decimal(1));\\n            }\\n        }\\n\\n        return quoteAssetSold;\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n    // update funding rate = premiumFraction / twapIndexPrice\\n    function updateFundingRate(\\n        SignedDecimal.signedDecimal memory _premiumFraction,\\n        Decimal.decimal memory _underlyingPrice\\n    ) private {\\n        fundingRate = _premiumFraction.divD(_underlyingPrice);\\n        emit FundingRateUpdated(fundingRate.toInt(), _underlyingPrice.toUint());\\n    }\\n\\n    function addReserveSnapshot() internal {\\n        uint256 currentBlock = _blockNumber();\\n        ReserveSnapshot storage latestSnapshot = reserveSnapshots[reserveSnapshots.length - 1];\\n        // update values in snapshot if in the same block\\n        if (currentBlock == latestSnapshot.blockNumber) {\\n            latestSnapshot.quoteAssetReserve = quoteAssetReserve;\\n            latestSnapshot.baseAssetReserve = baseAssetReserve;\\n        } else {\\n            reserveSnapshots.push(\\n                ReserveSnapshot(quoteAssetReserve, baseAssetReserve, _blockTimestamp(), currentBlock)\\n            );\\n        }\\n        emit ReserveSnapshotted(quoteAssetReserve.toUint(), baseAssetReserve.toUint(), _blockTimestamp());\\n    }\\n\\n    function implSwapOutput(\\n        Dir _dirOfBase,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) internal returns (Decimal.decimal memory) {\\n        if (_baseAssetAmount.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        if (_dirOfBase == Dir.REMOVE_FROM_AMM) {\\n            require(baseAssetReserve.mulD(tradeLimitRatio).toUint() >= _baseAssetAmount.toUint(), \\\"over trading limit\\\");\\n        }\\n\\n        Decimal.decimal memory quoteAssetAmount = getOutputPrice(_dirOfBase, _baseAssetAmount);\\n        Dir dirOfQuote = _dirOfBase == Dir.ADD_TO_AMM ? Dir.REMOVE_FROM_AMM : Dir.ADD_TO_AMM;\\n        // If SHORT, exchanged quote amount should be less than _quoteAssetAmountLimit,\\n        // otherwise(LONG), exchanged base amount should be more than _quoteAssetAmountLimit.\\n        // In the SHORT case, more quote assets means more payment so should not be more than _quoteAssetAmountLimit\\n        if (_quoteAssetAmountLimit.toUint() != 0) {\\n            if (dirOfQuote == Dir.REMOVE_FROM_AMM) {\\n                // SHORT\\n                require(quoteAssetAmount.toUint() >= _quoteAssetAmountLimit.toUint(), \\\"Less than minimal quote token\\\");\\n            } else {\\n                // LONG\\n                require(quoteAssetAmount.toUint() <= _quoteAssetAmountLimit.toUint(), \\\"More than maximal quote token\\\");\\n            }\\n        }\\n\\n        // as mentioned in swapOutput(), it always allows going over fluctuation limit because\\n        // it is only used by close/liquidate positions\\n        updateReserve(dirOfQuote, quoteAssetAmount, _baseAssetAmount, true);\\n        emit SwapOutput(_dirOfBase, quoteAssetAmount.toUint(), _baseAssetAmount.toUint());\\n        return quoteAssetAmount;\\n    }\\n\\n    // the direction is in quote asset\\n    function updateReserve(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _baseAssetAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal {\\n        // check if it's over fluctuationLimitRatio\\n        // this check should be before reserves being updated\\n        checkIsOverBlockFluctuationLimit(_dirOfQuote, _quoteAssetAmount, _baseAssetAmount, _canOverFluctuationLimit);\\n\\n        if (_dirOfQuote == Dir.ADD_TO_AMM) {\\n            quoteAssetReserve = quoteAssetReserve.addD(_quoteAssetAmount);\\n            baseAssetReserve = baseAssetReserve.subD(_baseAssetAmount);\\n            // DEPRECATED only for backward compatibility before we upgrade ClearingHouse\\n            baseAssetDeltaThisFundingPeriod = baseAssetDeltaThisFundingPeriod.subD(_baseAssetAmount);\\n            totalPositionSize = totalPositionSize.addD(_baseAssetAmount);\\n            cumulativeNotional = cumulativeNotional.addD(_quoteAssetAmount);\\n        } else {\\n            quoteAssetReserve = quoteAssetReserve.subD(_quoteAssetAmount);\\n            baseAssetReserve = baseAssetReserve.addD(_baseAssetAmount);\\n            // DEPRECATED only for backward compatibility before we upgrade ClearingHouse\\n            baseAssetDeltaThisFundingPeriod = baseAssetDeltaThisFundingPeriod.addD(_baseAssetAmount);\\n            totalPositionSize = totalPositionSize.subD(_baseAssetAmount);\\n            cumulativeNotional = cumulativeNotional.subD(_quoteAssetAmount);\\n        }\\n\\n        // addReserveSnapshot must be after checking price fluctuation\\n        addReserveSnapshot();\\n    }\\n\\n    function implGetInputAssetTwapPrice(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _assetAmount,\\n        QuoteAssetDir _inOut,\\n        uint256 _interval\\n    ) internal view returns (Decimal.decimal memory) {\\n        TwapPriceCalcParams memory params;\\n        params.opt = TwapCalcOption.INPUT_ASSET;\\n        params.snapshotIndex = reserveSnapshots.length.sub(1);\\n        params.asset.dir = _dirOfQuote;\\n        params.asset.assetAmount = _assetAmount;\\n        params.asset.inOrOut = _inOut;\\n        return calcTwap(params, _interval);\\n    }\\n\\n    function implGetReserveTwapPrice(uint256 _interval) internal view returns (Decimal.decimal memory) {\\n        TwapPriceCalcParams memory params;\\n        params.opt = TwapCalcOption.RESERVE_ASSET;\\n        params.snapshotIndex = reserveSnapshots.length.sub(1);\\n        return calcTwap(params, _interval);\\n    }\\n\\n    function calcTwap(TwapPriceCalcParams memory _params, uint256 _interval)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        Decimal.decimal memory currentPrice = getPriceWithSpecificSnapshot(_params);\\n        if (_interval == 0) {\\n            return currentPrice;\\n        }\\n\\n        uint256 baseTimestamp = _blockTimestamp().sub(_interval);\\n        ReserveSnapshot memory currentSnapshot = reserveSnapshots[_params.snapshotIndex];\\n        // return the latest snapshot price directly\\n        // if only one snapshot or the timestamp of latest snapshot is earlier than asking for\\n        if (reserveSnapshots.length == 1 || currentSnapshot.timestamp <= baseTimestamp) {\\n            return currentPrice;\\n        }\\n\\n        uint256 previousTimestamp = currentSnapshot.timestamp;\\n        uint256 period = _blockTimestamp().sub(previousTimestamp);\\n        Decimal.decimal memory weightedPrice = currentPrice.mulScalar(period);\\n        while (true) {\\n            // if snapshot history is too short\\n            if (_params.snapshotIndex == 0) {\\n                return weightedPrice.divScalar(period);\\n            }\\n\\n            _params.snapshotIndex = _params.snapshotIndex.sub(1);\\n            currentSnapshot = reserveSnapshots[_params.snapshotIndex];\\n            currentPrice = getPriceWithSpecificSnapshot(_params);\\n\\n            // check if current round timestamp is earlier than target timestamp\\n            if (currentSnapshot.timestamp <= baseTimestamp) {\\n                // weighted time period will be (target timestamp - previous timestamp). For example,\\n                // now is 1000, _interval is 100, then target timestamp is 900. If timestamp of current round is 970,\\n                // and timestamp of NEXT round is 880, then the weighted time period will be (970 - 900) = 70,\\n                // instead of (970 - 880)\\n                weightedPrice = weightedPrice.addD(currentPrice.mulScalar(previousTimestamp.sub(baseTimestamp)));\\n                break;\\n            }\\n\\n            uint256 timeFraction = previousTimestamp.sub(currentSnapshot.timestamp);\\n            weightedPrice = weightedPrice.addD(currentPrice.mulScalar(timeFraction));\\n            period = period.add(timeFraction);\\n            previousTimestamp = currentSnapshot.timestamp;\\n        }\\n        return weightedPrice.divScalar(_interval);\\n    }\\n\\n    function getPriceWithSpecificSnapshot(TwapPriceCalcParams memory params)\\n        internal\\n        view\\n        virtual\\n        returns (Decimal.decimal memory)\\n    {\\n        ReserveSnapshot memory snapshot = reserveSnapshots[params.snapshotIndex];\\n\\n        // RESERVE_ASSET means price comes from quoteAssetReserve/baseAssetReserve\\n        // INPUT_ASSET means getInput/Output price with snapshot's reserve\\n        if (params.opt == TwapCalcOption.RESERVE_ASSET) {\\n            return snapshot.quoteAssetReserve.divD(snapshot.baseAssetReserve);\\n        } else if (params.opt == TwapCalcOption.INPUT_ASSET) {\\n            if (params.asset.assetAmount.toUint() == 0) {\\n                return Decimal.zero();\\n            }\\n            if (params.asset.inOrOut == QuoteAssetDir.QUOTE_IN) {\\n                return\\n                    getInputPriceWithReserves(\\n                        params.asset.dir,\\n                        params.asset.assetAmount,\\n                        snapshot.quoteAssetReserve,\\n                        snapshot.baseAssetReserve\\n                    );\\n            } else if (params.asset.inOrOut == QuoteAssetDir.QUOTE_OUT) {\\n                return\\n                    getOutputPriceWithReserves(\\n                        params.asset.dir,\\n                        params.asset.assetAmount,\\n                        snapshot.quoteAssetReserve,\\n                        snapshot.baseAssetReserve\\n                    );\\n            }\\n        }\\n        revert(\\\"not supported option\\\");\\n    }\\n\\n    function getPriceBoundariesOfLastBlock() internal view returns (Decimal.decimal memory, Decimal.decimal memory) {\\n        uint256 len = reserveSnapshots.length;\\n        ReserveSnapshot memory latestSnapshot = reserveSnapshots[len.sub(1)];\\n        // if the latest snapshot is the same as current block, get the previous one\\n        if (latestSnapshot.blockNumber == _blockNumber() && len > 1) {\\n            latestSnapshot = reserveSnapshots[len.sub(2)];\\n        }\\n\\n        Decimal.decimal memory lastPrice = latestSnapshot.quoteAssetReserve.divD(latestSnapshot.baseAssetReserve);\\n        Decimal.decimal memory upperLimit = lastPrice.mulD(Decimal.one().addD(fluctuationLimitRatio));\\n        Decimal.decimal memory lowerLimit = lastPrice.mulD(Decimal.one().subD(fluctuationLimitRatio));\\n        return (upperLimit, lowerLimit);\\n    }\\n\\n    /**\\n     * @notice there can only be one tx in a block can skip the fluctuation check\\n     *         otherwise, some positions can never be closed or liquidated\\n     * @param _canOverFluctuationLimit if true, can skip fluctuation check for once; else, can never skip\\n     */\\n    function checkIsOverBlockFluctuationLimit(\\n        Dir _dirOfQuote,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _baseAssetAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal view {\\n        // Skip the check if the limit is 0\\n        if (fluctuationLimitRatio.toUint() == 0) {\\n            return;\\n        }\\n\\n        //\\n        // assume the price of the last block is 10, fluctuation limit ratio is 5%, then\\n        //\\n        //          current price\\n        //  --+---------+-----------+---\\n        //   9.5        10         10.5\\n        // lower limit           upper limit\\n        //\\n        // when `openPosition`, the price can only be between 9.5 - 10.5\\n        // when `liquidate` and `closePosition`, the price can exceed the boundary once\\n        // (either lower than 9.5 or higher than 10.5)\\n        // once it exceeds the boundary, all the rest txs in this block fail\\n        //\\n\\n        (Decimal.decimal memory upperLimit, Decimal.decimal memory lowerLimit) = getPriceBoundariesOfLastBlock();\\n\\n        Decimal.decimal memory price = quoteAssetReserve.divD(baseAssetReserve);\\n        require(price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0, \\\"price is already over fluctuation limit\\\");\\n\\n        if (!_canOverFluctuationLimit) {\\n            price = (_dirOfQuote == Dir.ADD_TO_AMM)\\n                ? quoteAssetReserve.addD(_quoteAssetAmount).divD(baseAssetReserve.subD(_baseAssetAmount))\\n                : quoteAssetReserve.subD(_quoteAssetAmount).divD(baseAssetReserve.addD(_baseAssetAmount));\\n            require(price.cmp(upperLimit) <= 0 && price.cmp(lowerLimit) >= 0, \\\"price is over fluctuation limit\\\");\\n        }\\n    }\\n\\n    function checkLiquidityMultiplierLimit(\\n        SignedDecimal.signedDecimal memory _positionSize,\\n        Decimal.decimal memory _liquidityMultiplier\\n    ) internal view {\\n        // have lower bound when position size is long\\n        if (_positionSize.toInt() > 0) {\\n            Decimal.decimal memory liquidityMultiplierLowerBound =\\n                _positionSize\\n                    .addD(Decimal.decimal(MARGIN_FOR_LIQUIDITY_MIGRATION_ROUNDING))\\n                    .divD(baseAssetReserve)\\n                    .abs();\\n            require(_liquidityMultiplier.cmp(liquidityMultiplierLowerBound) >= 0, \\\"illegal liquidity multiplier\\\");\\n        }\\n    }\\n\\n    function implShutdown() internal {\\n        LiquidityChangedSnapshot memory latestLiquiditySnapshot = getLatestLiquidityChangedSnapshots();\\n\\n        // get last liquidity changed history to calc new quote/base reserve\\n        Decimal.decimal memory previousK =\\n            latestLiquiditySnapshot.baseAssetReserve.mulD(latestLiquiditySnapshot.quoteAssetReserve);\\n        SignedDecimal.signedDecimal memory lastInitBaseReserveInNewCurve =\\n            latestLiquiditySnapshot.totalPositionSize.addD(latestLiquiditySnapshot.baseAssetReserve);\\n        SignedDecimal.signedDecimal memory lastInitQuoteReserveInNewCurve =\\n            MixedDecimal.fromDecimal(previousK).divD(lastInitBaseReserveInNewCurve);\\n\\n        // settlementPrice = SUM(Open Position Notional Value) / SUM(Position Size)\\n        // `Open Position Notional Value` = init quote reserve - current quote reserve\\n        // `Position Size` = init base reserve - current base reserve\\n        SignedDecimal.signedDecimal memory positionNotionalValue =\\n            lastInitQuoteReserveInNewCurve.subD(quoteAssetReserve);\\n\\n        // if total position size less than IGNORABLE_DIGIT_FOR_SHUTDOWN, treat it as 0 positions due to rounding error\\n        if (totalPositionSize.toUint() > IGNORABLE_DIGIT_FOR_SHUTDOWN) {\\n            settlementPrice = positionNotionalValue.abs().divD(totalPositionSize.abs());\\n        }\\n\\n        open = false;\\n        emit Shutdown(settlementPrice.toUint());\\n    }\\n}\\n\",\"keccak256\":\"0x441de4a2d0a0bf971c7ee8e9819d6e9e5935ff3174d08d7f82d72b35151d40ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct LiquidityChangedSnapshot {\\n        SignedDecimal.signedDecimal cumulativeNotional;\\n        // the base/quote reserve of amm right before liquidity changed\\n        Decimal.decimal quoteAssetReserve;\\n        Decimal.decimal baseAssetReserve;\\n        // total position size owned by amm after last snapshot taken\\n        // `totalPositionSize` = currentBaseAssetReserve - lastLiquidityChangedHistoryItem.baseAssetReserve + prevTotalPositionSize\\n        SignedDecimal.signedDecimal totalPositionSize;\\n    }\\n\\n    function swapInput(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function shutdown() external;\\n\\n    function settleFunding() external returns (SignedDecimal.signedDecimal memory);\\n\\n    function calcFee(Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function isOverFluctuationLimit(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calcBaseAssetAfterLiquidityMigration(\\n        SignedDecimal.signedDecimal memory _baseAssetAmount,\\n        Decimal.decimal memory _fromQuoteReserve,\\n        Decimal.decimal memory _fromBaseReserve\\n    ) external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getInputTwap(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPrice(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getSpotPrice() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityHistoryLength() external view returns (uint256);\\n\\n    // overridden by state variable\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    // can not be overridden by state variable due to type `Deciaml.decimal`\\n    function getSettlementPrice() external view returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDeltaThisFundingPeriod()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getMaxHoldingBaseAsset() external view returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityChangedSnapshots(uint256 i)\\n        external\\n        view\\n        returns (LiquidityChangedSnapshot memory);\\n\\n    function getBaseAssetDelta() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getUnderlyingPrice() external view returns (Decimal.decimal memory);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d5f998a5439e3776cc385cc68d32bd72b020e31037c025d1372c6bc0a4d768\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n    // get latest price\\n    function getPrice(bytes32 _priceFeedKey) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xac71088b15d542724cdb376575728aae59399e0556c94b8ff079b20da804e720\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MixedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./SignedDecimal.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev To handle a signedDecimal add/sub/mul/div a decimal and provide convert decimal to signedDecimal helper\\nlibrary MixedDecimal {\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using SignedSafeMath for int256;\\n\\n    uint256 private constant _INT256_MAX = 2**255 - 1;\\n    string private constant ERROR_NON_CONVERTIBLE =\\n        \\\"MixedDecimal: uint value is bigger than _INT256_MAX\\\";\\n\\n    modifier convertible(Decimal.decimal memory x) {\\n        require(_INT256_MAX >= x.d, ERROR_NON_CONVERTIBLE);\\n        _;\\n    }\\n\\n    function fromDecimal(Decimal.decimal memory x)\\n        internal\\n        pure\\n        convertible(x)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return SignedDecimal.signedDecimal(int256(x.d));\\n    }\\n\\n    function toUint(SignedDecimal.signedDecimal memory x) internal pure returns (uint256) {\\n        return x.abs().d;\\n    }\\n\\n    /// @dev add SignedDecimal.signedDecimal and Decimal.decimal, using SignedSafeMath directly\\n    function addD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.add(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev subtract SignedDecimal.signedDecimal by Decimal.decimal, using SignedSafeMath directly\\n    function subD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.sub(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by Decimal.decimal\\n    function mulD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by a uint256\\n    function mulScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulScalar(int256(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a Decimal.decimal\\n    function divD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a uint256\\n    function divScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divScalar(int256(y));\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xd761a7aee6c51a11d4e1575494085f253a65e6b86db58ec26c80766fed987de0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n    using SignedSafeMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(signedDecimal memory x) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xf5a874997ac59e59cc1176149e159a095977b145232507e8faa7bd0933d6e7f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    using SignedSafeMath for int256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x5fdb8310e8a1d7f2770179ff12515c0cfbbf83474a263ce316f4a4a9a7dda8b8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614452806100206000396000f3fe608060405234801561001057600080fd5b50600436106103c55760003560e01c80636fa42ede116101ff578063bc5920ba1161011a578063e4bc2eb9116100ad578063f1b5df861161007c578063f1b5df8614610714578063fc0e74d114610727578063fcfff16f1461072f578063fdf262b714610737576103c5565b8063e4bc2eb9146106f4578063e805d6fc146106fc578063ec2c0e6314610704578063ed83d79c1461070c576103c5565b8063da0c5927116100e9578063da0c5927146106be578063dc76fabc146106d1578063e0037a6c146106d9578063e1f1027f146106e1576103c5565b8063bc5920ba14610693578063c2de442f1461069b578063c9566fcc146106a3578063d71ec2ad146106ab576103c5565b80637ec3246d116101925780639e010362116101615780639e010362146106525780639ece77c81461065a578063a8f8be4e1461066d578063b2ed32c714610680576103c5565b80637ec3246d1461061c5780638da5cb5b1461062f5780638f40d932146106375780639bf5d1d41461063f576103c5565b8063724e78da116101ce578063724e78da146105e6578063741bef1a146105f957806374d7c62b1461060157806375df638914610609576103c5565b80636fa42ede146105b05780636fdca5e0146105c35780636febdd50146105d6578063715018a6146105de576103c5565b806341d3c84c116102ef57806358a4c3dc116102825780636226795511610251578063622679551461057a57806362e7a1761461058d5780636baccaba146105a05780636c8381f8146105a8576103c5565b806358a4c3dc1461054157806359bf5d39146105495780635f1ba1fd1461055f578063620be06714610567576103c5565b80634cb876f2116102be5780634cb876f21461050b57806350799c8114610513578063524f15a1146105265780635254541014610539576103c5565b806341d3c84c146104e057806342b3198b146104e8578063468f02d2146104f05780634894d183146104f8576103c5565b80631b584d6c1161036757806329f9b17b1161033657806329f9b17b146104b55780632d666e38146104bd5780632f848859146104c557806340d71cd9146104cd576103c5565b80631b584d6c146104625780631d3acb441461047757806321e009851461047f578063237f17ee146104a2576103c5565b80630dd68c70116103a35780630dd68c7014610405578063113773941461041a578063130234cf1461042f57806313af40351461044f576103c5565b80630244accf146103ca57806305172a25146103e85780630d451c8f146103fd575b600080fd5b6103d261073f565b6040516103df9190613af4565b60405180910390f35b6103f061074e565b6040516103df9190613b13565b6103f061075a565b6104186104133660046139d2565b610760565b005b610422610816565b6040516103df9190614355565b61044261043d366004613910565b610832565b6040516103df9190613b08565b61041861045d366004613832565b610997565b61046a610a70565b6040516103df9190614326565b6103f0610afe565b61049261048d366004613a3d565b610b04565b6040516103df949392919061436f565b61046a6104b0366004613a3d565b610b52565b610422610bf2565b6103f0610c0e565b610422610c14565b6104226104db3660046139ee565b610c30565b6103f0610cec565b6103f0610cf2565b610422610cf8565b610422610506366004613910565b610d95565b6103f0610dac565b610422610521366004613945565b610db2565b6104186105343660046139b7565b610f23565b610422610f5e565b6103f0610f7a565b610551610f80565b6040516103df92919061435f565b6103f0610fb2565b610418610575366004613a6d565b610fb8565b61055161058836600461399c565b6112f7565b61041861059b366004613a3d565b611392565b6103f06113e9565b6103d26113ef565b6104226105be366004613910565b6113fe565b6104186105d136600461384e565b611415565b6103f06114cf565b6104186114d5565b6104186105f4366004613832565b611554565b6103d261160b565b6103f061161a565b6104226106173660046138b4565b611620565b61041861062a3660046139b7565b61184e565b6103d2611889565b6103f0611898565b61042261064d366004613945565b61189e565b61044261197c565b610418610668366004613832565b611a2a565b61041861067b3660046139b7565b611a81565b61041861068e366004613832565b611abc565b610418611b13565b6103f0611bd6565b6103f0611bdc565b6104226106b936600461386e565b611be2565b6104226106cc366004613910565b611c6f565b610422611ca1565b6103f0611cdb565b6104226106ef366004613910565b611ce1565b6103f0611d13565b610422611d19565b610422611d35565b610422611d51565b610422610722366004613a3d565b611eab565b610418611ebc565b610442611f2a565b6103d2611f3a565b60e2546001600160a01b031681565b67016345785d8a000081565b60e05490565b610768611f49565b6065546001600160a01b0390811691161461079e5760405162461bcd60e51b815260040161079590613e0c565b60405180910390fd5b815160d7819055815160d85560408051602081019091529081527f7338f3784ceb8f9456bac0c4a69f1c6354dc325fa6455e3e3f6a8a9bf9249a7c906107e390611f4d565b604080516020810190915260d85481526107fc90611f4d565b60405161080a929190613b3e565b60405180910390a15050565b61081e61371d565b50604080516020810190915260d754815290565b604080516020810190915260d354815260009061084e90611f4d565b61085a57506000610991565b61086261371d565b61086a61371d565b610872611f51565b9150915061087e61371d565b6108888686611c6f565b905061089261371d565b60018760018111156108a057fe5b146108fa57604080516020810190915260d25481526108f5906108c9908863ffffffff61211e16565b604080516020810190915260d15481526108e9908563ffffffff61214a16565b9063ffffffff61216d16565b61093e565b604080516020810190915260d254815261093e9061091e908863ffffffff61214a16565b604080516020810190915260d15481526108e9908563ffffffff61211e16565b90506000610952828663ffffffff61219016565b60000b1315801561097657506000610970828563ffffffff61219016565b60000b12155b15610988576000945050505050610991565b60019450505050505b92915050565b61099f611f49565b6065546001600160a01b039081169116146109cc5760405162461bcd60e51b815260040161079590613e0c565b6001600160a01b0381166109f25760405162461bcd60e51b8152600401610795906142af565b6065546001600160a01b0382811691161415610a205760405162461bcd60e51b8152600401610795906141c7565b6066546001600160a01b0382811691161415610a4e5760405162461bcd60e51b815260040161079590613cf8565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b610a78613730565b60da8054610a8d90600163ffffffff6121c116565b81548110610a9757fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481528385015281518085018352600282015481528383015281519384019091526003015482526060810191909152905090565b60d35481565b60e08181548110610b1157fe5b600091825260209182902060408051808501825260049093029091018054835281519384019091526001810154835260028101546003909101549193509084565b610b5a613730565b60da548210610b7b5760405162461bcd60e51b815260040161079590613de3565b60da8281548110610b8857fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152838501528151808501835260028201548152838301528151938401909152600301548252606081019190915290505b919050565b610bfa61371d565b50604080516020810190915260ce54815290565b60d65481565b610c1c61371d565b50604080516020810190915260cc54815290565b610c3861371d565b610c4184612203565b610c4c575082610ce5565b600080610c5886611f4d565b13610c64576000610c67565b60015b9050610c7161371d565b610c9382610c80576001610c83565b60005b610c8c88612215565b878761189e565b9050610c9d61371d565b610cbd610cb884610caf576000610cb2565b60015b84611ce1565b612243565b9050610cdf83610ccf57600019610cd2565b60015b829063ffffffff6122a716565b93505050505b9392505050565b60cd5481565b60da5490565b610d0061371d565b60408051602081019182905260e45460df546331d98b3f60e01b909352909182916001600160a01b0316906331d98b3f90610d3e9060248501613b13565b60206040518083038186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190613a55565b9052905090565b610d9d61371d565b610ce5838360006103846122c9565b60cc5481565b610dba61371d565b610dc384611f4d565b610dd657610dcf61234f565b9050610f1b565b600080866001811115610de557fe5b149050610df061371d565b610e03610cb8868663ffffffff61236a16565b9050610e0d61371d565b610e1561371d565b610e1d61371d565b8415610e3a57610e33888a63ffffffff61211e16565b9150610e4d565b610e4a888a63ffffffff61214a16565b91505b610e5682611f4d565b610e725760405162461bcd60e51b815260040161079590614197565b610e82848363ffffffff61238d16565b9250610e9c610e97848963ffffffff61240716565b612215565b9050610ebf610eba83610eae87612215565b9063ffffffff61247c16565b611f4d565b15610f14578415610ef157604080516020810190915260018152610eea90829063ffffffff61214a16565b9050610f14565b604080516020810190915260018152610f1190829063ffffffff61211e16565b90505b9450505050505b949350505050565b610f2b611f49565b6065546001600160a01b03908116911614610f585760405162461bcd60e51b815260040161079590613e0c565b5160d555565b610f6661371d565b50604080516020810190915260d854815290565b60df5481565b610f8861371d565b610f9061371d565b5050604080516020808201835260d1548252825190810190925260d254825291565b60db5481565b600054610100900460ff1680610fd15750610fd16124c0565b80610fdf575060005460ff16155b610ffb5760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015611026576000805460ff1961ff0019909116610100171660011790555b8a1580159061103457508815155b801561103f57508915155b801561104a57508715155b801561105e57506001600160a01b03871615155b801561107257506001600160a01b03851615155b61108e5760405162461bcd60e51b815260040161079590614244565b6110966124c6565b6040805160208082018352908d905260d18d9055815180820183528c905260d28c9055815180820183528b905260d08b90558151808201835285905260d48590558151808201835284905260d5849055815190810190915284905260d384905560dc88905561110c88600263ffffffff61255816565b60dd55610e1060db5560df86905560e380546001600160a01b038088166001600160a01b03199283161790925560e48054928a169290911691909117905561115261259a565b5160d955604080516080810190915260da908061116d61234f565b8152604080516020818101835260d1548252808401919091528151908101825260d2548152908201526060016111a161234f565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015151600283015560609092015151600390910155805160a08101825260d1546080820190815281528151808401835260d25481529281019290925260e09190810161121a6125b7565b81526020016112276125bb565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015160028301556060909201516003909101558051918201905260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe90515906112a090611f4d565b604080516020810190915260d25481526112b990611f4d565b6112c16125b7565b6040516112d09392919061438a565b60405180910390a180156112ea576000805461ff00191690555b5050505050505050505050565b6112ff61371d565b61130761371d565b611319610eba368590038501856139b7565b6113365761132561234f565b61132d61234f565b9150915061138d565b604080516020810190915260d454815261136590611359368690038601866139b7565b9063ffffffff61236a16565b604080516020810190915260d554815261138890611359368790038701876139b7565b915091505b915091565b61139a611f49565b6065546001600160a01b039081169116146113c75760405162461bcd60e51b815260040161079590613e0c565b806113e45760405162461bcd60e51b815260040161079590613cc1565b60db55565b60d45481565b6066546001600160a01b031690565b61140661371d565b610ce5838360016103846122c9565b61141d611f49565b6065546001600160a01b0390811691161461144a5760405162461bcd60e51b815260040161079590613e0c565b60e45460ff600160a01b9091041615158115151415611468576114cc565b60e4805482158015600160a01b0260ff60a01b19909216919091179091556114cc576114c8610e106114bc610e106114b060dc546114a46125b7565b9063ffffffff6125bf16565b9063ffffffff61255816565b9063ffffffff6125e416565b60de555b50565b60d55481565b6114dd611f49565b6065546001600160a01b0390811691161461150a5760405162461bcd60e51b815260040161079590613e0c565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61155c611f49565b6065546001600160a01b039081169116146115895760405162461bcd60e51b815260040161079590613e0c565b6001600160a01b0381166115af5760405162461bcd60e51b8152600401610795906140a3565b60e480546001600160a01b0319166001600160a01b0383811691909117918290556040517fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e692611600921690613af4565b60405180910390a150565b60e4546001600160a01b031681565b60dc5481565b61162861371d565b60e454600160a01b900460ff166116515760405162461bcd60e51b815260040161079590613f37565b611659611f49565b60e1546001600160a01b039081169116146116865760405162461bcd60e51b815260040161079590613d3f565b611698610eba368690038601866139b7565b6116a457610dcf61234f565b60018560018111156116b257fe5b1415611718576116ca610eba368690038601866139b7565b604080516020808201835260d0548252825190810190925260d15482526116fa91610eba9163ffffffff61236a16565b10156117185760405162461bcd60e51b815260040161079590613db7565b61172061371d565b611733866106ef368890038801886139b7565b9050611747610eba368690038601866139b7565b156117d757600086600181111561175a57fe5b141561179e57611772610eba368690038601866139b7565b61177b82611f4d565b10156117995760405162461bcd60e51b815260040161079590613fd7565b6117d7565b6117b0610eba368690038601866139b7565b6117b982611f4d565b11156117d75760405162461bcd60e51b815260040161079590614111565b6117f1866117ea368890038801886139b7565b838661261e565b7fae6a2b946841d9afc0e1e19a94ae4af26f01125b87b5095bbfb177a9741a2ede86611825610eba368990038901896139b7565b61182e84611f4d565b60405161183d93929190613b1c565b60405180910390a195945050505050565b611856611f49565b6065546001600160a01b039081169116146118835760405162461bcd60e51b815260040161079590613e0c565b5160d455565b6065546001600160a01b031690565b60d05481565b6118a661371d565b6118af84611f4d565b6118bb57610dcf61234f565b6000808660018111156118ca57fe5b1490506118d561371d565b6118e8610cb8868663ffffffff61236a16565b90506118f261371d565b6118fa61371d565b61190261371d565b841561191f57611918878a63ffffffff61211e16565b9150611932565b61192f878a63ffffffff61214a16565b91505b61193b82611f4d565b6119575760405162461bcd60e51b815260040161079590613b9f565b611967848363ffffffff61238d16565b9250610e9c610e97848a63ffffffff61240716565b600061198661371d565b61198e610cf8565b9050600061199b82611f4d565b116119b85760405162461bcd60e51b815260040161079590613e59565b6119c061371d565b6119c8611ca1565b90506119d261371d565b6119fe610e97846119f2866119e687612243565b9063ffffffff61240716565b9063ffffffff61238d16565b905067016345785d8a0000611a1282611f4d565b1015611a1f576000611a22565b60015b935050505090565b611a32611f49565b6065546001600160a01b03908116911614611a5f5760405162461bcd60e51b815260040161079590613e0c565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b611a89611f49565b6065546001600160a01b03908116911614611ab65760405162461bcd60e51b815260040161079590613e0c565b5160d355565b611ac4611f49565b6065546001600160a01b03908116911614611af15760405162461bcd60e51b815260040161079590613e0c565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b0316611b3b5760405162461bcd60e51b815260040161079590614148565b611b43611f49565b6066546001600160a01b03908116911614611b705760405162461bcd60e51b815260040161079590613c7a565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60dd5481565b60d25481565b611bea61371d565b60e454600160a01b900460ff16611c135760405162461bcd60e51b815260040161079590613f37565b611c1b611f49565b60e1546001600160a01b03908116911614611c485760405162461bcd60e51b815260040161079590613d3f565b610f1b84611c5b368690038601866139b7565b611c6a368690038601866139b7565b6127ba565b611c7761371d565b604080516020808201835260d1548252825190810190925260d2548252610ce5918591859161189e565b611ca961371d565b604080516020808201835260d2548252825190810190925260d1548252611cd6919063ffffffff61216d16565b905090565b60de5481565b611ce961371d565b604080516020808201835260d1548252825190810190925260d2548252610ce59185918591610db2565b60d15481565b611d2161371d565b50604080516020810190915260cb54815290565b611d3d61371d565b50604080516020810190915260cf54815290565b611d5961371d565b60e454600160a01b900460ff16611d825760405162461bcd60e51b815260040161079590613f37565b611d8a611f49565b60e1546001600160a01b03908116911614611db75760405162461bcd60e51b815260040161079590613d3f565b60de54611dc26125b7565b1015611de05760405162461bcd60e51b81526004016107959061420d565b611de861371d565b611df0610cf8565b9050611dfa61371d565b611e0c826119e6610cb860db54611eab565b9050611e1661371d565b611e3e62015180611e3260dc548561296590919063ffffffff16565b9063ffffffff6129c816565b9050611e4a81846129ea565b6000611e5a60dd546114a46125b7565b90506000611e81610e106114bc610e106114b060dc5460de546125bf90919063ffffffff16565b9050818111611e905781611e92565b805b60de55611e9d61234f565b5160cb555090935050505090565b611eb361371d565b61099182612a42565b611ec4611889565b6001600160a01b0316611ed5611f49565b6001600160a01b03161480611f04575060e2546001600160a01b0316611ef9611f49565b6001600160a01b0316145b611f205760405162461bcd60e51b815260040161079590613fa0565b611f28612a73565b565b60e454600160a01b900460ff1681565b60e3546001600160a01b031681565b3390565b5190565b611f5961371d565b611f6161371d565b60e054611f6c61376f565b60e0611f7f83600163ffffffff6121c116565b81548110611f8957fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529050611fe46125bb565b8160600151148015611ff65750600182115b1561206c5760e061200e83600263ffffffff6121c116565b8154811061201857fe5b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290505b61207461371d565b6020820151825161208a9163ffffffff61216d16565b905061209461371d565b604080516020810190915260d35481526120cd906120c0906120b461259a565b9063ffffffff61211e16565b839063ffffffff61236a16565b90506120d761371d565b604080516020810190915260d354815261211090612103906120f761259a565b9063ffffffff61214a16565b849063ffffffff61236a16565b919650909450505050509091565b61212661371d565b61212e61371d565b825184516121419163ffffffff6125bf16565b81529392505050565b61215261371d565b61215a61371d565b825184516121419163ffffffff6121c116565b61217561371d565b61217d61371d565b825184516121419163ffffffff612bcb16565b8051825160009110156121a557506001610991565b8151835110156121b85750600019610991565b50600092915050565b6000610ce583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612bd9565b600061220e82612215565b5192915050565b61221d61371d565b61222561371d565b82516000131561223b5782516000038152610991565b915182525090565b61224b61371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906122925760405162461bcd60e51b81526004016107959190613b4c565b50506040805160208101909152915182525090565b6122af61371d565b6122b761371d565b8351612141908463ffffffff612c0516565b6122d161371d565b6122d96137a3565b600180825260e0546122ea916121c1565b6020820152604081015186600181111561230057fe5b9081600181111561230d57fe5b90525060408082018051602001879052510184600181111561232b57fe5b9081600181111561233857fe5b9052506123458184612c70565b9695505050505050565b61235761371d565b5060408051602081019091526000815290565b61237261371d565b61237a61371d565b825184516121419163ffffffff612edd16565b61239561371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906123dc5760405162461bcd60e51b81526004016107959190613b4c565b506123e561371d565b6123fe6123f185612243565b869063ffffffff612eeb16565b95945050505050565b61240f61371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906124565760405162461bcd60e51b81526004016107959190613b4c565b5061245f61371d565b835185516124729163ffffffff612f0e16565b8152949350505050565b61248461371d565b604051806020016040528083600001516124af6124a16012612f54565b87519063ffffffff6125e416565b816124b657fe5b0690529392505050565b303b1590565b600054610100900460ff16806124df57506124df6124c0565b806124ed575060005460ff16155b6125095760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015612534576000805460ff1961ff0019909116610100171660011790555b61253c612f5d565b612544612fde565b80156114cc576000805461ff001916905550565b6000610ce583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506130b8565b6125a261371d565b6040518060200160405280610d8e6012612f54565b4290565b4390565b600082820183811015610ce55760405162461bcd60e51b815260040161079590613c43565b6000826125f357506000610991565b8282028284828161260057fe5b0414610ce55760405162461bcd60e51b815260040161079590613f5f565b61262a848484846130ef565b600084600181111561263857fe5b14156126f757604080516020810190915260d154815261265e908463ffffffff61211e16565b5160d155604080516020810190915260d2548152612682908363ffffffff61214a16565b5160d255604080516020810190915260cb5481526126a6908363ffffffff61240716565b5160cb55604080516020810190915260cc5481526126ca908363ffffffff6132b816565b5160cc55604080516020810190915260ce5481526126ee908463ffffffff6132b816565b5160ce556127ac565b604080516020810190915260d1548152612717908463ffffffff61214a16565b5160d155604080516020810190915260d254815261273b908363ffffffff61211e16565b5160d255604080516020810190915260cb54815261275f908363ffffffff6132b816565b5160cb55604080516020810190915260cc548152612783908363ffffffff61240716565b5160cc55604080516020810190915260ce5481526127a7908463ffffffff61240716565b5160ce555b6127b4613323565b50505050565b6127c261371d565b6127cb83611f4d565b6127de576127d761234f565b9050610ce5565b60018460018111156127ec57fe5b1415612849576127fb83611f4d565b604080516020808201835260d0548252825190810190925260d254825261282b91610eba9163ffffffff61236a16565b10156128495760405162461bcd60e51b815260040161079590613db7565b61285161371d565b61285b8585611c6f565b905060008086600181111561286c57fe5b1461287857600061287b565b60015b905061288684611f4d565b1561290457600181600181111561289957fe5b14156128d4576128a884611f4d565b6128b183611f4d565b10156128cf5760405162461bcd60e51b815260040161079590613f00565b612904565b6128dd84611f4d565b6128e683611f4d565b11156129045760405162461bcd60e51b8152600401610795906140da565b612911818387600161261e565b7f0dd4066b1a6ce97fb670c3e4201e908c644193f38cbdaffd0229d7e26da3e5338661293c84611f4d565b61294588611f4d565b60405161295493929190613b1c565b60405180910390a150949350505050565b61296d61371d565b816001600160ff1b0310156040518060600160405280603381526020016143ea60339139906129af5760405162461bcd60e51b81526004016107959190613b4c565b506129b861371d565b610f1b848463ffffffff6122a716565b6129d061371d565b6129d861371d565b8351612141908463ffffffff61345b16565b6129fa828263ffffffff61238d16565b5160cd81905560408051602081019091529081527fd2805fe76d30598332a67c1061cee82e2e102b0f59f5457b1729bce028a054a090612a3990611f4d565b6107fc83611f4d565b612a4a61371d565b612a526137a3565b6000815260e054612a649060016121c1565b6020820152610ce58184612c70565b612a7b613730565b612a83610a70565b9050612a8d61371d565b60208201516040830151612aa69163ffffffff61236a16565b9050612ab061371d565b60408301516060840151612ac99163ffffffff6132b816565b9050612ad361371d565b612aec82612ae085612243565b9063ffffffff612eeb16565b9050612af661371d565b604080516020810190915260d1548152612b1790839063ffffffff61240716565b604080516020810190915260cc548152909150606490612b3690612203565b1115612b6757604080516020810190915260cc548152612b6290612b5990612215565b6108e983612215565b5160cf555b60e4805460ff60a01b19169055604080516020810190915260cf5481527f574214b195bf5273a95bb4498e35cf1fde0ce327c727a95ec2ab359f7ba4e11a90612baf90611f4d565b604051612bbc9190613b13565b60405180910390a15050505050565b6000610ce5838360126134bf565b60008184841115612bfd5760405162461bcd60e51b81526004016107959190613b4c565b505050900390565b600082612c1457506000610991565b82600019148015612c285750600160ff1b82145b15612c455760405162461bcd60e51b81526004016107959061405c565b82820282848281612c5257fe5b0514610ce55760405162461bcd60e51b81526004016107959061405c565b612c7861371d565b612c8061371d565b612c89846134de565b905082612c97579050610991565b6000612cb184612ca56125b7565b9063ffffffff6121c116565b9050612cbb61376f565b60e0866020015181548110612ccc57fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018083015482529484015260028101549183019190915260030154606082015260e0549092501480612d32575081816040015111155b15612d4257829350505050610991565b60408101516000612d5582612ca56125b7565b9050612d5f61371d565b612d6f868363ffffffff61363c16565b90505b6020890151612d9857612d8b818363ffffffff61365e16565b9650505050505050610991565b6020890151612dae90600163ffffffff6121c116565b60208a0181905260e080549091908110612dc457fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529350612e20896134de565b955084846040015111612e6457612e5d612e50612e43858863ffffffff6121c116565b889063ffffffff61363c16565b829063ffffffff61211e16565b9050612ec0565b6000612e7d8560400151856121c190919063ffffffff16565b9050612e9f612e92888363ffffffff61363c16565b839063ffffffff61211e16565b9150612eb1838263ffffffff6125bf16565b92508460400151935050612d72565b612ed0818963ffffffff61365e16565b9998505050505050505050565b6000610ce583836012613680565b612ef361371d565b612efb61371d565b825184516121419163ffffffff61369e16565b6000818303818312801590612f235750838113155b80612f385750600083128015612f3857508381135b610ce55760405162461bcd60e51b81526004016107959061426b565b60ff16600a0a90565b600054610100900460ff1680612f765750612f766124c0565b80612f84575060005460ff16155b612fa05760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015612544576000805460ff1961ff00199091166101001716600117905580156114cc576000805461ff001916905550565b600054610100900460ff1680612ff75750612ff76124c0565b80613005575060005460ff16155b6130215760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff1615801561304c576000805460ff1961ff0019909116610100171660011790555b6000613056611f49565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156114cc576000805461ff001916905550565b600081836130d95760405162461bcd60e51b81526004016107959190613b4c565b5060008385816130e557fe5b0495945050505050565b604080516020810190915260d354815261310890611f4d565b613111576127b4565b61311961371d565b61312161371d565b613129611f51565b9150915061313561371d565b604080516020808201835260d2548252825190810190925260d1548252613162919063ffffffff61216d16565b90506000613176828563ffffffff61219016565b60000b1315801561319a57506000613194828463ffffffff61219016565b60000b12155b6131b65760405162461bcd60e51b815260040161079590613bce565b836132af5760008760018111156131c957fe5b1461321757604080516020810190915260d2548152613212906131f2908763ffffffff61211e16565b604080516020810190915260d15481526108e9908963ffffffff61214a16565b61325b565b604080516020810190915260d254815261325b9061323b908763ffffffff61214a16565b604080516020810190915260d15481526108e9908963ffffffff61211e16565b9050600061326f828563ffffffff61219016565b60000b131580156132935750600061328d828463ffffffff61219016565b60000b12155b6132af5760405162461bcd60e51b815260040161079590613e88565b50505050505050565b6132c061371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906133075760405162461bcd60e51b81526004016107959190613b4c565b5061331061371d565b835185516124729163ffffffff6136ac16565b600061332d6125bb565b60e08054919250600091600019810190811061334557fe5b9060005260206000209060040201905080600301548214156133735760d154815560d25460018201556133f0565b6040805160a08101825260d15460808201908152815281516020818101845260d254825282015260e09181016133a76125b7565b8152602090810185905282546001818101855560009485529382902083515160049092020190815590820151519281019290925560408101516002830155606001516003909101555b604080516020810190915260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe905159061342b90611f4d565b604080516020810190915260d254815261344490611f4d565b61344c6125b7565b60405161080a9392919061438a565b60008161347a5760405162461bcd60e51b8152600401610795906142f1565b8160001914801561348e5750600160ff1b83145b156134ab5760405162461bcd60e51b815260040161079590613ebf565b60008284816134b657fe5b05949350505050565b6000610f1b836114b06134d185612f54565b879063ffffffff6125e416565b6134e661371d565b6134ee61376f565b60e08360200151815481106134ff57fe5b600091825260208083206040805160a0810182526004909402909101805460808501908152845281518084018352600182015481529284019290925260028201549083015260030154606082015291508351600181111561355c57fe5b141561358057602081015181516135789163ffffffff61216d16565b915050610bed565b60018351600181111561358f57fe5b1415613624576135a6836040015160200151611f4d565b6135b25761357861234f565b600083604001516040015160018111156135c857fe5b14156135eb57604083015180516020918201518351928401516135789390610db2565b6001836040015160400151600181111561360157fe5b14156136245760408301518051602091820151835192840151613578939061189e565b60405162461bcd60e51b815260040161079590613c15565b61364461371d565b61364c61371d565b8351612141908463ffffffff6125e416565b61366661371d565b61366e61371d565b8351612141908463ffffffff61255816565b6000610f1b61368e83612f54565b6114b0868663ffffffff6125e416565b6000610ce5838360126136f2565b60008282018183128015906136c15750838112155b806136d657506000831280156136d657508381125b610ce55760405162461bcd60e51b815260040161079590613d76565b6000610f1b8361371161370485612f54565b879063ffffffff612c0516565b9063ffffffff61345b16565b6040518060200160405280600081525090565b604051806080016040528061374361371d565b815260200161375061371d565b815260200161375d61371d565b815260200161376a61371d565b905290565b604051806080016040528061378261371d565b815260200161378f61371d565b815260200160008152602001600081525090565b604080516060810190915280600081526020016000815260200161376a604080516060810190915280600081526020016137db61371d565b8152602001600061376a565b80356002811061099157600080fd5b600060208284031215613807578081fd5b50919050565b60006020828403121561381e578081fd5b61382860206143a0565b9135825250919050565b600060208284031215613843578081fd5b8135610ce5816143c7565b60006020828403121561385f578081fd5b81358015158114610ce5578182fd5b600080600060608486031215613882578182fd5b833561388d816143dc565b925061389c85602086016137f6565b91506138ab85604086016137f6565b90509250925092565b600080600080608085870312156138c9578081fd5b6138d386866137e7565b93506138e286602087016137f6565b92506138f186604087016137f6565b915060608501358015158114613905578182fd5b939692955090935050565b60008060408385031215613922578182fd5b823561392d816143dc565b915061393c846020850161380d565b90509250929050565b6000806000806080858703121561395a578384fd5b61396486866137e7565b9350613973866020870161380d565b9250613982866040870161380d565b9150613991866060870161380d565b905092959194509250565b6000602082840312156139ad578081fd5b610ce583836137f6565b6000602082840312156139c8578081fd5b610ce5838361380d565b600080604083850312156139e4578182fd5b61392d848461380d565b60008060008385036060811215613a03578384fd5b6020811215613a10578384fd5b50613a1b60206143a0565b843581529250613a2e856020860161380d565b91506138ab856040860161380d565b600060208284031215613a4e578081fd5b5035919050565b600060208284031215613a66578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215613a8c578788fd5b8a35995060208b0135985060408b0135975060608b0135965060808b0135613ab3816143c7565b955060a08b0135945060c08b0135613aca816143c7565b8094505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6060810160028510613b2a57fe5b938152602081019290925260409091015290565b918252602082015260400190565b6000602080835283518082850152825b81811015613b7857858101830151858201604001528201613b5c565b81811115613b895783604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274062617365206173736574206166746572206973203605c1b604082015260600190565b60208082526027908201527f707269636520697320616c7265616479206f76657220666c756374756174696f6040820152661b881b1a5b5a5d60ca1b606082015260800190565b6020808252601490820152733737ba1039bab83837b93a32b21037b83a34b7b760611b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526019908201527f63616e206e6f742073657420696e74657276616c20746f203000000000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420636f756e7465725061727479000000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b604082015260600190565b6020808252600f908201526e0d2dcc6dee4e4cac6e840d2dcc8caf608b1b604082015260600190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601590820152740756e6465726c79696e67207072696365206973203605c1b604082015260600190565b6020808252601f908201527f7072696365206973206f76657220666c756374756174696f6e206c696d697400604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252600e908201526d185b5b481dd85cc818db1bdcd95960921b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f6e6f74206f776e6572206e6f7220676c6f62616c53687574646f776e00000000604082015260600190565b6020808252601c908201527f4c657373207468616e206d696e696d616c206261736520746f6b656e00000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b60208082526019908201527f696e76616c696420507269636546656564206164647265737300000000000000604082015260600190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252601c908201527f4d6f7265207468616e206d6178696d616c206261736520746f6b656e00000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b602080825260169082015275071756f746520617373657420616674657220697320360541b604082015260600190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60208082526018908201527f736574746c652066756e64696e6720746f6f206561726c790000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b9051815260200190565b9151825251602082015260400190565b93518452915160208401526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156143bf57600080fd5b604052919050565b6001600160a01b03811681146114cc57600080fd5b600281106114cc57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220db9264b9763cb5cbb7131cb81a76f756718f19ff36a18ef3bd229eaabab3f22064736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c55760003560e01c80636fa42ede116101ff578063bc5920ba1161011a578063e4bc2eb9116100ad578063f1b5df861161007c578063f1b5df8614610714578063fc0e74d114610727578063fcfff16f1461072f578063fdf262b714610737576103c5565b8063e4bc2eb9146106f4578063e805d6fc146106fc578063ec2c0e6314610704578063ed83d79c1461070c576103c5565b8063da0c5927116100e9578063da0c5927146106be578063dc76fabc146106d1578063e0037a6c146106d9578063e1f1027f146106e1576103c5565b8063bc5920ba14610693578063c2de442f1461069b578063c9566fcc146106a3578063d71ec2ad146106ab576103c5565b80637ec3246d116101925780639e010362116101615780639e010362146106525780639ece77c81461065a578063a8f8be4e1461066d578063b2ed32c714610680576103c5565b80637ec3246d1461061c5780638da5cb5b1461062f5780638f40d932146106375780639bf5d1d41461063f576103c5565b8063724e78da116101ce578063724e78da146105e6578063741bef1a146105f957806374d7c62b1461060157806375df638914610609576103c5565b80636fa42ede146105b05780636fdca5e0146105c35780636febdd50146105d6578063715018a6146105de576103c5565b806341d3c84c116102ef57806358a4c3dc116102825780636226795511610251578063622679551461057a57806362e7a1761461058d5780636baccaba146105a05780636c8381f8146105a8576103c5565b806358a4c3dc1461054157806359bf5d39146105495780635f1ba1fd1461055f578063620be06714610567576103c5565b80634cb876f2116102be5780634cb876f21461050b57806350799c8114610513578063524f15a1146105265780635254541014610539576103c5565b806341d3c84c146104e057806342b3198b146104e8578063468f02d2146104f05780634894d183146104f8576103c5565b80631b584d6c1161036757806329f9b17b1161033657806329f9b17b146104b55780632d666e38146104bd5780632f848859146104c557806340d71cd9146104cd576103c5565b80631b584d6c146104625780631d3acb441461047757806321e009851461047f578063237f17ee146104a2576103c5565b80630dd68c70116103a35780630dd68c7014610405578063113773941461041a578063130234cf1461042f57806313af40351461044f576103c5565b80630244accf146103ca57806305172a25146103e85780630d451c8f146103fd575b600080fd5b6103d261073f565b6040516103df9190613af4565b60405180910390f35b6103f061074e565b6040516103df9190613b13565b6103f061075a565b6104186104133660046139d2565b610760565b005b610422610816565b6040516103df9190614355565b61044261043d366004613910565b610832565b6040516103df9190613b08565b61041861045d366004613832565b610997565b61046a610a70565b6040516103df9190614326565b6103f0610afe565b61049261048d366004613a3d565b610b04565b6040516103df949392919061436f565b61046a6104b0366004613a3d565b610b52565b610422610bf2565b6103f0610c0e565b610422610c14565b6104226104db3660046139ee565b610c30565b6103f0610cec565b6103f0610cf2565b610422610cf8565b610422610506366004613910565b610d95565b6103f0610dac565b610422610521366004613945565b610db2565b6104186105343660046139b7565b610f23565b610422610f5e565b6103f0610f7a565b610551610f80565b6040516103df92919061435f565b6103f0610fb2565b610418610575366004613a6d565b610fb8565b61055161058836600461399c565b6112f7565b61041861059b366004613a3d565b611392565b6103f06113e9565b6103d26113ef565b6104226105be366004613910565b6113fe565b6104186105d136600461384e565b611415565b6103f06114cf565b6104186114d5565b6104186105f4366004613832565b611554565b6103d261160b565b6103f061161a565b6104226106173660046138b4565b611620565b61041861062a3660046139b7565b61184e565b6103d2611889565b6103f0611898565b61042261064d366004613945565b61189e565b61044261197c565b610418610668366004613832565b611a2a565b61041861067b3660046139b7565b611a81565b61041861068e366004613832565b611abc565b610418611b13565b6103f0611bd6565b6103f0611bdc565b6104226106b936600461386e565b611be2565b6104226106cc366004613910565b611c6f565b610422611ca1565b6103f0611cdb565b6104226106ef366004613910565b611ce1565b6103f0611d13565b610422611d19565b610422611d35565b610422611d51565b610422610722366004613a3d565b611eab565b610418611ebc565b610442611f2a565b6103d2611f3a565b60e2546001600160a01b031681565b67016345785d8a000081565b60e05490565b610768611f49565b6065546001600160a01b0390811691161461079e5760405162461bcd60e51b815260040161079590613e0c565b60405180910390fd5b815160d7819055815160d85560408051602081019091529081527f7338f3784ceb8f9456bac0c4a69f1c6354dc325fa6455e3e3f6a8a9bf9249a7c906107e390611f4d565b604080516020810190915260d85481526107fc90611f4d565b60405161080a929190613b3e565b60405180910390a15050565b61081e61371d565b50604080516020810190915260d754815290565b604080516020810190915260d354815260009061084e90611f4d565b61085a57506000610991565b61086261371d565b61086a61371d565b610872611f51565b9150915061087e61371d565b6108888686611c6f565b905061089261371d565b60018760018111156108a057fe5b146108fa57604080516020810190915260d25481526108f5906108c9908863ffffffff61211e16565b604080516020810190915260d15481526108e9908563ffffffff61214a16565b9063ffffffff61216d16565b61093e565b604080516020810190915260d254815261093e9061091e908863ffffffff61214a16565b604080516020810190915260d15481526108e9908563ffffffff61211e16565b90506000610952828663ffffffff61219016565b60000b1315801561097657506000610970828563ffffffff61219016565b60000b12155b15610988576000945050505050610991565b60019450505050505b92915050565b61099f611f49565b6065546001600160a01b039081169116146109cc5760405162461bcd60e51b815260040161079590613e0c565b6001600160a01b0381166109f25760405162461bcd60e51b8152600401610795906142af565b6065546001600160a01b0382811691161415610a205760405162461bcd60e51b8152600401610795906141c7565b6066546001600160a01b0382811691161415610a4e5760405162461bcd60e51b815260040161079590613cf8565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b610a78613730565b60da8054610a8d90600163ffffffff6121c116565b81548110610a9757fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481528385015281518085018352600282015481528383015281519384019091526003015482526060810191909152905090565b60d35481565b60e08181548110610b1157fe5b600091825260209182902060408051808501825260049093029091018054835281519384019091526001810154835260028101546003909101549193509084565b610b5a613730565b60da548210610b7b5760405162461bcd60e51b815260040161079590613de3565b60da8281548110610b8857fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018201548152838501528151808501835260028201548152838301528151938401909152600301548252606081019190915290505b919050565b610bfa61371d565b50604080516020810190915260ce54815290565b60d65481565b610c1c61371d565b50604080516020810190915260cc54815290565b610c3861371d565b610c4184612203565b610c4c575082610ce5565b600080610c5886611f4d565b13610c64576000610c67565b60015b9050610c7161371d565b610c9382610c80576001610c83565b60005b610c8c88612215565b878761189e565b9050610c9d61371d565b610cbd610cb884610caf576000610cb2565b60015b84611ce1565b612243565b9050610cdf83610ccf57600019610cd2565b60015b829063ffffffff6122a716565b93505050505b9392505050565b60cd5481565b60da5490565b610d0061371d565b60408051602081019182905260e45460df546331d98b3f60e01b909352909182916001600160a01b0316906331d98b3f90610d3e9060248501613b13565b60206040518083038186803b158015610d5657600080fd5b505afa158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190613a55565b9052905090565b610d9d61371d565b610ce5838360006103846122c9565b60cc5481565b610dba61371d565b610dc384611f4d565b610dd657610dcf61234f565b9050610f1b565b600080866001811115610de557fe5b149050610df061371d565b610e03610cb8868663ffffffff61236a16565b9050610e0d61371d565b610e1561371d565b610e1d61371d565b8415610e3a57610e33888a63ffffffff61211e16565b9150610e4d565b610e4a888a63ffffffff61214a16565b91505b610e5682611f4d565b610e725760405162461bcd60e51b815260040161079590614197565b610e82848363ffffffff61238d16565b9250610e9c610e97848963ffffffff61240716565b612215565b9050610ebf610eba83610eae87612215565b9063ffffffff61247c16565b611f4d565b15610f14578415610ef157604080516020810190915260018152610eea90829063ffffffff61214a16565b9050610f14565b604080516020810190915260018152610f1190829063ffffffff61211e16565b90505b9450505050505b949350505050565b610f2b611f49565b6065546001600160a01b03908116911614610f585760405162461bcd60e51b815260040161079590613e0c565b5160d555565b610f6661371d565b50604080516020810190915260d854815290565b60df5481565b610f8861371d565b610f9061371d565b5050604080516020808201835260d1548252825190810190925260d254825291565b60db5481565b600054610100900460ff1680610fd15750610fd16124c0565b80610fdf575060005460ff16155b610ffb5760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015611026576000805460ff1961ff0019909116610100171660011790555b8a1580159061103457508815155b801561103f57508915155b801561104a57508715155b801561105e57506001600160a01b03871615155b801561107257506001600160a01b03851615155b61108e5760405162461bcd60e51b815260040161079590614244565b6110966124c6565b6040805160208082018352908d905260d18d9055815180820183528c905260d28c9055815180820183528b905260d08b90558151808201835285905260d48590558151808201835284905260d5849055815190810190915284905260d384905560dc88905561110c88600263ffffffff61255816565b60dd55610e1060db5560df86905560e380546001600160a01b038088166001600160a01b03199283161790925560e48054928a169290911691909117905561115261259a565b5160d955604080516080810190915260da908061116d61234f565b8152604080516020818101835260d1548252808401919091528151908101825260d2548152908201526060016111a161234f565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015151600283015560609092015151600390910155805160a08101825260d1546080820190815281528151808401835260d25481529281019290925260e09190810161121a6125b7565b81526020016112276125bb565b9052815460018181018455600093845260209384902083515160049093020191825583830151519082015560408083015160028301556060909201516003909101558051918201905260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe90515906112a090611f4d565b604080516020810190915260d25481526112b990611f4d565b6112c16125b7565b6040516112d09392919061438a565b60405180910390a180156112ea576000805461ff00191690555b5050505050505050505050565b6112ff61371d565b61130761371d565b611319610eba368590038501856139b7565b6113365761132561234f565b61132d61234f565b9150915061138d565b604080516020810190915260d454815261136590611359368690038601866139b7565b9063ffffffff61236a16565b604080516020810190915260d554815261138890611359368790038701876139b7565b915091505b915091565b61139a611f49565b6065546001600160a01b039081169116146113c75760405162461bcd60e51b815260040161079590613e0c565b806113e45760405162461bcd60e51b815260040161079590613cc1565b60db55565b60d45481565b6066546001600160a01b031690565b61140661371d565b610ce5838360016103846122c9565b61141d611f49565b6065546001600160a01b0390811691161461144a5760405162461bcd60e51b815260040161079590613e0c565b60e45460ff600160a01b9091041615158115151415611468576114cc565b60e4805482158015600160a01b0260ff60a01b19909216919091179091556114cc576114c8610e106114bc610e106114b060dc546114a46125b7565b9063ffffffff6125bf16565b9063ffffffff61255816565b9063ffffffff6125e416565b60de555b50565b60d55481565b6114dd611f49565b6065546001600160a01b0390811691161461150a5760405162461bcd60e51b815260040161079590613e0c565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b61155c611f49565b6065546001600160a01b039081169116146115895760405162461bcd60e51b815260040161079590613e0c565b6001600160a01b0381166115af5760405162461bcd60e51b8152600401610795906140a3565b60e480546001600160a01b0319166001600160a01b0383811691909117918290556040517fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e692611600921690613af4565b60405180910390a150565b60e4546001600160a01b031681565b60dc5481565b61162861371d565b60e454600160a01b900460ff166116515760405162461bcd60e51b815260040161079590613f37565b611659611f49565b60e1546001600160a01b039081169116146116865760405162461bcd60e51b815260040161079590613d3f565b611698610eba368690038601866139b7565b6116a457610dcf61234f565b60018560018111156116b257fe5b1415611718576116ca610eba368690038601866139b7565b604080516020808201835260d0548252825190810190925260d15482526116fa91610eba9163ffffffff61236a16565b10156117185760405162461bcd60e51b815260040161079590613db7565b61172061371d565b611733866106ef368890038801886139b7565b9050611747610eba368690038601866139b7565b156117d757600086600181111561175a57fe5b141561179e57611772610eba368690038601866139b7565b61177b82611f4d565b10156117995760405162461bcd60e51b815260040161079590613fd7565b6117d7565b6117b0610eba368690038601866139b7565b6117b982611f4d565b11156117d75760405162461bcd60e51b815260040161079590614111565b6117f1866117ea368890038801886139b7565b838661261e565b7fae6a2b946841d9afc0e1e19a94ae4af26f01125b87b5095bbfb177a9741a2ede86611825610eba368990038901896139b7565b61182e84611f4d565b60405161183d93929190613b1c565b60405180910390a195945050505050565b611856611f49565b6065546001600160a01b039081169116146118835760405162461bcd60e51b815260040161079590613e0c565b5160d455565b6065546001600160a01b031690565b60d05481565b6118a661371d565b6118af84611f4d565b6118bb57610dcf61234f565b6000808660018111156118ca57fe5b1490506118d561371d565b6118e8610cb8868663ffffffff61236a16565b90506118f261371d565b6118fa61371d565b61190261371d565b841561191f57611918878a63ffffffff61211e16565b9150611932565b61192f878a63ffffffff61214a16565b91505b61193b82611f4d565b6119575760405162461bcd60e51b815260040161079590613b9f565b611967848363ffffffff61238d16565b9250610e9c610e97848a63ffffffff61240716565b600061198661371d565b61198e610cf8565b9050600061199b82611f4d565b116119b85760405162461bcd60e51b815260040161079590613e59565b6119c061371d565b6119c8611ca1565b90506119d261371d565b6119fe610e97846119f2866119e687612243565b9063ffffffff61240716565b9063ffffffff61238d16565b905067016345785d8a0000611a1282611f4d565b1015611a1f576000611a22565b60015b935050505090565b611a32611f49565b6065546001600160a01b03908116911614611a5f5760405162461bcd60e51b815260040161079590613e0c565b60e180546001600160a01b0319166001600160a01b0392909216919091179055565b611a89611f49565b6065546001600160a01b03908116911614611ab65760405162461bcd60e51b815260040161079590613e0c565b5160d355565b611ac4611f49565b6065546001600160a01b03908116911614611af15760405162461bcd60e51b815260040161079590613e0c565b60e280546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b0316611b3b5760405162461bcd60e51b815260040161079590614148565b611b43611f49565b6066546001600160a01b03908116911614611b705760405162461bcd60e51b815260040161079590613c7a565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b60dd5481565b60d25481565b611bea61371d565b60e454600160a01b900460ff16611c135760405162461bcd60e51b815260040161079590613f37565b611c1b611f49565b60e1546001600160a01b03908116911614611c485760405162461bcd60e51b815260040161079590613d3f565b610f1b84611c5b368690038601866139b7565b611c6a368690038601866139b7565b6127ba565b611c7761371d565b604080516020808201835260d1548252825190810190925260d2548252610ce5918591859161189e565b611ca961371d565b604080516020808201835260d2548252825190810190925260d1548252611cd6919063ffffffff61216d16565b905090565b60de5481565b611ce961371d565b604080516020808201835260d1548252825190810190925260d2548252610ce59185918591610db2565b60d15481565b611d2161371d565b50604080516020810190915260cb54815290565b611d3d61371d565b50604080516020810190915260cf54815290565b611d5961371d565b60e454600160a01b900460ff16611d825760405162461bcd60e51b815260040161079590613f37565b611d8a611f49565b60e1546001600160a01b03908116911614611db75760405162461bcd60e51b815260040161079590613d3f565b60de54611dc26125b7565b1015611de05760405162461bcd60e51b81526004016107959061420d565b611de861371d565b611df0610cf8565b9050611dfa61371d565b611e0c826119e6610cb860db54611eab565b9050611e1661371d565b611e3e62015180611e3260dc548561296590919063ffffffff16565b9063ffffffff6129c816565b9050611e4a81846129ea565b6000611e5a60dd546114a46125b7565b90506000611e81610e106114bc610e106114b060dc5460de546125bf90919063ffffffff16565b9050818111611e905781611e92565b805b60de55611e9d61234f565b5160cb555090935050505090565b611eb361371d565b61099182612a42565b611ec4611889565b6001600160a01b0316611ed5611f49565b6001600160a01b03161480611f04575060e2546001600160a01b0316611ef9611f49565b6001600160a01b0316145b611f205760405162461bcd60e51b815260040161079590613fa0565b611f28612a73565b565b60e454600160a01b900460ff1681565b60e3546001600160a01b031681565b3390565b5190565b611f5961371d565b611f6161371d565b60e054611f6c61376f565b60e0611f7f83600163ffffffff6121c116565b81548110611f8957fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529050611fe46125bb565b8160600151148015611ff65750600182115b1561206c5760e061200e83600263ffffffff6121c116565b8154811061201857fe5b60009182526020918290206040805160a08101825260049093029091018054608084019081528352815180850183526001820154815293830193909352600283015490820152600390910154606082015290505b61207461371d565b6020820151825161208a9163ffffffff61216d16565b905061209461371d565b604080516020810190915260d35481526120cd906120c0906120b461259a565b9063ffffffff61211e16565b839063ffffffff61236a16565b90506120d761371d565b604080516020810190915260d354815261211090612103906120f761259a565b9063ffffffff61214a16565b849063ffffffff61236a16565b919650909450505050509091565b61212661371d565b61212e61371d565b825184516121419163ffffffff6125bf16565b81529392505050565b61215261371d565b61215a61371d565b825184516121419163ffffffff6121c116565b61217561371d565b61217d61371d565b825184516121419163ffffffff612bcb16565b8051825160009110156121a557506001610991565b8151835110156121b85750600019610991565b50600092915050565b6000610ce583836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612bd9565b600061220e82612215565b5192915050565b61221d61371d565b61222561371d565b82516000131561223b5782516000038152610991565b915182525090565b61224b61371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906122925760405162461bcd60e51b81526004016107959190613b4c565b50506040805160208101909152915182525090565b6122af61371d565b6122b761371d565b8351612141908463ffffffff612c0516565b6122d161371d565b6122d96137a3565b600180825260e0546122ea916121c1565b6020820152604081015186600181111561230057fe5b9081600181111561230d57fe5b90525060408082018051602001879052510184600181111561232b57fe5b9081600181111561233857fe5b9052506123458184612c70565b9695505050505050565b61235761371d565b5060408051602081019091526000815290565b61237261371d565b61237a61371d565b825184516121419163ffffffff612edd16565b61239561371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906123dc5760405162461bcd60e51b81526004016107959190613b4c565b506123e561371d565b6123fe6123f185612243565b869063ffffffff612eeb16565b95945050505050565b61240f61371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906124565760405162461bcd60e51b81526004016107959190613b4c565b5061245f61371d565b835185516124729163ffffffff612f0e16565b8152949350505050565b61248461371d565b604051806020016040528083600001516124af6124a16012612f54565b87519063ffffffff6125e416565b816124b657fe5b0690529392505050565b303b1590565b600054610100900460ff16806124df57506124df6124c0565b806124ed575060005460ff16155b6125095760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015612534576000805460ff1961ff0019909116610100171660011790555b61253c612f5d565b612544612fde565b80156114cc576000805461ff001916905550565b6000610ce583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506130b8565b6125a261371d565b6040518060200160405280610d8e6012612f54565b4290565b4390565b600082820183811015610ce55760405162461bcd60e51b815260040161079590613c43565b6000826125f357506000610991565b8282028284828161260057fe5b0414610ce55760405162461bcd60e51b815260040161079590613f5f565b61262a848484846130ef565b600084600181111561263857fe5b14156126f757604080516020810190915260d154815261265e908463ffffffff61211e16565b5160d155604080516020810190915260d2548152612682908363ffffffff61214a16565b5160d255604080516020810190915260cb5481526126a6908363ffffffff61240716565b5160cb55604080516020810190915260cc5481526126ca908363ffffffff6132b816565b5160cc55604080516020810190915260ce5481526126ee908463ffffffff6132b816565b5160ce556127ac565b604080516020810190915260d1548152612717908463ffffffff61214a16565b5160d155604080516020810190915260d254815261273b908363ffffffff61211e16565b5160d255604080516020810190915260cb54815261275f908363ffffffff6132b816565b5160cb55604080516020810190915260cc548152612783908363ffffffff61240716565b5160cc55604080516020810190915260ce5481526127a7908463ffffffff61240716565b5160ce555b6127b4613323565b50505050565b6127c261371d565b6127cb83611f4d565b6127de576127d761234f565b9050610ce5565b60018460018111156127ec57fe5b1415612849576127fb83611f4d565b604080516020808201835260d0548252825190810190925260d254825261282b91610eba9163ffffffff61236a16565b10156128495760405162461bcd60e51b815260040161079590613db7565b61285161371d565b61285b8585611c6f565b905060008086600181111561286c57fe5b1461287857600061287b565b60015b905061288684611f4d565b1561290457600181600181111561289957fe5b14156128d4576128a884611f4d565b6128b183611f4d565b10156128cf5760405162461bcd60e51b815260040161079590613f00565b612904565b6128dd84611f4d565b6128e683611f4d565b11156129045760405162461bcd60e51b8152600401610795906140da565b612911818387600161261e565b7f0dd4066b1a6ce97fb670c3e4201e908c644193f38cbdaffd0229d7e26da3e5338661293c84611f4d565b61294588611f4d565b60405161295493929190613b1c565b60405180910390a150949350505050565b61296d61371d565b816001600160ff1b0310156040518060600160405280603381526020016143ea60339139906129af5760405162461bcd60e51b81526004016107959190613b4c565b506129b861371d565b610f1b848463ffffffff6122a716565b6129d061371d565b6129d861371d565b8351612141908463ffffffff61345b16565b6129fa828263ffffffff61238d16565b5160cd81905560408051602081019091529081527fd2805fe76d30598332a67c1061cee82e2e102b0f59f5457b1729bce028a054a090612a3990611f4d565b6107fc83611f4d565b612a4a61371d565b612a526137a3565b6000815260e054612a649060016121c1565b6020820152610ce58184612c70565b612a7b613730565b612a83610a70565b9050612a8d61371d565b60208201516040830151612aa69163ffffffff61236a16565b9050612ab061371d565b60408301516060840151612ac99163ffffffff6132b816565b9050612ad361371d565b612aec82612ae085612243565b9063ffffffff612eeb16565b9050612af661371d565b604080516020810190915260d1548152612b1790839063ffffffff61240716565b604080516020810190915260cc548152909150606490612b3690612203565b1115612b6757604080516020810190915260cc548152612b6290612b5990612215565b6108e983612215565b5160cf555b60e4805460ff60a01b19169055604080516020810190915260cf5481527f574214b195bf5273a95bb4498e35cf1fde0ce327c727a95ec2ab359f7ba4e11a90612baf90611f4d565b604051612bbc9190613b13565b60405180910390a15050505050565b6000610ce5838360126134bf565b60008184841115612bfd5760405162461bcd60e51b81526004016107959190613b4c565b505050900390565b600082612c1457506000610991565b82600019148015612c285750600160ff1b82145b15612c455760405162461bcd60e51b81526004016107959061405c565b82820282848281612c5257fe5b0514610ce55760405162461bcd60e51b81526004016107959061405c565b612c7861371d565b612c8061371d565b612c89846134de565b905082612c97579050610991565b6000612cb184612ca56125b7565b9063ffffffff6121c116565b9050612cbb61376f565b60e0866020015181548110612ccc57fe5b60009182526020918290206040805160a081018252600490930290910180546080840190815283528151808501835260018083015482529484015260028101549183019190915260030154606082015260e0549092501480612d32575081816040015111155b15612d4257829350505050610991565b60408101516000612d5582612ca56125b7565b9050612d5f61371d565b612d6f868363ffffffff61363c16565b90505b6020890151612d9857612d8b818363ffffffff61365e16565b9650505050505050610991565b6020890151612dae90600163ffffffff6121c116565b60208a0181905260e080549091908110612dc457fe5b60009182526020918290206040805160a0810182526004909302909101805460808401908152835281518085018352600182015481529383019390935260028301549082015260039091015460608201529350612e20896134de565b955084846040015111612e6457612e5d612e50612e43858863ffffffff6121c116565b889063ffffffff61363c16565b829063ffffffff61211e16565b9050612ec0565b6000612e7d8560400151856121c190919063ffffffff16565b9050612e9f612e92888363ffffffff61363c16565b839063ffffffff61211e16565b9150612eb1838263ffffffff6125bf16565b92508460400151935050612d72565b612ed0818963ffffffff61365e16565b9998505050505050505050565b6000610ce583836012613680565b612ef361371d565b612efb61371d565b825184516121419163ffffffff61369e16565b6000818303818312801590612f235750838113155b80612f385750600083128015612f3857508381135b610ce55760405162461bcd60e51b81526004016107959061426b565b60ff16600a0a90565b600054610100900460ff1680612f765750612f766124c0565b80612f84575060005460ff16155b612fa05760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff16158015612544576000805460ff1961ff00199091166101001716600117905580156114cc576000805461ff001916905550565b600054610100900460ff1680612ff75750612ff76124c0565b80613005575060005460ff16155b6130215760405162461bcd60e51b81526004016107959061400e565b600054610100900460ff1615801561304c576000805460ff1961ff0019909116610100171660011790555b6000613056611f49565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156114cc576000805461ff001916905550565b600081836130d95760405162461bcd60e51b81526004016107959190613b4c565b5060008385816130e557fe5b0495945050505050565b604080516020810190915260d354815261310890611f4d565b613111576127b4565b61311961371d565b61312161371d565b613129611f51565b9150915061313561371d565b604080516020808201835260d2548252825190810190925260d1548252613162919063ffffffff61216d16565b90506000613176828563ffffffff61219016565b60000b1315801561319a57506000613194828463ffffffff61219016565b60000b12155b6131b65760405162461bcd60e51b815260040161079590613bce565b836132af5760008760018111156131c957fe5b1461321757604080516020810190915260d2548152613212906131f2908763ffffffff61211e16565b604080516020810190915260d15481526108e9908963ffffffff61214a16565b61325b565b604080516020810190915260d254815261325b9061323b908763ffffffff61214a16565b604080516020810190915260d15481526108e9908963ffffffff61211e16565b9050600061326f828563ffffffff61219016565b60000b131580156132935750600061328d828463ffffffff61219016565b60000b12155b6132af5760405162461bcd60e51b815260040161079590613e88565b50505050505050565b6132c061371d565b8180600001516001600160ff1b0310156040518060600160405280603381526020016143ea60339139906133075760405162461bcd60e51b81526004016107959190613b4c565b5061331061371d565b835185516124729163ffffffff6136ac16565b600061332d6125bb565b60e08054919250600091600019810190811061334557fe5b9060005260206000209060040201905080600301548214156133735760d154815560d25460018201556133f0565b6040805160a08101825260d15460808201908152815281516020818101845260d254825282015260e09181016133a76125b7565b8152602090810185905282546001818101855560009485529382902083515160049092020190815590820151519281019290925560408101516002830155606001516003909101555b604080516020810190915260d15481527f3a3348362552c3897fd1f06a3233519ebd8bd76ad6e99a418a9741155fe905159061342b90611f4d565b604080516020810190915260d254815261344490611f4d565b61344c6125b7565b60405161080a9392919061438a565b60008161347a5760405162461bcd60e51b8152600401610795906142f1565b8160001914801561348e5750600160ff1b83145b156134ab5760405162461bcd60e51b815260040161079590613ebf565b60008284816134b657fe5b05949350505050565b6000610f1b836114b06134d185612f54565b879063ffffffff6125e416565b6134e661371d565b6134ee61376f565b60e08360200151815481106134ff57fe5b600091825260208083206040805160a0810182526004909402909101805460808501908152845281518084018352600182015481529284019290925260028201549083015260030154606082015291508351600181111561355c57fe5b141561358057602081015181516135789163ffffffff61216d16565b915050610bed565b60018351600181111561358f57fe5b1415613624576135a6836040015160200151611f4d565b6135b25761357861234f565b600083604001516040015160018111156135c857fe5b14156135eb57604083015180516020918201518351928401516135789390610db2565b6001836040015160400151600181111561360157fe5b14156136245760408301518051602091820151835192840151613578939061189e565b60405162461bcd60e51b815260040161079590613c15565b61364461371d565b61364c61371d565b8351612141908463ffffffff6125e416565b61366661371d565b61366e61371d565b8351612141908463ffffffff61255816565b6000610f1b61368e83612f54565b6114b0868663ffffffff6125e416565b6000610ce5838360126136f2565b60008282018183128015906136c15750838112155b806136d657506000831280156136d657508381125b610ce55760405162461bcd60e51b815260040161079590613d76565b6000610f1b8361371161370485612f54565b879063ffffffff612c0516565b9063ffffffff61345b16565b6040518060200160405280600081525090565b604051806080016040528061374361371d565b815260200161375061371d565b815260200161375d61371d565b815260200161376a61371d565b905290565b604051806080016040528061378261371d565b815260200161378f61371d565b815260200160008152602001600081525090565b604080516060810190915280600081526020016000815260200161376a604080516060810190915280600081526020016137db61371d565b8152602001600061376a565b80356002811061099157600080fd5b600060208284031215613807578081fd5b50919050565b60006020828403121561381e578081fd5b61382860206143a0565b9135825250919050565b600060208284031215613843578081fd5b8135610ce5816143c7565b60006020828403121561385f578081fd5b81358015158114610ce5578182fd5b600080600060608486031215613882578182fd5b833561388d816143dc565b925061389c85602086016137f6565b91506138ab85604086016137f6565b90509250925092565b600080600080608085870312156138c9578081fd5b6138d386866137e7565b93506138e286602087016137f6565b92506138f186604087016137f6565b915060608501358015158114613905578182fd5b939692955090935050565b60008060408385031215613922578182fd5b823561392d816143dc565b915061393c846020850161380d565b90509250929050565b6000806000806080858703121561395a578384fd5b61396486866137e7565b9350613973866020870161380d565b9250613982866040870161380d565b9150613991866060870161380d565b905092959194509250565b6000602082840312156139ad578081fd5b610ce583836137f6565b6000602082840312156139c8578081fd5b610ce5838361380d565b600080604083850312156139e4578182fd5b61392d848461380d565b60008060008385036060811215613a03578384fd5b6020811215613a10578384fd5b50613a1b60206143a0565b843581529250613a2e856020860161380d565b91506138ab856040860161380d565b600060208284031215613a4e578081fd5b5035919050565b600060208284031215613a66578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215613a8c578788fd5b8a35995060208b0135985060408b0135975060608b0135965060808b0135613ab3816143c7565b955060a08b0135945060c08b0135613aca816143c7565b8094505060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b6060810160028510613b2a57fe5b938152602081019290925260409091015290565b918252602082015260400190565b6000602080835283518082850152825b81811015613b7857858101830151858201604001528201613b5c565b81811115613b895783604083870101525b50601f01601f1916929092016040019392505050565b602080825260159082015274062617365206173736574206166746572206973203605c1b604082015260600190565b60208082526027908201527f707269636520697320616c7265616479206f76657220666c756374756174696f6040820152661b881b1a5b5a5d60ca1b606082015260800190565b6020808252601490820152733737ba1039bab83837b93a32b21037b83a34b7b760611b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526019908201527f63616e206e6f742073657420696e74657276616c20746f203000000000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b6020808252601a908201527f63616c6c6572206973206e6f7420636f756e7465725061727479000000000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152711bdd995c881d1c98591a5b99c81b1a5b5a5d60721b604082015260600190565b6020808252600f908201526e0d2dcc6dee4e4cac6e840d2dcc8caf608b1b604082015260600190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601590820152740756e6465726c79696e67207072696365206973203605c1b604082015260600190565b6020808252601f908201527f7072696365206973206f76657220666c756374756174696f6e206c696d697400604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252600e908201526d185b5b481dd85cc818db1bdcd95960921b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601c908201527f6e6f74206f776e6572206e6f7220676c6f62616c53687574646f776e00000000604082015260600190565b6020808252601c908201527f4c657373207468616e206d696e696d616c206261736520746f6b656e00000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b60208082526019908201527f696e76616c696420507269636546656564206164647265737300000000000000604082015260600190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252601c908201527f4d6f7265207468616e206d6178696d616c206261736520746f6b656e00000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b602080825260169082015275071756f746520617373657420616674657220697320360541b604082015260600190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60208082526018908201527f736574746c652066756e64696e6720746f6f206561726c790000000000000000604082015260600190565b6020808252600d908201526c1a5b9d985b1a59081a5b9c1d5d609a1b604082015260600190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b9051815260200190565b9151825251602082015260400190565b93518452915160208401526040830152606082015260800190565b9283526020830191909152604082015260600190565b60405181810167ffffffffffffffff811182821017156143bf57600080fd5b604052919050565b6001600160a01b03811681146114cc57600080fd5b600281106114cc57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220db9264b9763cb5cbb7131cb81a76f756718f19ff36a18ef3bd229eaabab3f22064736f6c63430006090033",
  "devdoc": {
    "methods": {
      "calcFee((uint256))": {
        "params": {
          "_quoteAssetAmount": "quoteAssetAmount"
        },
        "returns": {
          "_0": "total tx fee"
        }
      },
      "getInputPrice(uint8,(uint256))": {
        "params": {
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short.",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "getInputTwap(uint8,(uint256))": {
        "params": {
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short.",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "getOutputPrice(uint8,(uint256))": {
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInput`."
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "getOutputTwap(uint8,(uint256))": {
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from `getInputTwap`."
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "getReserve()": {
        "returns": {
          "_0": "(quote asset reserve, base asset reserve)"
        }
      },
      "getSpotPrice()": {
        "returns": {
          "_0": "spot price"
        }
      },
      "getUnderlyingPrice()": {
        "returns": {
          "_0": "underlying price"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCap((uint256),(uint256))": {
        "details": "only owner can call. assume this will be removes soon once the guarded period has ended. must be set before opening amm",
        "params": {
          "_maxHoldingBaseAsset": "max position size that traders can hold in 18 digits",
          "_openInterestNotionalCap": "open interest cap, denominated in quoteToken"
        }
      },
      "setCounterParty(address)": {
        "details": "only owner can call this function",
        "params": {
          "_counterParty": "address of counter party"
        }
      },
      "setFluctuationLimitRatio((uint256))": {
        "details": "only owner can call this function",
        "params": {
          "_fluctuationLimitRatio": "fluctuation limit rate in 18 digits, 0 means skip the checking"
        }
      },
      "setGlobalShutdown(address)": {
        "details": "only owner can call this function",
        "params": {
          "_globalShutdown": "address of `globalShutdown`"
        }
      },
      "setOpen(bool)": {
        "details": "only owner can call this function",
        "params": {
          "_open": "open to trade is true, otherwise is false."
        }
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "setPriceFeed(address)": {
        "details": "only owner can call",
        "params": {
          "_priceFeed": "new price feed for this AMM"
        }
      },
      "setSpotPriceTwapInterval(uint256)": {
        "details": "only owner can call this function",
        "params": {
          "_interval": "time interval in seconds"
        }
      },
      "setSpreadRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_spreadRatio": "new toll spread in 18 digits"
        }
      },
      "setTollRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_tollRatio": "new toll ratio in 18 digits"
        }
      },
      "settleFunding()": {
        "details": "only allow to update while reaching `nextFundingTime`",
        "returns": {
          "_0": "premium fraction of this period in 18 digits"
        }
      },
      "shutdown()": {
        "details": "only `globalShutdown` or owner can call this function The price calculation is in `globalShutdown`."
      },
      "swapInput(uint8,(uint256),(uint256),bool)": {
        "details": "Only clearingHouse can call this function",
        "params": {
          "_baseAssetAmountLimit": "minimum base asset amount expected to get to prevent front running",
          "_canOverFluctuationLimit": "if tx can go over fluctuation limit once; for partial liquidation",
          "_dirOfQuote": "ADD_TO_AMM for long, REMOVE_FROM_AMM for short",
          "_quoteAssetAmount": "quote asset amount"
        },
        "returns": {
          "_0": "base asset amount"
        }
      },
      "swapOutput(uint8,(uint256),(uint256))": {
        "details": "only clearingHouse can call this function",
        "params": {
          "_baseAssetAmount": "base asset amount",
          "_dirOfBase": "ADD_TO_AMM for short, REMOVE_FROM_AMM for long, opposite direction from swapInput",
          "_quoteAssetAmountLimit": "limit of quote asset amount; for slippage protection"
        },
        "returns": {
          "_0": "quote asset amount"
        }
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "calcFee((uint256))": {
        "notice": "calculate total fee (including toll and spread) by input quoteAssetAmount"
      },
      "getInputPrice(uint8,(uint256))": {
        "notice": "get input amount. returns how many base asset you will get with the input quote amount."
      },
      "getInputTwap(uint8,(uint256))": {
        "notice": "get input twap amount. returns how many base asset you will get with the input quote amount based on twap price."
      },
      "getOutputPrice(uint8,(uint256))": {
        "notice": "get output price. return how many quote asset you will get with the input base amount"
      },
      "getOutputTwap(uint8,(uint256))": {
        "notice": "get output twap amount. return how many quote asset you will get with the input base amount on twap price."
      },
      "getReserve()": {
        "notice": "get current quote/base asset reserve."
      },
      "getSpotPrice()": {
        "notice": "get spot price based on current quote/base asset reserve."
      },
      "getTwapPrice(uint256)": {
        "notice": "get twap price"
      },
      "getUnderlyingPrice()": {
        "notice": "get underlying price provided by oracle"
      },
      "setCap((uint256),(uint256))": {
        "notice": "set new cap during guarded period, which is max position size that traders can hold"
      },
      "setCounterParty(address)": {
        "notice": "set counter party"
      },
      "setFluctuationLimitRatio((uint256))": {
        "notice": "set fluctuation limit rate. Default value is `1 / max leverage`"
      },
      "setGlobalShutdown(address)": {
        "notice": "set `globalShutdown`"
      },
      "setOpen(bool)": {
        "notice": "set `open` flag. Amm is open to trade if `open` is true. Default is false."
      },
      "setPriceFeed(address)": {
        "notice": "set priceFee address"
      },
      "setSpotPriceTwapInterval(uint256)": {
        "notice": "set time interval for twap calculation, default is 1 hour"
      },
      "setSpreadRatio((uint256))": {
        "notice": "set new spread ratio"
      },
      "setTollRatio((uint256))": {
        "notice": "set new toll ratio"
      },
      "settleFunding()": {
        "notice": "update funding rate"
      },
      "shutdown()": {
        "notice": "shutdown amm,"
      },
      "swapInput(uint8,(uint256),(uint256),bool)": {
        "notice": "Swap your quote asset to base asset, the impact of the price MUST be less than `fluctuationLimitRatio`"
      },
      "swapOutput(uint8,(uint256),(uint256))": {
        "notice": "swap your base asset to quote asset; NOTE it is only used during close/liquidate positions so it always allows going over fluctuation limit"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/Amm.sol:Amm",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/Amm.sol:Amm",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/Amm.sol:Amm",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18200,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 18202,
        "contract": "contracts/Amm.sol:Amm",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 18376,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17235,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2604,
        "contract": "contracts/Amm.sol:Amm",
        "label": "baseAssetDeltaThisFundingPeriod",
        "offset": 0,
        "slot": "203",
        "type": "t_struct(signedDecimal)18667_storage"
      },
      {
        "astId": 2606,
        "contract": "contracts/Amm.sol:Amm",
        "label": "totalPositionSize",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(signedDecimal)18667_storage"
      },
      {
        "astId": 2608,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingRate",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(signedDecimal)18667_storage"
      },
      {
        "astId": 2610,
        "contract": "contracts/Amm.sol:Amm",
        "label": "cumulativeNotional",
        "offset": 0,
        "slot": "206",
        "type": "t_struct(signedDecimal)18667_storage"
      },
      {
        "astId": 2612,
        "contract": "contracts/Amm.sol:Amm",
        "label": "settlementPrice",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2614,
        "contract": "contracts/Amm.sol:Amm",
        "label": "tradeLimitRatio",
        "offset": 0,
        "slot": "208",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2616,
        "contract": "contracts/Amm.sol:Amm",
        "label": "quoteAssetReserve",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2618,
        "contract": "contracts/Amm.sol:Amm",
        "label": "baseAssetReserve",
        "offset": 0,
        "slot": "210",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2620,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fluctuationLimitRatio",
        "offset": 0,
        "slot": "211",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2622,
        "contract": "contracts/Amm.sol:Amm",
        "label": "tollRatio",
        "offset": 0,
        "slot": "212",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2624,
        "contract": "contracts/Amm.sol:Amm",
        "label": "spreadRatio",
        "offset": 0,
        "slot": "213",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2626,
        "contract": "contracts/Amm.sol:Amm",
        "label": "tollAmount",
        "offset": 0,
        "slot": "214",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2628,
        "contract": "contracts/Amm.sol:Amm",
        "label": "maxHoldingBaseAsset",
        "offset": 0,
        "slot": "215",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2630,
        "contract": "contracts/Amm.sol:Amm",
        "label": "openInterestNotionalCap",
        "offset": 0,
        "slot": "216",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2632,
        "contract": "contracts/Amm.sol:Amm",
        "label": "cumulativePositionMultiplier",
        "offset": 0,
        "slot": "217",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 2635,
        "contract": "contracts/Amm.sol:Amm",
        "label": "liquidityChangedSnapshots",
        "offset": 0,
        "slot": "218",
        "type": "t_array(t_struct(LiquidityChangedSnapshot)14512_storage)dyn_storage"
      },
      {
        "astId": 2637,
        "contract": "contracts/Amm.sol:Amm",
        "label": "spotPriceTwapInterval",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 2639,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingPeriod",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 2641,
        "contract": "contracts/Amm.sol:Amm",
        "label": "fundingBufferPeriod",
        "offset": 0,
        "slot": "221",
        "type": "t_uint256"
      },
      {
        "astId": 2643,
        "contract": "contracts/Amm.sol:Amm",
        "label": "nextFundingTime",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 2645,
        "contract": "contracts/Amm.sol:Amm",
        "label": "priceFeedKey",
        "offset": 0,
        "slot": "223",
        "type": "t_bytes32"
      },
      {
        "astId": 2648,
        "contract": "contracts/Amm.sol:Amm",
        "label": "reserveSnapshots",
        "offset": 0,
        "slot": "224",
        "type": "t_array(t_struct(ReserveSnapshot)2579_storage)dyn_storage"
      },
      {
        "astId": 2650,
        "contract": "contracts/Amm.sol:Amm",
        "label": "counterParty",
        "offset": 0,
        "slot": "225",
        "type": "t_address"
      },
      {
        "astId": 2652,
        "contract": "contracts/Amm.sol:Amm",
        "label": "globalShutdown",
        "offset": 0,
        "slot": "226",
        "type": "t_address"
      },
      {
        "astId": 2655,
        "contract": "contracts/Amm.sol:Amm",
        "label": "quoteAsset",
        "offset": 0,
        "slot": "227",
        "type": "t_contract(IERC20)1832"
      },
      {
        "astId": 2657,
        "contract": "contracts/Amm.sol:Amm",
        "label": "priceFeed",
        "offset": 0,
        "slot": "228",
        "type": "t_contract(IPriceFeed)14969"
      },
      {
        "astId": 2660,
        "contract": "contracts/Amm.sol:Amm",
        "label": "open",
        "offset": 20,
        "slot": "228",
        "type": "t_bool"
      },
      {
        "astId": 2664,
        "contract": "contracts/Amm.sol:Amm",
        "label": "__gap",
        "offset": 0,
        "slot": "229",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LiquidityChangedSnapshot)14512_storage)dyn_storage": {
        "base": "t_struct(LiquidityChangedSnapshot)14512_storage",
        "encoding": "dynamic_array",
        "label": "struct IAmm.LiquidityChangedSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(ReserveSnapshot)2579_storage)dyn_storage": {
        "base": "t_struct(ReserveSnapshot)2579_storage",
        "encoding": "dynamic_array",
        "label": "struct Amm.ReserveSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1832": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)14969": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(LiquidityChangedSnapshot)14512_storage": {
        "encoding": "inplace",
        "label": "struct IAmm.LiquidityChangedSnapshot",
        "members": [
          {
            "astId": 14505,
            "contract": "contracts/Amm.sol:Amm",
            "label": "cumulativeNotional",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(signedDecimal)18667_storage"
          },
          {
            "astId": 14507,
            "contract": "contracts/Amm.sol:Amm",
            "label": "quoteAssetReserve",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 14509,
            "contract": "contracts/Amm.sol:Amm",
            "label": "baseAssetReserve",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 14511,
            "contract": "contracts/Amm.sol:Amm",
            "label": "totalPositionSize",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(signedDecimal)18667_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ReserveSnapshot)2579_storage": {
        "encoding": "inplace",
        "label": "struct Amm.ReserveSnapshot",
        "members": [
          {
            "astId": 2572,
            "contract": "contracts/Amm.sol:Amm",
            "label": "quoteAssetReserve",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 2574,
            "contract": "contracts/Amm.sol:Amm",
            "label": "baseAssetReserve",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 2576,
            "contract": "contracts/Amm.sol:Amm",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2578,
            "contract": "contracts/Amm.sol:Amm",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(decimal)17269_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 17268,
            "contract": "contracts/Amm.sol:Amm",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(signedDecimal)18667_storage": {
        "encoding": "inplace",
        "label": "struct SignedDecimal.signedDecimal",
        "members": [
          {
            "astId": 18666,
            "contract": "contracts/Amm.sol:Amm",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}