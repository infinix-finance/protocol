{
  "address": "0x04a340984056d44ac2098ccF260D5EA9Bd4dc622",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_THRESHOLD_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "appendMintedTokenHistory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMinter",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOverMintThreshold",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedAmountDuringMintThresholdPeriod",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_shutdownThreshold",
          "type": "tuple"
        }
      ],
      "name": "setShutdownThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33c0fc353a00c882b8f49f055d1e49c85809b3ad130b41790ca5667fac1e2ba8",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x04a340984056d44ac2098ccF260D5EA9Bd4dc622",
    "transactionIndex": 0,
    "gasUsed": "1134493",
    "logsBloom": "0x
    "blockHash": "0xeb439c6cf48e079b40a6c05af4fd7e078834120c4f6f75296e6dd6943a898a3b",
    "transactionHash": "0x33c0fc353a00c882b8f49f055d1e49c85809b3ad130b41790ca5667fac1e2ba8",
    "logs": [],
    "blockNumber": 10579747,
    "cumulativeGasUsed": "1134493",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f54165b21f7a8419402d8a8ce3bda827",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_THRESHOLD_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"appendMintedTokenHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverMintThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedAmountDuringMintThresholdPeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_shutdownThreshold\",\"type\":\"tuple\"}],\"name\":\"setShutdownThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}}},\"userdoc\":{\"methods\":{\"shutdownThreshold()\":{\"notice\":\"in percentage, if (minted token in a week) / (total supply) is less than `shutdownThreshold`, it's ready to shutdown\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/InflationMonitor.sol\":\"InflationMonitor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"contracts/InflationMonitor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IfnxFiOwnableUpgrade} from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport {Decimal, SafeMath} from \\\"./utils/Decimal.sol\\\";\\nimport {DecimalERC20} from \\\"./utils/DecimalERC20.sol\\\";\\nimport {IMinter} from \\\"./interface/IMinter.sol\\\";\\nimport {BlockContext} from \\\"./utils/BlockContext.sol\\\";\\nimport {IInflationMonitor} from \\\"./interface/IInflationMonitor.sol\\\";\\n\\n// record the extra inflation due to the unexpected loss\\ncontract InflationMonitor is IInflationMonitor, IfnxFiOwnableUpgrade, BlockContext, DecimalERC20 {\\n    using Decimal for Decimal.decimal;\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Stores timestamp and cumulative amount of minted token\\n     */\\n    struct MintedTokenEntry {\\n        uint256 timestamp;\\n        Decimal.decimal cumulativeAmount;\\n    }\\n\\n    uint256 public constant MINT_THRESHOLD_PERIOD = 1 weeks;\\n\\n    //**********************************************************//\\n    //    Can not change the order of below state variables     //\\n    //**********************************************************//\\n\\n    // An array of token mint timestamp and cumulative amount\\n    MintedTokenEntry[] private mintedTokenHistory;\\n\\n    /**\\n     * @notice in percentage, if (minted token in a week) / (total supply) is less than `shutdownThreshold`,\\n     * it's ready to shutdown\\n     */\\n    Decimal.decimal public shutdownThreshold;\\n\\n    IMinter private minter;\\n\\n    //**********************************************************//\\n    //    Can not change the order of above state variables     //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function initialize(IMinter _minter) public initializer {\\n        __Ownable_init();\\n\\n        minter = _minter;\\n        shutdownThreshold = Decimal.one().divScalar(10);\\n    }\\n\\n    function setShutdownThreshold(Decimal.decimal memory _shutdownThreshold) public onlyOwner {\\n        shutdownThreshold = _shutdownThreshold;\\n    }\\n\\n    function appendMintedTokenHistory(Decimal.decimal calldata _amount) external override {\\n        require(_msgSender() == address(minter), \\\"!minter\\\");\\n        Decimal.decimal memory cumulativeAmount;\\n        uint256 len = mintedTokenHistory.length;\\n        if (len == 0) {\\n            cumulativeAmount = _amount;\\n        } else {\\n            cumulativeAmount = mintedTokenHistory[len - 1].cumulativeAmount.addD(_amount);\\n        }\\n        mintedTokenHistory.push(\\n            MintedTokenEntry({timestamp: _blockTimestamp(), cumulativeAmount: cumulativeAmount})\\n        );\\n    }\\n\\n    function mintedAmountDuringMintThresholdPeriod() public view returns (Decimal.decimal memory) {\\n        uint256 len = mintedTokenHistory.length;\\n        if (len == 0) {\\n            return Decimal.zero();\\n        }\\n\\n        uint256 durationSinceLastMinted = _blockTimestamp().sub(\\n            mintedTokenHistory[len - 1].timestamp\\n        );\\n        if (durationSinceLastMinted > MINT_THRESHOLD_PERIOD) {\\n            return Decimal.zero();\\n        }\\n\\n        Decimal.decimal memory minted;\\n        for (uint256 i = len - 1; i > 0; i--) {\\n            Decimal.decimal memory amount = mintedTokenHistory[i].cumulativeAmount.subD(\\n                mintedTokenHistory[i - 1].cumulativeAmount\\n            );\\n            minted = minted.addD(amount);\\n\\n            durationSinceLastMinted += mintedTokenHistory[i].timestamp.sub(\\n                mintedTokenHistory[i - 1].timestamp\\n            );\\n            if (durationSinceLastMinted > MINT_THRESHOLD_PERIOD) {\\n                break;\\n            }\\n        }\\n        return minted;\\n    }\\n\\n    function isOverMintThreshold() external view override returns (bool) {\\n        if (shutdownThreshold.toUint() == 0) {\\n            return false;\\n        }\\n        Decimal.decimal memory totalSupply = _totalSupply(minter.getIfnxToken());\\n        Decimal.decimal memory minted = mintedAmountDuringMintThresholdPeriod();\\n        return minted.divD(totalSupply).cmp(shutdownThreshold) >= 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9ab933eab23cf44f7ddc375f9822a2009f84fe8b6ce5b8a9aa8ee25fd27e8092\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IInflationMonitor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IInflationMonitor {\\n    function isOverMintThreshold() external view returns (bool);\\n\\n    function appendMintedTokenHistory(Decimal.decimal calldata _amount) external;\\n}\\n\",\"keccak256\":\"0xaf2dcbc7d4c7dd85dbcdc699dee05b98f0f6a60d7354b79404ae6c2d57ffca6c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMinter {\\n    function mintReward() external;\\n\\n    function mintForLoss(Decimal.decimal memory _amount) external;\\n\\n    function getIfnxToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x253fd10327d44c024ea635e48c6c5d51202ffef1e79328eb4fe8bacd56a31fba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nabstract contract DecimalERC20 {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // INTERNAL functions\\n    //\\n\\n    // CAUTION: do not input _from == _to s.t. this function will always fail\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transfer failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(IERC20 _token, address _owner)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(IERC20 _token) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(IERC20 _token, uint256 _number)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number.div(10**(tokenDecimals.sub(18))));\\n        }\\n\\n        return Decimal.decimal(_number.mul(10**(uint256(18).sub(tokenDecimals))));\\n    }\\n\\n    function _toUint(IERC20 _token, Decimal.decimal memory _decimal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint().mul(10**(tokenDecimals.sub(18)));\\n        }\\n        return _decimal.toUint().div(10**(uint256(18).sub(tokenDecimals)));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"DecimalERC20: get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.approve.selector, _spender, _toUint(_token, _value))\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"DecimalERC20: balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf97ccdfa07abeda868c8cc6bf80035cf6a4c5c0aa972ffd9bc7fe5f6c62e5170\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "shutdownThreshold()": {
        "notice": "in percentage, if (minted token in a week) / (total supply) is less than `shutdownThreshold`, it's ready to shutdown"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18203,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 18205,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 18379,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17238,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17540,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "decimalMap",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17544,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9548,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "mintedTokenHistory",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_struct(MintedTokenEntry)9542_storage)dyn_storage"
      },
      {
        "astId": 9551,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "shutdownThreshold",
        "offset": 0,
        "slot": "255",
        "type": "t_struct(decimal)17272_storage"
      },
      {
        "astId": 9553,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "minter",
        "offset": 0,
        "slot": "256",
        "type": "t_contract(IMinter)14947"
      },
      {
        "astId": 9557,
        "contract": "contracts/InflationMonitor.sol:InflationMonitor",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MintedTokenEntry)9542_storage)dyn_storage": {
        "base": "t_struct(MintedTokenEntry)9542_storage",
        "encoding": "dynamic_array",
        "label": "struct InflationMonitor.MintedTokenEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMinter)14947": {
        "encoding": "inplace",
        "label": "contract IMinter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(MintedTokenEntry)9542_storage": {
        "encoding": "inplace",
        "label": "struct InflationMonitor.MintedTokenEntry",
        "members": [
          {
            "astId": 9539,
            "contract": "contracts/InflationMonitor.sol:InflationMonitor",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9541,
            "contract": "contracts/InflationMonitor.sol:InflationMonitor",
            "label": "cumulativeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17272_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(decimal)17272_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 17271,
            "contract": "contracts/InflationMonitor.sol:InflationMonitor",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}