{
  "address": "0x27715E1D1C3B58FB8CD3fd3cBb683ddBD69e8dF3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isProvider",
          "type": "bool"
        }
      ],
      "name": "BackstopLiquidityProviderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initMarginRatio",
          "type": "uint256"
        }
      ],
      "name": "InitMarginRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuranceFund",
          "type": "address"
        }
      ],
      "name": "InsuranceFundChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFeeRatio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationFeeRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "name": "MarginChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marginRatio",
          "type": "uint256"
        }
      ],
      "name": "MarginRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldLiquidityIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLiquidityIndex",
          "type": "uint256"
        }
      ],
      "name": "PositionAdjusted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "exchangedPositionSize",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "positionSizeAfter",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "realizedPnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "unrealizedPnlAfter",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPenalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spotPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "name": "PositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "badDebt",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueTransferred",
          "type": "uint256"
        }
      ],
      "name": "PositionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "referralCode",
          "type": "bytes32"
        }
      ],
      "name": "ReferredPositionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RestrictionModeEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_addedMargin",
          "type": "tuple"
        }
      ],
      "name": "addMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "backstopLiquidityProviderMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePool",
      "outputs": [
        {
          "internalType": "contract IMultiTokenRewardRecipient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "getLatestCumulativePremiumFraction",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getMarginRatio",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "size",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "margin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "openNotional",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "lastUpdatedCumulativePremiumFraction",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "liquidityHistoryIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ClearingHouse.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "enum ClearingHouse.PnlCalcOption",
          "name": "_pnlCalcOption",
          "type": "uint8"
        }
      ],
      "name": "getPositionNotionalAndUnrealizedPnl",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "positionNotional",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "d",
              "type": "int256"
            }
          ],
          "internalType": "struct SignedDecimal.signedDecimal",
          "name": "unrealizedPnl",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getUnadjustedPosition",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "size",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "margin",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "openNotional",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "d",
                  "type": "int256"
                }
              ],
              "internalType": "struct SignedDecimal.signedDecimal",
              "name": "lastUpdatedCumulativePremiumFraction",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "liquidityHistoryIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ClearingHouse.Position",
          "name": "position",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initMarginRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initMarginRatio",
          "type": "uint256"
        },
        {
          "internalType": "contract IInsuranceFund",
          "name": "_insuranceFund",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFund",
      "outputs": [
        {
          "internalType": "contract IInsuranceFund",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "liquidateWithSlippage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "quoteAssetAmount",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isPartialClose",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maintenanceMarginRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "openInterestNotionalMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "internalType": "enum ClearingHouse.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_quoteAssetAmount",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_leverage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_baseAssetAmountLimit",
          "type": "tuple"
        }
      ],
      "name": "openPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partialLiquidationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "payFunding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_removedMargin",
          "type": "tuple"
        }
      ],
      "name": "removeMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isProvider",
          "type": "bool"
        }
      ],
      "name": "setBackstopLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feePool",
          "type": "address"
        }
      ],
      "name": "setFeePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_liquidationFeeRatio",
          "type": "tuple"
        }
      ],
      "name": "setLiquidationFeeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_maintenanceMarginRatio",
          "type": "tuple"
        }
      ],
      "name": "setMaintenanceMarginRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_ratio",
          "type": "tuple"
        }
      ],
      "name": "setPartialLiquidationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whitelist",
          "type": "address"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "settlePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x01072333d291627afd538e7679e9457ccb7849fed851231ed33027c726ccec9b",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x27715E1D1C3B58FB8CD3fd3cBb683ddBD69e8dF3",
    "transactionIndex": 1,
    "gasUsed": "5346365",
    "logsBloom": "0x
    "blockHash": "0xfc885ae310a172bd621bca5d80a75c01b83efc19156fa3182b0fc7d4901dfbb3",
    "transactionHash": "0x01072333d291627afd538e7679e9457ccb7849fed851231ed33027c726ccec9b",
    "logs": [],
    "blockNumber": 10579867,
    "cumulativeGasUsed": "5380477",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1b7591a75579d779edef390e2b1d74a1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isProvider\",\"type\":\"bool\"}],\"name\":\"BackstopLiquidityProviderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initMarginRatio\",\"type\":\"uint256\"}],\"name\":\"InitMarginRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuranceFund\",\"type\":\"address\"}],\"name\":\"InsuranceFundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFeeRatio\",\"type\":\"uint256\"}],\"name\":\"LiquidationFeeRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"name\":\"MarginChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginRatio\",\"type\":\"uint256\"}],\"name\":\"MarginRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLiquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityIndex\",\"type\":\"uint256\"}],\"name\":\"PositionAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"exchangedPositionSize\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"positionSizeAfter\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"realizedPnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"unrealizedPnlAfter\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spotPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"name\":\"PositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"badDebt\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueTransferred\",\"type\":\"uint256\"}],\"name\":\"PositionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"}],\"name\":\"ReferredPositionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RestrictionModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_addedMargin\",\"type\":\"tuple\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"backstopLiquidityProviderMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePool\",\"outputs\":[{\"internalType\":\"contract IMultiTokenRewardRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"getLatestCumulativePremiumFraction\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getMarginRatio\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"size\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"margin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"openNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFraction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidityHistoryIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ClearingHouse.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"enum ClearingHouse.PnlCalcOption\",\"name\":\"_pnlCalcOption\",\"type\":\"uint8\"}],\"name\":\"getPositionNotionalAndUnrealizedPnl\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"positionNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"unrealizedPnl\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getUnadjustedPosition\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"size\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"margin\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"openNotional\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"d\",\"type\":\"int256\"}],\"internalType\":\"struct SignedDecimal.signedDecimal\",\"name\":\"lastUpdatedCumulativePremiumFraction\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"liquidityHistoryIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ClearingHouse.Position\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initMarginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"contract IInsuranceFund\",\"name\":\"_insuranceFund\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFund\",\"outputs\":[{\"internalType\":\"contract IInsuranceFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"liquidateWithSlippage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"quoteAssetAmount\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isPartialClose\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceMarginRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"openInterestNotionalMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"internalType\":\"enum ClearingHouse.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_quoteAssetAmount\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_leverage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_baseAssetAmountLimit\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialLiquidationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"payFunding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_removedMargin\",\"type\":\"tuple\"}],\"name\":\"removeMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProvider\",\"type\":\"bool\"}],\"name\":\"setBackstopLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feePool\",\"type\":\"address\"}],\"name\":\"setFeePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_liquidationFeeRatio\",\"type\":\"tuple\"}],\"name\":\"setLiquidationFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_maintenanceMarginRatio\",\"type\":\"tuple\"}],\"name\":\"setMaintenanceMarginRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_ratio\",\"type\":\"tuple\"}],\"name\":\"setPartialLiquidationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"settlePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addMargin(address,(uint256))\":{\"params\":{\"_addedMargin\":\"added margin in 18 digits\",\"_amm\":\"IAmm address\"}},\"closePosition(address,(uint256))\":{\"params\":{\"_amm\":\"IAmm address\"}},\"getLatestCumulativePremiumFraction(address)\":{\"params\":{\"_amm\":\"IAmm address\"},\"returns\":{\"_0\":\"latest cumulative premium fraction in 18 digits\"}},\"getMarginRatio(address,address)\":{\"params\":{\"_amm\":\"IAmm address\",\"_trader\":\"trader address\"},\"returns\":{\"_0\":\"margin ratio in 18 digits\"}},\"getPosition(address,address)\":{\"params\":{\"_amm\":\"IAmm address\",\"_trader\":\"trader address\"},\"returns\":{\"_0\":\"struct Position\"}},\"getPositionNotionalAndUnrealizedPnl(address,address,uint8)\":{\"params\":{\"_amm\":\"IAmm address\",\"_pnlCalcOption\":\"enum PnlCalcOption, SPOT_PRICE for spot price and TWAP for twap price\",\"_trader\":\"trader address\"},\"returns\":{\"positionNotional\":\"position notional\",\"unrealizedPnl\":\"unrealized Pnl\"}},\"liquidate(address,address)\":{\"details\":\"liquidator can NOT open any positions in the same block to prevent from price manipulation.\",\"params\":{\"_amm\":\"IAmm address\",\"_trader\":\"trader address\"}},\"openPosition(address,uint8,(uint256),(uint256),(uint256))\":{\"params\":{\"_amm\":\"amm address\",\"_baseAssetAmountLimit\":\"minimum base asset amount expected to get to prevent from slippage.\",\"_leverage\":\"leverage  in 18 digits. Can Not be 0\",\"_quoteAssetAmount\":\"quote asset amount in 18 digits. Can Not be 0\",\"_side\":\"enum Side; BUY for long and SELL for short\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payFunding(address)\":{\"params\":{\"_amm\":\"IAmm address\"}},\"removeMargin(address,(uint256))\":{\"params\":{\"_amm\":\"IAmm address\",\"_removedMargin\":\"removed margin in 18 digits\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBackstopLiquidityProvider(address,bool)\":{\"details\":\"only owner can call\",\"params\":{\"account\":\"provider address\",\"isProvider\":\"wether the account is a backstop liquidity provider\"}},\"setFeePool(address)\":{\"details\":\"only owner can call\"},\"setLiquidationFeeRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_liquidationFeeRatio\":\"new liquidation fee ratio in 18 digits\"}},\"setMaintenanceMarginRatio((uint256))\":{\"details\":\"only owner can call\",\"params\":{\"_maintenanceMarginRatio\":\"new maintenance margin ratio in 18 digits\"}},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"setPartialLiquidationRatio((uint256))\":{\"details\":\"only owner can call\"},\"setWhitelist(address)\":{\"details\":\"only owner can call\",\"params\":{\"_whitelist\":\"an address\"}},\"settlePosition(address)\":{\"params\":{\"_amm\":\"IAmm address\"}},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}}},\"userdoc\":{\"methods\":{\"addMargin(address,(uint256))\":{\"notice\":\"add margin to increase margin ratio\"},\"closePosition(address,(uint256))\":{\"notice\":\"close all the positions\"},\"getLatestCumulativePremiumFraction(address)\":{\"notice\":\"get latest cumulative premium fraction.\"},\"getMarginRatio(address,address)\":{\"notice\":\"get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional use spot and twap price to calculate unrealized Pnl, final unrealized Pnl depends on which one is higher\"},\"getPosition(address,address)\":{\"notice\":\"get personal position information\"},\"getPositionNotionalAndUnrealizedPnl(address,address,uint8)\":{\"notice\":\"get position notional and unrealized Pnl without fee expense and funding payment\"},\"liquidate(address,address)\":{\"notice\":\"liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio\"},\"openPosition(address,uint8,(uint256),(uint256),(uint256))\":{\"notice\":\"open a position\"},\"payFunding(address)\":{\"notice\":\"if funding rate is positive, traders with long position pay traders with short position and vice versa.\"},\"removeMargin(address,(uint256))\":{\"notice\":\"remove margin to decrease margin ratio\"},\"setBackstopLiquidityProvider(address,bool)\":{\"notice\":\"set backstop liquidity provider\"},\"setFeePool(address)\":{\"notice\":\"set the fee pool address\"},\"setLiquidationFeeRatio((uint256))\":{\"notice\":\"set liquidation fee ratio\"},\"setMaintenanceMarginRatio((uint256))\":{\"notice\":\"set maintenance margin ratio\"},\"setPartialLiquidationRatio((uint256))\":{\"notice\":\"set the margin ratio after deleveraging\"},\"setWhitelist(address)\":{\"notice\":\"add an address in the whitelist. People in the whitelist can hold unlimited positions.\"},\"settlePosition(address)\":{\"notice\":\"settle all the positions when amm is shutdown. The settlement price is according to IAmm.settlementPrice\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHouse.sol\":\"ClearingHouse\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\n// solhint-disable no-inline-assembly\\npragma solidity ^0.6.2;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address payable ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal override virtual view returns (bytes memory ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // we copy the msg.data , except the last 20 bytes (and update the total length)\\n            assembly {\\n                let ptr := mload(0x40)\\n                // copy only size-20 bytes\\n                let size := sub(calldatasize(),20)\\n                // structure RLP data as <offset> <length> <bytes>\\n                mstore(ptr, 0x20)\\n                mstore(add(ptr,32), size)\\n                calldatacopy(add(ptr,64), 0, size)\\n                return(ptr, add(size,64))\\n            }\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaef2a61eaaf6cbcf4fc96e23416fc3503b61c7d9b6544c0baf8a366bde49c156\",\"license\":\"MIT\"},\"@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.6.2;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address payable);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise, return `msg.data`\\n     * should be used in the contract instead of msg.data, where the difference matters (e.g. when explicitly\\n     * signing or hashing the\\n     */\\n    function _msgData() internal virtual view returns (bytes memory);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0xbb9d970a466d0155113acc87f0ea403df413e070e0a1ddce66439f2f82ac6d01\",\"license\":\"MIT\"},\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ad5473fe88d9ab30c6cd495ab8895daae8c4a48cf8231282a2d339387b35006\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/ClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {BlockContext} from \\\"./utils/BlockContext.sol\\\";\\nimport {BaseRelayRecipient} from \\\"@opengsn/gsn/contracts/BaseRelayRecipient.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"./utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./utils/SignedDecimal.sol\\\";\\nimport {MixedDecimal} from \\\"./utils/MixedDecimal.sol\\\";\\nimport {DecimalERC20} from \\\"./utils/DecimalERC20.sol\\\";\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n// prettier-ignore\\n// solhint-disable-next-line\\nimport { ReentrancyGuardUpgradeSafe } from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {OwnerPausableUpgradeSafe} from \\\"./OwnerPausable.sol\\\";\\nimport {IAmm} from \\\"./interface/IAmm.sol\\\";\\nimport {IInsuranceFund} from \\\"./interface/IInsuranceFund.sol\\\";\\nimport {IMultiTokenRewardRecipient} from \\\"./interface/IMultiTokenRewardRecipient.sol\\\";\\n\\n// note BaseRelayRecipient must come after OwnerPausableUpgradeSafe so its _msgSender() takes precedence\\n// (yes, the ordering is reversed comparing to Python)\\ncontract ClearingHouse is\\n    DecimalERC20,\\n    OwnerPausableUpgradeSafe,\\n    ReentrancyGuardUpgradeSafe,\\n    BlockContext,\\n    BaseRelayRecipient\\n{\\n    using Decimal for Decimal.decimal;\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using MixedDecimal for SignedDecimal.signedDecimal;\\n\\n    //\\n    // EVENTS\\n    //\\n    event InitMarginRatioChanged(uint256 initMarginRatio);\\n    event InsuranceFundChanged(address insuranceFund);\\n    event MarginRatioChanged(uint256 marginRatio);\\n    event LiquidationFeeRatioChanged(uint256 liquidationFeeRatio);\\n    event BackstopLiquidityProviderChanged(address indexed account, bool indexed isProvider);\\n    event MarginChanged(\\n        address indexed sender,\\n        address indexed amm,\\n        int256 amount,\\n        int256 fundingPayment\\n    );\\n    event PositionAdjusted(\\n        address indexed amm,\\n        address indexed trader,\\n        int256 newPositionSize,\\n        uint256 oldLiquidityIndex,\\n        uint256 newLiquidityIndex\\n    );\\n    event PositionSettled(address indexed amm, address indexed trader, uint256 valueTransferred);\\n    event RestrictionModeEntered(address amm, uint256 blockNumber);\\n\\n    /// @notice This event is emitted when position change\\n    /// @param trader the address which execute this transaction\\n    /// @param amm IAmm address\\n    /// @param margin margin\\n    /// @param positionNotional margin * leverage\\n    /// @param exchangedPositionSize position size, e.g. ETHUSDC or LINKUSDC\\n    /// @param fee transaction fee\\n    /// @param positionSizeAfter position size after this transaction, might be increased or decreased\\n    /// @param realizedPnl realized pnl after this position changed\\n    /// @param unrealizedPnlAfter unrealized pnl after this position changed\\n    /// @param badDebt position change amount cleared by insurance funds\\n    /// @param liquidationPenalty amount of remaining margin lost due to liquidation\\n    /// @param spotPrice quote asset reserve / base asset reserve\\n    /// @param fundingPayment funding payment (+: trader paid, -: trader received)\\n    event PositionChanged(\\n        address indexed trader,\\n        address indexed amm,\\n        uint256 margin,\\n        uint256 positionNotional,\\n        int256 exchangedPositionSize,\\n        uint256 fee,\\n        int256 positionSizeAfter,\\n        int256 realizedPnl,\\n        int256 unrealizedPnlAfter,\\n        uint256 badDebt,\\n        uint256 liquidationPenalty,\\n        uint256 spotPrice,\\n        int256 fundingPayment\\n    );\\n\\n    /// @notice This event is emitted when position liquidated\\n    /// @param trader the account address being liquidated\\n    /// @param amm IAmm address\\n    /// @param positionNotional liquidated position value minus liquidationFee\\n    /// @param positionSize liquidated position size\\n    /// @param liquidationFee liquidation fee to the liquidator\\n    /// @param liquidator the address which execute this transaction\\n    /// @param badDebt liquidation fee amount cleared by insurance funds\\n    event PositionLiquidated(\\n        address indexed trader,\\n        address indexed amm,\\n        uint256 positionNotional,\\n        uint256 positionSize,\\n        uint256 liquidationFee,\\n        address liquidator,\\n        uint256 badDebt\\n    );\\n\\n    event ReferredPositionChanged(bytes32 indexed referralCode);\\n\\n    //\\n    // Struct and Enum\\n    //\\n\\n    enum Side {\\n        BUY,\\n        SELL\\n    }\\n    enum PnlCalcOption {\\n        SPOT_PRICE,\\n        TWAP,\\n        ORACLE\\n    }\\n\\n    /// @param MAX_PNL most beneficial way for traders to calculate position notional\\n    /// @param MIN_PNL least beneficial way for traders to calculate position notional\\n    enum PnlPreferenceOption {\\n        MAX_PNL,\\n        MIN_PNL\\n    }\\n\\n    /// @notice This struct records personal position information\\n    /// @param size denominated in amm.baseAsset\\n    /// @param margin isolated margin\\n    /// @param openNotional the quoteAsset value of position when opening position. the cost of the position\\n    /// @param lastUpdatedCumulativePremiumFraction for calculating funding payment, record at the moment every time when trader open/reduce/close position\\n    /// @param liquidityHistoryIndex\\n    /// @param blockNumber the block number of the last position\\n    struct Position {\\n        SignedDecimal.signedDecimal size;\\n        Decimal.decimal margin;\\n        Decimal.decimal openNotional;\\n        SignedDecimal.signedDecimal lastUpdatedCumulativePremiumFraction;\\n        uint256 liquidityHistoryIndex;\\n        uint256 blockNumber;\\n    }\\n\\n    /// @notice This struct is used for avoiding stack too deep error when passing too many var between functions\\n    struct PositionResp {\\n        Position position;\\n        // the quote asset amount trader will send if open position, will receive if close\\n        Decimal.decimal exchangedQuoteAssetAmount;\\n        // if realizedPnl + realizedFundingPayment + margin is negative, it's the abs value of it\\n        Decimal.decimal badDebt;\\n        // the base asset amount trader will receive if open position, will send if close\\n        SignedDecimal.signedDecimal exchangedPositionSize;\\n        // funding payment incurred during this position response\\n        SignedDecimal.signedDecimal fundingPayment;\\n        // realizedPnl = unrealizedPnl * closedRatio\\n        SignedDecimal.signedDecimal realizedPnl;\\n        // positive = trader transfer margin to vault, negative = trader receive margin from vault\\n        // it's 0 when internalReducePosition, its addedMargin when internalIncreasePosition\\n        // it's min(0, oldPosition + realizedFundingPayment + realizedPnl) when internalClosePosition\\n        SignedDecimal.signedDecimal marginToVault;\\n        // unrealized pnl after open position\\n        SignedDecimal.signedDecimal unrealizedPnlAfter;\\n    }\\n\\n    struct AmmMap {\\n        // issue #1471\\n        // last block when it turn restriction mode on.\\n        // In restriction mode, no one can do multi open/close/liquidate position in the same block.\\n        // If any underwater position being closed (having a bad debt and make insuranceFund loss),\\n        // or any liquidation happened,\\n        // restriction mode is ON in that block and OFF(default) in the next block.\\n        // This design is to prevent the attacker being benefited from the multiple action in one block\\n        // in extreme cases\\n        uint256 lastRestrictionBlock;\\n        SignedDecimal.signedDecimal[] cumulativePremiumFractions;\\n        mapping(address => Position) positionMap;\\n    }\\n\\n    //**********************************************************//\\n    //    Can not change the order of below state variables     //\\n    //**********************************************************//\\n    string public override versionRecipient;\\n\\n    // only admin\\n    Decimal.decimal public initMarginRatio;\\n\\n    // only admin\\n    Decimal.decimal public maintenanceMarginRatio;\\n\\n    // only admin\\n    Decimal.decimal public liquidationFeeRatio;\\n\\n    // key by amm address. will be deprecated or replaced after guarded period.\\n    // it's not an accurate open interest, just a rough way to control the unexpected loss at the beginning\\n    mapping(address => Decimal.decimal) public openInterestNotionalMap;\\n\\n    // key by amm address\\n    mapping(address => AmmMap) internal ammMap;\\n\\n    // prepaid bad debt balance, key by ERC20 token address\\n    mapping(address => Decimal.decimal) internal prepaidBadDebt;\\n\\n    // contract dependencies\\n    IInsuranceFund public insuranceFund;\\n    IMultiTokenRewardRecipient public feePool;\\n\\n    // designed for arbitragers who can hold unlimited positions. will be removed after guarded period\\n    address internal whitelist;\\n\\n    uint256[50] private __gap;\\n    //**********************************************************//\\n    //    Can not change the order of above state variables     //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n    Decimal.decimal public partialLiquidationRatio;\\n\\n    mapping(address => bool) public backstopLiquidityProviderMap;\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    //\\n\\n    // FUNCTIONS\\n    //\\n    // openzeppelin doesn't support struct input\\n    // https://github.com/OpenZeppelin/openzeppelin-sdk/issues/1523\\n    function initialize(\\n        uint256 _initMarginRatio,\\n        IInsuranceFund _insuranceFund\\n    ) public {\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n\\n        initMarginRatio = Decimal.decimal(_initMarginRatio);\\n        insuranceFund = _insuranceFund;\\n    }\\n\\n    //\\n    // External\\n    //\\n\\n    /**\\n     * @notice set liquidation fee ratio\\n     * @dev only owner can call\\n     * @param _liquidationFeeRatio new liquidation fee ratio in 18 digits\\n     */\\n    function setLiquidationFeeRatio(Decimal.decimal memory _liquidationFeeRatio)\\n        external\\n        onlyOwner\\n    {\\n        liquidationFeeRatio = _liquidationFeeRatio;\\n        emit LiquidationFeeRatioChanged(liquidationFeeRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set maintenance margin ratio\\n     * @dev only owner can call\\n     * @param _maintenanceMarginRatio new maintenance margin ratio in 18 digits\\n     */\\n    function setMaintenanceMarginRatio(Decimal.decimal memory _maintenanceMarginRatio)\\n        external\\n        onlyOwner\\n    {\\n        maintenanceMarginRatio = _maintenanceMarginRatio;\\n        emit MarginRatioChanged(maintenanceMarginRatio.toUint());\\n    }\\n\\n    /**\\n     * @notice set the fee pool address\\n     * @dev only owner can call\\n     */\\n    function setFeePool(address _feePool) external onlyOwner {\\n        feePool = IMultiTokenRewardRecipient(_feePool);\\n    }\\n\\n    /**\\n     * @notice add an address in the whitelist. People in the whitelist can hold unlimited positions.\\n     * @dev only owner can call\\n     * @param _whitelist an address\\n     */\\n    function setWhitelist(address _whitelist) external onlyOwner {\\n        whitelist = _whitelist;\\n    }\\n\\n    /**\\n     * @notice set backstop liquidity provider\\n     * @dev only owner can call\\n     * @param account provider address\\n     * @param isProvider wether the account is a backstop liquidity provider\\n     */\\n    function setBackstopLiquidityProvider(address account, bool isProvider) external onlyOwner {\\n        backstopLiquidityProviderMap[account] = isProvider;\\n        emit BackstopLiquidityProviderChanged(account, isProvider);\\n    }\\n\\n    /**\\n     * @notice set the margin ratio after deleveraging\\n     * @dev only owner can call\\n     */\\n    function setPartialLiquidationRatio(Decimal.decimal memory _ratio) external onlyOwner {\\n        require(_ratio.cmp(Decimal.one()) <= 0, \\\"invalid partial liquidation ratio\\\");\\n        partialLiquidationRatio = _ratio;\\n    }\\n\\n    /**\\n     * @notice add margin to increase margin ratio\\n     * @param _amm IAmm address\\n     * @param _addedMargin added margin in 18 digits\\n     */\\n    function addMargin(IAmm _amm, Decimal.decimal calldata _addedMargin)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check condition\\n        requireAmm(_amm, true);\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        requireValidTokenAmount(quoteToken, _addedMargin);\\n\\n        address trader = _msgSender();\\n        Position memory position = getPosition(_amm, trader);\\n        // update margin\\n        position.margin = position.margin.addD(_addedMargin);\\n\\n        setPosition(_amm, trader, position);\\n        // transfer token from trader\\n        _transferFrom(quoteToken, trader, address(this), _addedMargin);\\n        emit MarginChanged(trader, address(_amm), int256(_addedMargin.toUint()), 0);\\n    }\\n\\n    /**\\n     * @notice remove margin to decrease margin ratio\\n     * @param _amm IAmm address\\n     * @param _removedMargin removed margin in 18 digits\\n     */\\n    function removeMargin(IAmm _amm, Decimal.decimal calldata _removedMargin)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check condition\\n        requireAmm(_amm, true);\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        requireValidTokenAmount(quoteToken, _removedMargin);\\n\\n        address trader = _msgSender();\\n        // realize funding payment if there's no bad debt\\n        Position memory position = getPosition(_amm, trader);\\n\\n        // update margin and cumulativePremiumFraction\\n        SignedDecimal.signedDecimal memory marginDelta = MixedDecimal\\n            .fromDecimal(_removedMargin)\\n            .mulScalar(-1);\\n        (\\n            Decimal.decimal memory remainMargin,\\n            Decimal.decimal memory badDebt,\\n            SignedDecimal.signedDecimal memory fundingPayment,\\n            SignedDecimal.signedDecimal memory latestCumulativePremiumFraction\\n        ) = calcRemainMarginWithFundingPayment(_amm, position, marginDelta);\\n        require(badDebt.toUint() == 0, \\\"margin is not enough\\\");\\n        position.margin = remainMargin;\\n        position.lastUpdatedCumulativePremiumFraction = latestCumulativePremiumFraction;\\n\\n        // check enough margin (same as the way Curie calculates the free collateral)\\n        // Use a more conservative way to restrict traders to remove their margin\\n        // We don't allow unrealized PnL to support their margin removal\\n        require(\\n            calcFreeCollateral(_amm, trader, remainMargin.subD(badDebt)).toInt() >= 0,\\n            \\\"free collateral is not enough\\\"\\n        );\\n\\n        setPosition(_amm, trader, position);\\n\\n        // transfer token back to trader\\n        withdraw(quoteToken, trader, _removedMargin);\\n        emit MarginChanged(trader, address(_amm), marginDelta.toInt(), fundingPayment.toInt());\\n    }\\n\\n    /**\\n     * @notice settle all the positions when amm is shutdown. The settlement price is according to IAmm.settlementPrice\\n     * @param _amm IAmm address\\n     */\\n    function settlePosition(IAmm _amm) external nonReentrant {\\n        // check condition\\n        requireAmm(_amm, false);\\n        address trader = _msgSender();\\n        Position memory pos = getPosition(_amm, trader);\\n        requirePositionSize(pos.size);\\n        // update position\\n        clearPosition(_amm, trader);\\n        // calculate settledValue\\n        // If Settlement Price = 0, everyone takes back her collateral.\\n        // else Returned Fund = Position Size * (Settlement Price - Open Price) + Collateral\\n        Decimal.decimal memory settlementPrice = _amm.getSettlementPrice();\\n        Decimal.decimal memory settledValue;\\n        if (settlementPrice.toUint() == 0) {\\n            settledValue = pos.margin;\\n        } else {\\n            // returnedFund = positionSize * (settlementPrice - openPrice) + positionMargin\\n            // openPrice = positionOpenNotional / positionSize.abs()\\n            SignedDecimal.signedDecimal memory returnedFund = pos\\n                .size\\n                .mulD(\\n                    MixedDecimal.fromDecimal(settlementPrice).subD(\\n                        pos.openNotional.divD(pos.size.abs())\\n                    )\\n                )\\n                .addD(pos.margin);\\n            // if `returnedFund` is negative, trader can't get anything back\\n            if (returnedFund.toInt() > 0) {\\n                settledValue = returnedFund.abs();\\n            }\\n        }\\n        // transfer token based on settledValue. no insurance fund support\\n        if (settledValue.toUint() > 0) {\\n            _transfer(_amm.quoteAsset(), trader, settledValue);\\n        }\\n        // emit event\\n        emit PositionSettled(address(_amm), trader, settledValue.toUint());\\n    }\\n\\n    // if increase position\\n    //   marginToVault = addMargin\\n    //   marginDiff = realizedFundingPayment + realizedPnl(0)\\n    //   pos.margin += marginToVault + marginDiff\\n    //   vault.margin += marginToVault + marginDiff\\n    //   required(enoughMarginRatio)\\n    // else if reduce position()\\n    //   marginToVault = 0\\n    //   marginDiff = realizedFundingPayment + realizedPnl\\n    //   pos.margin += marginToVault + marginDiff\\n    //   if pos.margin < 0, badDebt = abs(pos.margin), set pos.margin = 0\\n    //   vault.margin += marginToVault + marginDiff\\n    //   required(enoughMarginRatio)\\n    // else if close\\n    //   marginDiff = realizedFundingPayment + realizedPnl\\n    //   pos.margin += marginDiff\\n    //   if pos.margin < 0, badDebt = abs(pos.margin)\\n    //   marginToVault = -pos.margin\\n    //   set pos.margin = 0\\n    //   vault.margin += marginToVault + marginDiff\\n    // else if close and open a larger position in reverse side\\n    //   close()\\n    //   positionNotional -= exchangedQuoteAssetAmount\\n    //   newMargin = positionNotional / leverage\\n    //   internalIncreasePosition(newMargin, leverage)\\n    // else if liquidate\\n    //   close()\\n    //   pay liquidation fee to liquidator\\n    //   move the remain margin to insuranceFund\\n\\n    /**\\n     * @notice open a position\\n     * @param _amm amm address\\n     * @param _side enum Side; BUY for long and SELL for short\\n     * @param _quoteAssetAmount quote asset amount in 18 digits. Can Not be 0\\n     * @param _leverage leverage  in 18 digits. Can Not be 0\\n     * @param _baseAssetAmountLimit minimum base asset amount expected to get to prevent from slippage.\\n     */\\n    function openPosition(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit\\n    ) public whenNotPaused nonReentrant {\\n        requireAmm(_amm, true);\\n        IERC20 quoteToken = _amm.quoteAsset();\\n        requireValidTokenAmount(quoteToken, _quoteAssetAmount);\\n        requireNonZeroInput(_leverage);\\n        requireMoreMarginRatio(\\n            MixedDecimal.fromDecimal(Decimal.one()).divD(_leverage),\\n            initMarginRatio,\\n            true\\n        );\\n        requireNotRestrictionMode(_amm);\\n\\n        address trader = _msgSender();\\n        PositionResp memory positionResp;\\n        {\\n            // add scope for stack too deep error\\n            int256 oldPositionSize = getPosition(_amm, trader).size.toInt();\\n            bool isNewPosition = oldPositionSize == 0 ? true : false;\\n\\n            // increase or decrease position depends on old position's side and size\\n            if (isNewPosition || (oldPositionSize > 0 ? Side.BUY : Side.SELL) == _side) {\\n                positionResp = internalIncreasePosition(\\n                    _amm,\\n                    _side,\\n                    _quoteAssetAmount.mulD(_leverage),\\n                    _baseAssetAmountLimit,\\n                    _leverage\\n                );\\n            } else {\\n                positionResp = openReversePosition(\\n                    _amm,\\n                    _side,\\n                    trader,\\n                    _quoteAssetAmount,\\n                    _leverage,\\n                    _baseAssetAmountLimit,\\n                    false\\n                );\\n            }\\n\\n            // update the position state\\n            setPosition(_amm, trader, positionResp.position);\\n            // if opening the exact position size as the existing one == closePosition, can skip the margin ratio check\\n            if (!isNewPosition && positionResp.position.size.toInt() != 0) {\\n                requireMoreMarginRatio(getMarginRatio(_amm, trader), maintenanceMarginRatio, true);\\n            }\\n\\n            // to prevent attacker to leverage the bad debt to withdraw extra token from insurance fund\\n            require(positionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n            // transfer the actual token between trader and vault\\n            if (positionResp.marginToVault.toInt() > 0) {\\n                _transferFrom(quoteToken, trader, address(this), positionResp.marginToVault.abs());\\n            } else if (positionResp.marginToVault.toInt() < 0) {\\n                withdraw(quoteToken, trader, positionResp.marginToVault.abs());\\n            }\\n        }\\n\\n        // calculate fee and transfer token for fees\\n        //@audit - can optimize by changing amm.swapInput/swapOutput's return type to (exchangedAmount, quoteToll, quoteSpread, quoteReserve, baseReserve) (@wraecca)\\n        Decimal.decimal memory transferredFee = transferFee(\\n            trader,\\n            _amm,\\n            positionResp.exchangedQuoteAssetAmount\\n        );\\n\\n        // emit event\\n        uint256 spotPrice = _amm.getSpotPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt(); // pre-fetch for stack too deep error\\n        emit PositionChanged(\\n            trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            transferredFee.toUint(),\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            0,\\n            spotPrice,\\n            fundingPayment\\n        );\\n    }\\n\\n    /**\\n     * @notice close all the positions\\n     * @param _amm IAmm address\\n     */\\n    function closePosition(IAmm _amm, Decimal.decimal memory _quoteAssetAmountLimit)\\n        public\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check conditions\\n        requireAmm(_amm, true);\\n        requireNotRestrictionMode(_amm);\\n\\n        // update position\\n        address trader = _msgSender();\\n\\n        PositionResp memory positionResp;\\n        {\\n            Position memory position = getPosition(_amm, trader);\\n            // if it is long position, close a position means short it(which means base dir is ADD_TO_AMM) and vice versa\\n            IAmm.Dir dirOfBase = position.size.toInt() > 0\\n                ? IAmm.Dir.ADD_TO_AMM\\n                : IAmm.Dir.REMOVE_FROM_AMM;\\n\\n            // check if this position exceed fluctuation limit\\n            // if over fluctuation limit, then close partial position. Otherwise close all.\\n            // if partialLiquidationRatio is 1, then close whole position\\n            if (\\n                _amm.isOverFluctuationLimit(dirOfBase, position.size.abs()) &&\\n                partialLiquidationRatio.cmp(Decimal.one()) < 0\\n            ) {\\n                Decimal.decimal memory partiallyClosedPositionNotional = _amm.getOutputPrice(\\n                    dirOfBase,\\n                    position.size.mulD(partialLiquidationRatio).abs()\\n                );\\n\\n                positionResp = openReversePosition(\\n                    _amm,\\n                    position.size.toInt() > 0 ? Side.SELL : Side.BUY,\\n                    trader,\\n                    partiallyClosedPositionNotional,\\n                    Decimal.one(),\\n                    Decimal.zero(),\\n                    true\\n                );\\n                setPosition(_amm, trader, positionResp.position);\\n            } else {\\n                positionResp = internalClosePosition(_amm, trader, _quoteAssetAmountLimit);\\n            }\\n\\n            // to prevent attacker to leverage the bad debt to withdraw extra token from insurance fund\\n            require(positionResp.badDebt.toUint() == 0, \\\"bad debt\\\");\\n\\n            // add scope for stack too deep error\\n            // transfer the actual token from trader and vault\\n            IERC20 quoteToken = _amm.quoteAsset();\\n            withdraw(quoteToken, trader, positionResp.marginToVault.abs());\\n        }\\n\\n        // calculate fee and transfer token for fees\\n        Decimal.decimal memory transferredFee = transferFee(\\n            trader,\\n            _amm,\\n            positionResp.exchangedQuoteAssetAmount\\n        );\\n\\n        // prepare event\\n        uint256 spotPrice = _amm.getSpotPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt();\\n        emit PositionChanged(\\n            trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            transferredFee.toUint(),\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            0,\\n            spotPrice,\\n            fundingPayment\\n        );\\n    }\\n\\n    function liquidateWithSlippage(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) external nonReentrant returns (Decimal.decimal memory quoteAssetAmount, bool isPartialClose) {\\n        Position memory position = getPosition(_amm, _trader);\\n        (quoteAssetAmount, isPartialClose) = internalLiquidate(_amm, _trader);\\n\\n        Decimal.decimal memory quoteAssetAmountLimit = isPartialClose\\n            ? _quoteAssetAmountLimit.mulD(partialLiquidationRatio)\\n            : _quoteAssetAmountLimit;\\n\\n        if (position.size.toInt() > 0) {\\n            require(\\n                quoteAssetAmount.toUint() >= quoteAssetAmountLimit.toUint(),\\n                \\\"Less than minimal quote token\\\"\\n            );\\n        } else if (position.size.toInt() < 0 && quoteAssetAmountLimit.cmp(Decimal.zero()) != 0) {\\n            require(\\n                quoteAssetAmount.toUint() <= quoteAssetAmountLimit.toUint(),\\n                \\\"More than maximal quote token\\\"\\n            );\\n        }\\n\\n        return (quoteAssetAmount, isPartialClose);\\n    }\\n\\n    /**\\n     * @notice liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio\\n     * @dev liquidator can NOT open any positions in the same block to prevent from price manipulation.\\n     * @param _amm IAmm address\\n     * @param _trader trader address\\n     */\\n    function liquidate(IAmm _amm, address _trader) public nonReentrant {\\n        internalLiquidate(_amm, _trader);\\n    }\\n\\n    /**\\n     * @notice if funding rate is positive, traders with long position pay traders with short position and vice versa.\\n     * @param _amm IAmm address\\n     */\\n    function payFunding(IAmm _amm) external {\\n        requireAmm(_amm, true);\\n\\n        SignedDecimal.signedDecimal memory premiumFraction = _amm.settleFunding();\\n        ammMap[address(_amm)].cumulativePremiumFractions.push(\\n            premiumFraction.addD(getLatestCumulativePremiumFraction(_amm))\\n        );\\n\\n        // funding payment = premium fraction * position\\n        // eg. if alice takes 10 long position, totalPositionSize = 10\\n        // if premiumFraction is positive: long pay short, amm get positive funding payment\\n        // if premiumFraction is negative: short pay long, amm get negative funding payment\\n        // if totalPositionSize.side * premiumFraction > 0, funding payment is positive which means profit\\n        SignedDecimal.signedDecimal memory totalTraderPositionSize = _amm.getBaseAssetDelta();\\n        SignedDecimal.signedDecimal memory ammFundingPaymentProfit = premiumFraction.mulD(\\n            totalTraderPositionSize\\n        );\\n\\n        IERC20 quoteAsset = _amm.quoteAsset();\\n        if (ammFundingPaymentProfit.toInt() < 0) {\\n            insuranceFund.withdraw(quoteAsset, ammFundingPaymentProfit.abs());\\n        } else {\\n            transferToInsuranceFund(quoteAsset, ammFundingPaymentProfit.abs());\\n        }\\n    }\\n\\n    //\\n    // VIEW FUNCTIONS\\n    //\\n\\n    /**\\n     * @notice get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional\\n     * use spot and twap price to calculate unrealized Pnl, final unrealized Pnl depends on which one is higher\\n     * @param _amm IAmm address\\n     * @param _trader trader address\\n     * @return margin ratio in 18 digits\\n     */\\n    function getMarginRatio(IAmm _amm, address _trader)\\n        public\\n        view\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        Position memory position = getPosition(_amm, _trader);\\n        requirePositionSize(position.size);\\n        (\\n            SignedDecimal.signedDecimal memory unrealizedPnl,\\n            Decimal.decimal memory positionNotional\\n        ) = getPreferencePositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlPreferenceOption.MAX_PNL\\n            );\\n        return _getMarginRatio(_amm, position, unrealizedPnl, positionNotional);\\n    }\\n\\n    function _getMarginRatioByCalcOption(\\n        IAmm _amm,\\n        address _trader,\\n        PnlCalcOption _pnlCalcOption\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        Position memory position = getPosition(_amm, _trader);\\n        requirePositionSize(position.size);\\n        (\\n            Decimal.decimal memory positionNotional,\\n            SignedDecimal.signedDecimal memory pnl\\n        ) = getPositionNotionalAndUnrealizedPnl(_amm, _trader, _pnlCalcOption);\\n        return _getMarginRatio(_amm, position, pnl, positionNotional);\\n    }\\n\\n    function _getMarginRatio(\\n        IAmm _amm,\\n        Position memory _position,\\n        SignedDecimal.signedDecimal memory _unrealizedPnl,\\n        Decimal.decimal memory _positionNotional\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        (\\n            Decimal.decimal memory remainMargin,\\n            Decimal.decimal memory badDebt,\\n            ,\\n\\n        ) = calcRemainMarginWithFundingPayment(_amm, _position, _unrealizedPnl);\\n        return MixedDecimal.fromDecimal(remainMargin).subD(badDebt).divD(_positionNotional);\\n    }\\n\\n    /**\\n     * @notice get personal position information\\n     * @param _amm IAmm address\\n     * @param _trader trader address\\n     * @return struct Position\\n     */\\n    function getPosition(IAmm _amm, address _trader) public view returns (Position memory) {\\n        return ammMap[address(_amm)].positionMap[_trader];\\n    }\\n\\n    /**\\n     * @notice get position notional and unrealized Pnl without fee expense and funding payment\\n     * @param _amm IAmm address\\n     * @param _trader trader address\\n     * @param _pnlCalcOption enum PnlCalcOption, SPOT_PRICE for spot price and TWAP for twap price\\n     * @return positionNotional position notional\\n     * @return unrealizedPnl unrealized Pnl\\n     */\\n    function getPositionNotionalAndUnrealizedPnl(\\n        IAmm _amm,\\n        address _trader,\\n        PnlCalcOption _pnlCalcOption\\n    )\\n        public\\n        view\\n        returns (\\n            Decimal.decimal memory positionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        )\\n    {\\n        Position memory position = getPosition(_amm, _trader);\\n        Decimal.decimal memory positionSizeAbs = position.size.abs();\\n        if (positionSizeAbs.toUint() != 0) {\\n            bool isShortPosition = position.size.toInt() < 0;\\n            IAmm.Dir dir = isShortPosition ? IAmm.Dir.REMOVE_FROM_AMM : IAmm.Dir.ADD_TO_AMM;\\n            if (_pnlCalcOption == PnlCalcOption.TWAP) {\\n                positionNotional = _amm.getOutputTwap(dir, positionSizeAbs);\\n            } else if (_pnlCalcOption == PnlCalcOption.SPOT_PRICE) {\\n                positionNotional = _amm.getOutputPrice(dir, positionSizeAbs);\\n            } else {\\n                Decimal.decimal memory oraclePrice = _amm.getUnderlyingPrice();\\n                positionNotional = positionSizeAbs.mulD(oraclePrice);\\n            }\\n            // unrealizedPnlForLongPosition = positionNotional - openNotional\\n            // unrealizedPnlForShortPosition = positionNotionalWhenBorrowed - positionNotionalWhenReturned =\\n            // openNotional - positionNotional = unrealizedPnlForLongPosition * -1\\n            unrealizedPnl = isShortPosition\\n                ? MixedDecimal.fromDecimal(position.openNotional).subD(positionNotional)\\n                : MixedDecimal.fromDecimal(positionNotional).subD(position.openNotional);\\n        }\\n    }\\n\\n    /**\\n     * @notice get latest cumulative premium fraction.\\n     * @param _amm IAmm address\\n     * @return latest cumulative premium fraction in 18 digits\\n     */\\n    function getLatestCumulativePremiumFraction(IAmm _amm)\\n        public\\n        view\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        uint256 len = ammMap[address(_amm)].cumulativePremiumFractions.length;\\n        if (len > 0) {\\n            return ammMap[address(_amm)].cumulativePremiumFractions[len - 1];\\n        }\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n\\n    function enterRestrictionMode(IAmm _amm) internal {\\n        uint256 blockNumber = _blockNumber();\\n        ammMap[address(_amm)].lastRestrictionBlock = blockNumber;\\n        emit RestrictionModeEntered(address(_amm), blockNumber);\\n    }\\n\\n    function setPosition(\\n        IAmm _amm,\\n        address _trader,\\n        Position memory _position\\n    ) internal {\\n        Position storage positionStorage = ammMap[address(_amm)].positionMap[_trader];\\n        positionStorage.size = _position.size;\\n        positionStorage.margin = _position.margin;\\n        positionStorage.openNotional = _position.openNotional;\\n        positionStorage.lastUpdatedCumulativePremiumFraction = _position\\n            .lastUpdatedCumulativePremiumFraction;\\n        positionStorage.blockNumber = _position.blockNumber;\\n        positionStorage.liquidityHistoryIndex = _position.liquidityHistoryIndex;\\n    }\\n\\n    function clearPosition(IAmm _amm, address _trader) internal {\\n        // keep the record in order to retain the last updated block number\\n        ammMap[address(_amm)].positionMap[_trader] = Position({\\n            size: SignedDecimal.zero(),\\n            margin: Decimal.zero(),\\n            openNotional: Decimal.zero(),\\n            lastUpdatedCumulativePremiumFraction: SignedDecimal.zero(),\\n            blockNumber: _blockNumber(),\\n            liquidityHistoryIndex: 0\\n        });\\n    }\\n\\n    function internalLiquidate(IAmm _amm, address _trader)\\n        internal\\n        returns (Decimal.decimal memory quoteAssetAmount, bool isPartialClose)\\n    {\\n        requireAmm(_amm, true);\\n        SignedDecimal.signedDecimal memory marginRatio = getMarginRatio(_amm, _trader);\\n\\n        // including oracle-based margin ratio as reference price when amm is over spread limit\\n        if (_amm.isOverSpreadLimit()) {\\n            SignedDecimal.signedDecimal\\n                memory marginRatioBasedOnOracle = _getMarginRatioByCalcOption(\\n                    _amm,\\n                    _trader,\\n                    PnlCalcOption.ORACLE\\n                );\\n            if (marginRatioBasedOnOracle.subD(marginRatio).toInt() > 0) {\\n                marginRatio = marginRatioBasedOnOracle;\\n            }\\n        }\\n        requireMoreMarginRatio(marginRatio, maintenanceMarginRatio, false);\\n\\n        PositionResp memory positionResp;\\n        Decimal.decimal memory liquidationPenalty;\\n        {\\n            Decimal.decimal memory liquidationBadDebt;\\n            Decimal.decimal memory feeToLiquidator;\\n            Decimal.decimal memory feeToInsuranceFund;\\n            IERC20 quoteAsset = _amm.quoteAsset();\\n\\n            int256 marginRatioBasedOnSpot = _getMarginRatioByCalcOption(\\n                _amm,\\n                _trader,\\n                PnlCalcOption.SPOT_PRICE\\n            ).toInt();\\n            if (\\n                // check margin(based on spot price) is enough to pay the liquidation fee\\n                // after partially close, otherwise we fully close the position.\\n                // that also means we can ensure no bad debt happen when partially liquidate\\n                marginRatioBasedOnSpot > int256(liquidationFeeRatio.toUint()) &&\\n                partialLiquidationRatio.cmp(Decimal.one()) < 0 &&\\n                partialLiquidationRatio.toUint() != 0\\n            ) {\\n                Position memory position = getPosition(_amm, _trader);\\n                Decimal.decimal memory partiallyLiquidatedPositionNotional = _amm.getOutputPrice(\\n                    position.size.toInt() > 0 ? IAmm.Dir.ADD_TO_AMM : IAmm.Dir.REMOVE_FROM_AMM,\\n                    position.size.mulD(partialLiquidationRatio).abs()\\n                );\\n\\n                positionResp = openReversePosition(\\n                    _amm,\\n                    position.size.toInt() > 0 ? Side.SELL : Side.BUY,\\n                    _trader,\\n                    partiallyLiquidatedPositionNotional,\\n                    Decimal.one(),\\n                    Decimal.zero(),\\n                    true\\n                );\\n\\n                // half of the liquidationFee goes to liquidator & another half goes to insurance fund\\n                liquidationPenalty = positionResp.exchangedQuoteAssetAmount.mulD(\\n                    liquidationFeeRatio\\n                );\\n                feeToLiquidator = liquidationPenalty.divScalar(2);\\n                feeToInsuranceFund = liquidationPenalty.subD(feeToLiquidator);\\n\\n                positionResp.position.margin = positionResp.position.margin.subD(\\n                    liquidationPenalty\\n                );\\n                setPosition(_amm, _trader, positionResp.position);\\n\\n                isPartialClose = true;\\n            } else {\\n                liquidationPenalty = getPosition(_amm, _trader).margin;\\n                positionResp = internalClosePosition(_amm, _trader, Decimal.zero());\\n                Decimal.decimal memory remainMargin = positionResp.marginToVault.abs();\\n                feeToLiquidator = positionResp\\n                    .exchangedQuoteAssetAmount\\n                    .mulD(liquidationFeeRatio)\\n                    .divScalar(2);\\n\\n                // if the remainMargin is not enough for liquidationFee, count it as bad debt\\n                // else, then the rest will be transferred to insuranceFund\\n                Decimal.decimal memory totalBadDebt = positionResp.badDebt;\\n                if (feeToLiquidator.toUint() > remainMargin.toUint()) {\\n                    liquidationBadDebt = feeToLiquidator.subD(remainMargin);\\n                    totalBadDebt = totalBadDebt.addD(liquidationBadDebt);\\n                } else {\\n                    remainMargin = remainMargin.subD(feeToLiquidator);\\n                }\\n\\n                // transfer the actual token between trader and vault\\n                if (totalBadDebt.toUint() > 0) {\\n                    require(backstopLiquidityProviderMap[_msgSender()], \\\"not backstop LP\\\");\\n                    realizeBadDebt(quoteAsset, totalBadDebt);\\n                }\\n                if (remainMargin.toUint() > 0) {\\n                    feeToInsuranceFund = remainMargin;\\n                }\\n            }\\n\\n            if (feeToInsuranceFund.toUint() > 0) {\\n                transferToInsuranceFund(quoteAsset, feeToInsuranceFund);\\n            }\\n            withdraw(quoteAsset, _msgSender(), feeToLiquidator);\\n            enterRestrictionMode(_amm);\\n\\n            emit PositionLiquidated(\\n                _trader,\\n                address(_amm),\\n                positionResp.exchangedQuoteAssetAmount.toUint(),\\n                positionResp.exchangedPositionSize.toUint(),\\n                feeToLiquidator.toUint(),\\n                _msgSender(),\\n                liquidationBadDebt.toUint()\\n            );\\n        }\\n\\n        // emit event\\n        uint256 spotPrice = _amm.getSpotPrice().toUint();\\n        int256 fundingPayment = positionResp.fundingPayment.toInt();\\n        emit PositionChanged(\\n            _trader,\\n            address(_amm),\\n            positionResp.position.margin.toUint(),\\n            positionResp.exchangedQuoteAssetAmount.toUint(),\\n            positionResp.exchangedPositionSize.toInt(),\\n            0,\\n            positionResp.position.size.toInt(),\\n            positionResp.realizedPnl.toInt(),\\n            positionResp.unrealizedPnlAfter.toInt(),\\n            positionResp.badDebt.toUint(),\\n            liquidationPenalty.toUint(),\\n            spotPrice,\\n            fundingPayment\\n        );\\n\\n        return (positionResp.exchangedQuoteAssetAmount, isPartialClose);\\n    }\\n\\n    // only called from openPosition and closeAndOpenReversePosition. caller need to ensure there's enough marginRatio\\n    function internalIncreasePosition(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _openNotional,\\n        Decimal.decimal memory _minPositionSize,\\n        Decimal.decimal memory _leverage\\n    ) internal returns (PositionResp memory positionResp) {\\n        address trader = _msgSender();\\n        Position memory oldPosition = getPosition(_amm, trader);\\n        positionResp.exchangedPositionSize = swapInput(\\n            _amm,\\n            _side,\\n            _openNotional,\\n            _minPositionSize,\\n            false\\n        );\\n        SignedDecimal.signedDecimal memory newSize = oldPosition.size.addD(\\n            positionResp.exchangedPositionSize\\n        );\\n\\n        updateOpenInterestNotional(_amm, MixedDecimal.fromDecimal(_openNotional));\\n        // if the trader is not in the whitelist, check max position size\\n        if (trader != whitelist) {\\n            Decimal.decimal memory maxHoldingBaseAsset = _amm.getMaxHoldingBaseAsset();\\n            if (maxHoldingBaseAsset.toUint() > 0) {\\n                // total position size should be less than `positionUpperBound`\\n                require(\\n                    newSize.abs().cmp(maxHoldingBaseAsset) <= 0,\\n                    \\\"hit position size upper bound\\\"\\n                );\\n            }\\n        }\\n\\n        SignedDecimal.signedDecimal memory increaseMarginRequirement = MixedDecimal.fromDecimal(\\n            _openNotional.divD(_leverage)\\n        );\\n        (\\n            Decimal.decimal memory remainMargin, // the 2nd return (bad debt) must be 0 - already checked from caller\\n            ,\\n            SignedDecimal.signedDecimal memory fundingPayment,\\n            SignedDecimal.signedDecimal memory latestCumulativePremiumFraction\\n        ) = calcRemainMarginWithFundingPayment(_amm, oldPosition, increaseMarginRequirement);\\n\\n        (, SignedDecimal.signedDecimal memory unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(\\n            _amm,\\n            trader,\\n            PnlCalcOption.SPOT_PRICE\\n        );\\n\\n        // update positionResp\\n        positionResp.exchangedQuoteAssetAmount = _openNotional;\\n        positionResp.unrealizedPnlAfter = unrealizedPnl;\\n        positionResp.marginToVault = increaseMarginRequirement;\\n        positionResp.fundingPayment = fundingPayment;\\n        positionResp.position = Position(\\n            newSize,\\n            remainMargin,\\n            oldPosition.openNotional.addD(positionResp.exchangedQuoteAssetAmount),\\n            latestCumulativePremiumFraction,\\n            oldPosition.liquidityHistoryIndex,\\n            _blockNumber()\\n        );\\n    }\\n\\n    function openReversePosition(\\n        IAmm _amm,\\n        Side _side,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) internal returns (PositionResp memory) {\\n        Decimal.decimal memory openNotional = _quoteAssetAmount.mulD(_leverage);\\n        (\\n            Decimal.decimal memory oldPositionNotional,\\n            SignedDecimal.signedDecimal memory unrealizedPnl\\n        ) = getPositionNotionalAndUnrealizedPnl(_amm, _trader, PnlCalcOption.SPOT_PRICE);\\n        PositionResp memory positionResp;\\n\\n        // reduce position if old position is larger\\n        if (oldPositionNotional.toUint() > openNotional.toUint()) {\\n            updateOpenInterestNotional(_amm, MixedDecimal.fromDecimal(openNotional).mulScalar(-1));\\n            Position memory oldPosition = getPosition(_amm, _trader);\\n            positionResp.exchangedPositionSize = swapInput(\\n                _amm,\\n                _side,\\n                openNotional,\\n                _baseAssetAmountLimit,\\n                _canOverFluctuationLimit\\n            );\\n\\n            // realizedPnl = unrealizedPnl * closedRatio\\n            // closedRatio = positionResp.exchangedPositionSiz / oldPosition.size\\n            if (oldPosition.size.toInt() != 0) {\\n                positionResp.realizedPnl = unrealizedPnl\\n                    .mulD(positionResp.exchangedPositionSize.abs())\\n                    .divD(oldPosition.size.abs());\\n            }\\n            Decimal.decimal memory remainMargin;\\n            SignedDecimal.signedDecimal memory latestCumulativePremiumFraction;\\n            (\\n                remainMargin,\\n                positionResp.badDebt,\\n                positionResp.fundingPayment,\\n                latestCumulativePremiumFraction\\n            ) = calcRemainMarginWithFundingPayment(_amm, oldPosition, positionResp.realizedPnl);\\n\\n            // positionResp.unrealizedPnlAfter = unrealizedPnl - realizedPnl\\n            positionResp.unrealizedPnlAfter = unrealizedPnl.subD(positionResp.realizedPnl);\\n            positionResp.exchangedQuoteAssetAmount = openNotional;\\n\\n            // calculate openNotional (it's different depends on long or short side)\\n            // long: unrealizedPnl = positionNotional - openNotional => openNotional = positionNotional - unrealizedPnl\\n            // short: unrealizedPnl = openNotional - positionNotional => openNotional = positionNotional + unrealizedPnl\\n            // positionNotional = oldPositionNotional - exchangedQuoteAssetAmount\\n            SignedDecimal.signedDecimal memory remainOpenNotional = oldPosition.size.toInt() > 0\\n                ? MixedDecimal\\n                    .fromDecimal(oldPositionNotional)\\n                    .subD(positionResp.exchangedQuoteAssetAmount)\\n                    .subD(positionResp.unrealizedPnlAfter)\\n                : positionResp.unrealizedPnlAfter.addD(oldPositionNotional).subD(\\n                    positionResp.exchangedQuoteAssetAmount\\n                );\\n            require(remainOpenNotional.toInt() > 0, \\\"value of openNotional <= 0\\\");\\n\\n            positionResp.position = Position(\\n                oldPosition.size.addD(positionResp.exchangedPositionSize),\\n                remainMargin,\\n                remainOpenNotional.abs(),\\n                latestCumulativePremiumFraction,\\n                oldPosition.liquidityHistoryIndex,\\n                _blockNumber()\\n            );\\n            return positionResp;\\n        }\\n\\n        return\\n            closeAndOpenReversePosition(\\n                _amm,\\n                _side,\\n                _trader,\\n                _quoteAssetAmount,\\n                _leverage,\\n                _baseAssetAmountLimit\\n            );\\n    }\\n\\n    function closeAndOpenReversePosition(\\n        IAmm _amm,\\n        Side _side,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _leverage,\\n        Decimal.decimal memory _baseAssetAmountLimit\\n    ) internal returns (PositionResp memory positionResp) {\\n        // new position size is larger than or equal to the old position size\\n        // so either close or close then open a larger position\\n        PositionResp memory closePositionResp = internalClosePosition(\\n            _amm,\\n            _trader,\\n            Decimal.zero()\\n        );\\n\\n        // the old position is underwater. trader should close a position first\\n        require(closePositionResp.badDebt.toUint() == 0, \\\"reduce an underwater position\\\");\\n\\n        // update open notional after closing position\\n        Decimal.decimal memory openNotional = _quoteAssetAmount.mulD(_leverage).subD(\\n            closePositionResp.exchangedQuoteAssetAmount\\n        );\\n\\n        // if remain exchangedQuoteAssetAmount is too small (eg. 1wei) then the required margin might be 0\\n        // then the clearingHouse will stop opening position\\n        if (openNotional.divD(_leverage).toUint() == 0) {\\n            positionResp = closePositionResp;\\n        } else {\\n            Decimal.decimal memory updatedBaseAssetAmountLimit;\\n            if (_baseAssetAmountLimit.toUint() > closePositionResp.exchangedPositionSize.toUint()) {\\n                updatedBaseAssetAmountLimit = _baseAssetAmountLimit.subD(\\n                    closePositionResp.exchangedPositionSize.abs()\\n                );\\n            }\\n\\n            PositionResp memory increasePositionResp = internalIncreasePosition(\\n                _amm,\\n                _side,\\n                openNotional,\\n                updatedBaseAssetAmountLimit,\\n                _leverage\\n            );\\n            positionResp = PositionResp({\\n                position: increasePositionResp.position,\\n                exchangedQuoteAssetAmount: closePositionResp.exchangedQuoteAssetAmount.addD(\\n                    increasePositionResp.exchangedQuoteAssetAmount\\n                ),\\n                badDebt: closePositionResp.badDebt.addD(increasePositionResp.badDebt),\\n                fundingPayment: closePositionResp.fundingPayment.addD(\\n                    increasePositionResp.fundingPayment\\n                ),\\n                exchangedPositionSize: closePositionResp.exchangedPositionSize.addD(\\n                    increasePositionResp.exchangedPositionSize\\n                ),\\n                realizedPnl: closePositionResp.realizedPnl.addD(increasePositionResp.realizedPnl),\\n                unrealizedPnlAfter: SignedDecimal.zero(),\\n                marginToVault: closePositionResp.marginToVault.addD(\\n                    increasePositionResp.marginToVault\\n                )\\n            });\\n        }\\n        return positionResp;\\n    }\\n\\n    function internalClosePosition(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _quoteAssetAmountLimit\\n    ) private returns (PositionResp memory positionResp) {\\n        // check conditions\\n        Position memory oldPosition = getPosition(_amm, _trader);\\n        requirePositionSize(oldPosition.size);\\n\\n        (, SignedDecimal.signedDecimal memory unrealizedPnl) = getPositionNotionalAndUnrealizedPnl(\\n            _amm,\\n            _trader,\\n            PnlCalcOption.SPOT_PRICE\\n        );\\n        (\\n            Decimal.decimal memory remainMargin,\\n            Decimal.decimal memory badDebt,\\n            SignedDecimal.signedDecimal memory fundingPayment,\\n\\n        ) = calcRemainMarginWithFundingPayment(_amm, oldPosition, unrealizedPnl);\\n\\n        positionResp.exchangedPositionSize = oldPosition.size.mulScalar(-1);\\n        positionResp.realizedPnl = unrealizedPnl;\\n        positionResp.badDebt = badDebt;\\n        positionResp.fundingPayment = fundingPayment;\\n        positionResp.marginToVault = MixedDecimal.fromDecimal(remainMargin).mulScalar(-1);\\n        // for amm.swapOutput, the direction is in base asset, from the perspective of Amm\\n        positionResp.exchangedQuoteAssetAmount = _amm.swapOutput(\\n            oldPosition.size.toInt() > 0 ? IAmm.Dir.ADD_TO_AMM : IAmm.Dir.REMOVE_FROM_AMM,\\n            oldPosition.size.abs(),\\n            _quoteAssetAmountLimit\\n        );\\n\\n        // bankrupt position's bad debt will be also consider as a part of the open interest\\n        updateOpenInterestNotional(\\n            _amm,\\n            unrealizedPnl.addD(badDebt).addD(oldPosition.openNotional).mulScalar(-1)\\n        );\\n        clearPosition(_amm, _trader);\\n    }\\n\\n    function swapInput(\\n        IAmm _amm,\\n        Side _side,\\n        Decimal.decimal memory _inputAmount,\\n        Decimal.decimal memory _minOutputAmount,\\n        bool _canOverFluctuationLimit\\n    ) internal returns (SignedDecimal.signedDecimal memory) {\\n        // for amm.swapInput, the direction is in quote asset, from the perspective of Amm\\n        IAmm.Dir dir = (_side == Side.BUY) ? IAmm.Dir.ADD_TO_AMM : IAmm.Dir.REMOVE_FROM_AMM;\\n        SignedDecimal.signedDecimal memory outputAmount = MixedDecimal.fromDecimal(\\n            _amm.swapInput(dir, _inputAmount, _minOutputAmount, _canOverFluctuationLimit)\\n        );\\n        if (IAmm.Dir.REMOVE_FROM_AMM == dir) {\\n            return outputAmount.mulScalar(-1);\\n        }\\n        return outputAmount;\\n    }\\n\\n    function transferFee(\\n        address _from,\\n        IAmm _amm,\\n        Decimal.decimal memory _positionNotional\\n    ) internal returns (Decimal.decimal memory) {\\n        // the logic of toll fee can be removed if the bytecode size is too large\\n        (Decimal.decimal memory toll, Decimal.decimal memory spread) = _amm.calcFee(\\n            _positionNotional\\n        );\\n        bool hasToll = toll.toUint() > 0;\\n        bool hasSpread = spread.toUint() > 0;\\n        if (hasToll || hasSpread) {\\n            IERC20 quoteAsset = _amm.quoteAsset();\\n\\n            // transfer spread to insurance fund\\n            if (hasSpread) {\\n                _transferFrom(quoteAsset, _from, address(insuranceFund), spread);\\n            }\\n\\n            // transfer toll to feePool\\n            if (hasToll) {\\n                require(address(feePool) != address(0), \\\"Invalid feePool\\\");\\n                _transferFrom(quoteAsset, _from, address(feePool), toll);\\n                feePool.notifyTokenAmount(quoteAsset, toll);\\n            }\\n\\n            // fee = spread + toll\\n            return toll.addD(spread);\\n        }\\n    }\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _receiver,\\n        Decimal.decimal memory _amount\\n    ) internal {\\n        // if withdraw amount is larger than entire balance of vault\\n        // means this trader's profit comes from other under collateral position's future loss\\n        // and the balance of entire vault is not enough\\n        // need money from IInsuranceFund to pay first, and record this prepaidBadDebt\\n        // in this case, insurance fund loss must be zero\\n        Decimal.decimal memory totalTokenBalance = _balanceOf(_token, address(this));\\n        if (totalTokenBalance.toUint() < _amount.toUint()) {\\n            Decimal.decimal memory balanceShortage = _amount.subD(totalTokenBalance);\\n            prepaidBadDebt[address(_token)] = prepaidBadDebt[address(_token)].addD(balanceShortage);\\n            insuranceFund.withdraw(_token, balanceShortage);\\n        }\\n\\n        _transfer(_token, _receiver, _amount);\\n    }\\n\\n    function realizeBadDebt(IERC20 _token, Decimal.decimal memory _badDebt) internal {\\n        Decimal.decimal memory badDebtBalance = prepaidBadDebt[address(_token)];\\n        if (badDebtBalance.toUint() > _badDebt.toUint()) {\\n            // no need to move extra tokens because vault already prepay bad debt, only need to update the numbers\\n            prepaidBadDebt[address(_token)] = badDebtBalance.subD(_badDebt);\\n        } else {\\n            // in order to realize all the bad debt vault need extra tokens from insuranceFund\\n            insuranceFund.withdraw(_token, _badDebt.subD(badDebtBalance));\\n            prepaidBadDebt[address(_token)] = Decimal.zero();\\n        }\\n    }\\n\\n    function transferToInsuranceFund(IERC20 _token, Decimal.decimal memory _amount) internal {\\n        Decimal.decimal memory totalTokenBalance = _balanceOf(_token, address(this));\\n        _transfer(\\n            _token,\\n            address(insuranceFund),\\n            totalTokenBalance.toUint() < _amount.toUint() ? totalTokenBalance : _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev assume this will be removes soon once the guarded period has ended. caller need to ensure amm exist\\n     */\\n    function updateOpenInterestNotional(IAmm _amm, SignedDecimal.signedDecimal memory _amount)\\n        internal\\n    {\\n        // when cap = 0 means no cap\\n        uint256 cap = _amm.getOpenInterestNotionalCap().toUint();\\n        address ammAddr = address(_amm);\\n        if (cap > 0) {\\n            SignedDecimal.signedDecimal memory updatedOpenInterestNotional = _amount.addD(\\n                openInterestNotionalMap[ammAddr]\\n            );\\n            // the reduced open interest can be larger than total when profit is too high and other position are bankrupt\\n            if (updatedOpenInterestNotional.toInt() < 0) {\\n                updatedOpenInterestNotional = SignedDecimal.zero();\\n            }\\n            if (_amount.toInt() > 0) {\\n                // whitelist won't be restrict by open interest cap\\n                require(\\n                    updatedOpenInterestNotional.toUint() <= cap || _msgSender() == whitelist,\\n                    \\\"over limit\\\"\\n                );\\n            }\\n            openInterestNotionalMap[ammAddr] = updatedOpenInterestNotional.abs();\\n        }\\n    }\\n\\n    //\\n    // INTERNAL VIEW FUNCTIONS\\n    //\\n\\n    function calcRemainMarginWithFundingPayment(\\n        IAmm _amm,\\n        Position memory _oldPosition,\\n        SignedDecimal.signedDecimal memory _marginDelta\\n    )\\n        private\\n        view\\n        returns (\\n            Decimal.decimal memory remainMargin,\\n            Decimal.decimal memory badDebt,\\n            SignedDecimal.signedDecimal memory fundingPayment,\\n            SignedDecimal.signedDecimal memory latestCumulativePremiumFraction\\n        )\\n    {\\n        // calculate funding payment\\n        latestCumulativePremiumFraction = getLatestCumulativePremiumFraction(_amm);\\n        if (_oldPosition.size.toInt() != 0) {\\n            fundingPayment = latestCumulativePremiumFraction\\n                .subD(_oldPosition.lastUpdatedCumulativePremiumFraction)\\n                .mulD(_oldPosition.size);\\n        }\\n\\n        // calculate remain margin\\n        SignedDecimal.signedDecimal memory signedRemainMargin = _marginDelta\\n            .subD(fundingPayment)\\n            .addD(_oldPosition.margin);\\n\\n        // if remain margin is negative, set to zero and leave the rest to bad debt\\n        if (signedRemainMargin.toInt() < 0) {\\n            badDebt = signedRemainMargin.abs();\\n        } else {\\n            remainMargin = signedRemainMargin.abs();\\n        }\\n    }\\n\\n    /// @param _marginWithFundingPayment margin + funding payment - bad debt\\n    function calcFreeCollateral(\\n        IAmm _amm,\\n        address _trader,\\n        Decimal.decimal memory _marginWithFundingPayment\\n    ) internal view returns (SignedDecimal.signedDecimal memory) {\\n        Position memory pos = getPosition(_amm, _trader);\\n        (\\n            SignedDecimal.signedDecimal memory unrealizedPnl,\\n            Decimal.decimal memory positionNotional\\n        ) = getPreferencePositionNotionalAndUnrealizedPnl(\\n                _amm,\\n                _trader,\\n                PnlPreferenceOption.MIN_PNL\\n            );\\n\\n        // min(margin + funding, margin + funding + unrealized PnL) - position value * initMarginRatio\\n        SignedDecimal.signedDecimal memory accountValue = unrealizedPnl.addD(\\n            _marginWithFundingPayment\\n        );\\n        SignedDecimal.signedDecimal memory minCollateral = unrealizedPnl.toInt() > 0\\n            ? MixedDecimal.fromDecimal(_marginWithFundingPayment)\\n            : accountValue;\\n\\n        // margin requirement\\n        // if holding a long position, using open notional (mapping to quote debt in Curie)\\n        // if holding a short position, using position notional (mapping to base debt in Curie)\\n        SignedDecimal.signedDecimal memory marginRequirement = pos.size.toInt() > 0\\n            ? MixedDecimal.fromDecimal(pos.openNotional).mulD(initMarginRatio)\\n            : MixedDecimal.fromDecimal(positionNotional).mulD(initMarginRatio);\\n\\n        return minCollateral.subD(marginRequirement);\\n    }\\n\\n    function getPreferencePositionNotionalAndUnrealizedPnl(\\n        IAmm _amm,\\n        address _trader,\\n        PnlPreferenceOption _pnlPreference\\n    )\\n        internal\\n        view\\n        returns (\\n            SignedDecimal.signedDecimal memory unrealizedPnl,\\n            Decimal.decimal memory positionNotional\\n        )\\n    {\\n        (\\n            Decimal.decimal memory spotPositionNotional,\\n            SignedDecimal.signedDecimal memory spotPricePnl\\n        ) = (getPositionNotionalAndUnrealizedPnl(_amm, _trader, PnlCalcOption.SPOT_PRICE));\\n        (\\n            Decimal.decimal memory twapPositionNotional,\\n            SignedDecimal.signedDecimal memory twapPricePnl\\n        ) = (getPositionNotionalAndUnrealizedPnl(_amm, _trader, PnlCalcOption.TWAP));\\n\\n        // if MAX_PNL\\n        //    spotPnL >  twapPnL return (spotPnL, spotPositionNotional)\\n        //    spotPnL <= twapPnL return (twapPnL, twapPositionNotional)\\n        // if MIN_PNL\\n        //    spotPnL >  twapPnL return (twapPnL, twapPositionNotional)\\n        //    spotPnL <= twapPnL return (spotPnL, spotPositionNotional)\\n        (unrealizedPnl, positionNotional) = (_pnlPreference == PnlPreferenceOption.MAX_PNL) ==\\n            (spotPricePnl.toInt() > twapPricePnl.toInt())\\n            ? (spotPricePnl, spotPositionNotional)\\n            : (twapPricePnl, twapPositionNotional);\\n    }\\n\\n    function getUnadjustedPosition(IAmm _amm, address _trader)\\n        public\\n        view\\n        returns (Position memory position)\\n    {\\n        position = ammMap[address(_amm)].positionMap[_trader];\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(BaseRelayRecipient, ContextUpgradeSafe)\\n        returns (address payable)\\n    {\\n        return super._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(BaseRelayRecipient, ContextUpgradeSafe)\\n        returns (bytes memory ret)\\n    {\\n        return super._msgData();\\n    }\\n\\n    //\\n    // REQUIRE FUNCTIONS\\n    //\\n    function requireAmm(IAmm _amm, bool _open) private view {\\n        require(insuranceFund.isExistedAmm(_amm), \\\"amm not found\\\");\\n        require(_open == _amm.open(), _open ? \\\"amm was closed\\\" : \\\"amm is open\\\");\\n    }\\n\\n    function requireNonZeroInput(Decimal.decimal memory _decimal) private pure {\\n        require(_decimal.toUint() != 0, \\\"input is 0\\\");\\n    }\\n\\n    function requirePositionSize(SignedDecimal.signedDecimal memory _size) private pure {\\n        require(_size.toInt() != 0, \\\"positionSize is 0\\\");\\n    }\\n\\n    function requireValidTokenAmount(IERC20 _token, Decimal.decimal memory _decimal) private view {\\n        require(_toUint(_token, _decimal) != 0, \\\"invalid token amount\\\");\\n    }\\n\\n    function requireNotRestrictionMode(IAmm _amm) private view {\\n        uint256 currentBlock = _blockNumber();\\n        if (currentBlock == ammMap[address(_amm)].lastRestrictionBlock) {\\n            require(\\n                getPosition(_amm, _msgSender()).blockNumber != currentBlock,\\n                \\\"only one action allowed\\\"\\n            );\\n        }\\n    }\\n\\n    function requireMoreMarginRatio(\\n        SignedDecimal.signedDecimal memory _marginRatio,\\n        Decimal.decimal memory _baseMarginRatio,\\n        bool _largerThanOrEqualTo\\n    ) private pure {\\n        int256 remainingMarginRatio = _marginRatio.subD(_baseMarginRatio).toInt();\\n        require(\\n            _largerThanOrEqualTo ? remainingMarginRatio >= 0 : remainingMarginRatio < 0,\\n            \\\"Margin ratio not meet criteria\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x23d19b5f50f8c020ac1859b048733ac27d2a4fee88ac96eaeb70a329780a0d52\",\"license\":\"GPL-3.0-or-later\"},\"contracts/OwnerPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport { PausableUpgradeSafe } from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\\\";\\nimport { IfnxFiOwnableUpgrade } from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\n\\ncontract OwnerPausableUpgradeSafe is IfnxFiOwnableUpgrade, PausableUpgradeSafe {\\n    // solhint-disable func-name-mixedcase\\n    function __OwnerPausable_init() internal initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7b76822639cda35c89377f290f1537bee31d154f277b67de3795d55a0d0e9613\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct LiquidityChangedSnapshot {\\n        SignedDecimal.signedDecimal cumulativeNotional;\\n        // the base/quote reserve of amm right before liquidity changed\\n        Decimal.decimal quoteAssetReserve;\\n        Decimal.decimal baseAssetReserve;\\n        // total position size owned by amm after last snapshot taken\\n        // `totalPositionSize` = currentBaseAssetReserve - lastLiquidityChangedHistoryItem.baseAssetReserve + prevTotalPositionSize\\n        SignedDecimal.signedDecimal totalPositionSize;\\n    }\\n\\n    function swapInput(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function shutdown() external;\\n\\n    function settleFunding() external returns (SignedDecimal.signedDecimal memory);\\n\\n    function calcFee(Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function isOverFluctuationLimit(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calcBaseAssetAfterLiquidityMigration(\\n        SignedDecimal.signedDecimal memory _baseAssetAmount,\\n        Decimal.decimal memory _fromQuoteReserve,\\n        Decimal.decimal memory _fromBaseReserve\\n    ) external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getInputTwap(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPrice(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getSpotPrice() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityHistoryLength() external view returns (uint256);\\n\\n    // overridden by state variable\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    // can not be overridden by state variable due to type `Deciaml.decimal`\\n    function getSettlementPrice() external view returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDeltaThisFundingPeriod()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getMaxHoldingBaseAsset() external view returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityChangedSnapshots(uint256 i)\\n        external\\n        view\\n        returns (LiquidityChangedSnapshot memory);\\n\\n    function getBaseAssetDelta() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getUnderlyingPrice() external view returns (Decimal.decimal memory);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d5f998a5439e3776cc385cc68d32bd72b020e31037c025d1372c6bc0a4d768\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IAmm} from \\\"./IAmm.sol\\\";\\n\\ninterface IInsuranceFund {\\n    function withdraw(IERC20 _quoteToken, Decimal.decimal calldata _amount) external;\\n\\n    function isExistedAmm(IAmm _amm) external view returns (bool);\\n\\n    function getAllAmms() external view returns (IAmm[] memory);\\n}\\n\",\"keccak256\":\"0x69fa2d9a8cd1199229de1de72230673f5941b85eeb08806b0d038b2d05d81a5d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMultiTokenRewardRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMultiTokenRewardRecipient {\\n    function notifyTokenAmount(IERC20 _token, Decimal.decimal calldata _amount) external;\\n}\\n\",\"keccak256\":\"0x349a3fe87e74c99d9ef9143181108caaaace02ac9c78273a132716ea59353e1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nabstract contract DecimalERC20 {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // INTERNAL functions\\n    //\\n\\n    // CAUTION: do not input _from == _to s.t. this function will always fail\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transfer failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(IERC20 _token, address _owner)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(IERC20 _token) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(IERC20 _token, uint256 _number)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number.div(10**(tokenDecimals.sub(18))));\\n        }\\n\\n        return Decimal.decimal(_number.mul(10**(uint256(18).sub(tokenDecimals))));\\n    }\\n\\n    function _toUint(IERC20 _token, Decimal.decimal memory _decimal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint().mul(10**(tokenDecimals.sub(18)));\\n        }\\n        return _decimal.toUint().div(10**(uint256(18).sub(tokenDecimals)));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"DecimalERC20: get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.approve.selector, _spender, _toUint(_token, _value))\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"DecimalERC20: balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf97ccdfa07abeda868c8cc6bf80035cf6a4c5c0aa972ffd9bc7fe5f6c62e5170\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MixedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./SignedDecimal.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev To handle a signedDecimal add/sub/mul/div a decimal and provide convert decimal to signedDecimal helper\\nlibrary MixedDecimal {\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using SignedSafeMath for int256;\\n\\n    uint256 private constant _INT256_MAX = 2**255 - 1;\\n    string private constant ERROR_NON_CONVERTIBLE =\\n        \\\"MixedDecimal: uint value is bigger than _INT256_MAX\\\";\\n\\n    modifier convertible(Decimal.decimal memory x) {\\n        require(_INT256_MAX >= x.d, ERROR_NON_CONVERTIBLE);\\n        _;\\n    }\\n\\n    function fromDecimal(Decimal.decimal memory x)\\n        internal\\n        pure\\n        convertible(x)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return SignedDecimal.signedDecimal(int256(x.d));\\n    }\\n\\n    function toUint(SignedDecimal.signedDecimal memory x) internal pure returns (uint256) {\\n        return x.abs().d;\\n    }\\n\\n    /// @dev add SignedDecimal.signedDecimal and Decimal.decimal, using SignedSafeMath directly\\n    function addD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.add(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev subtract SignedDecimal.signedDecimal by Decimal.decimal, using SignedSafeMath directly\\n    function subD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.sub(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by Decimal.decimal\\n    function mulD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by a uint256\\n    function mulScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulScalar(int256(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a Decimal.decimal\\n    function divD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a uint256\\n    function divScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divScalar(int256(y));\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xd761a7aee6c51a11d4e1575494085f253a65e6b86db58ec26c80766fed987de0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n    using SignedSafeMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(signedDecimal memory x) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xf5a874997ac59e59cc1176149e159a095977b145232507e8faa7bd0933d6e7f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    using SignedSafeMath for int256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x5fdb8310e8a1d7f2770179ff12515c0cfbbf83474a263ce316f4a4a9a7dda8b8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fb680620000216000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80638456cb591161013b578063ae2e933b116100b8578063cfe711031161007c578063cfe711031461049b578063da35a26f146104a3578063e57d5636146104b6578063e9a4019b146104be578063ea0a45f9146104d15761023d565b8063ae2e933b14610470578063b0ac5f2f14610478578063b33dc19014610242578063b79023031461048b578063bc5920ba146104935761023d565b80638bedf3bb116100ff5780638bedf3bb1461040e5780638da5cb5b1461042f57806390cf78e414610437578063a8c1b0bc1461044a578063ac06a96e1461045d5761023d565b80638456cb59146103ba578063854cff2f146103c2578063862c04e3146103d557806386b9d81f146103e8578063893d242d146103fb5761023d565b80633f4ba83a116101c95780636c1274461161018d5780636c1274461461037a5780636c8381f81461038d578063715018a6146103a25780637da0a877146103aa57806383acb48a146103b25761023d565b80633f4ba83a14610315578063486ff0cd1461031d578063572b6c05146103325780635c975abb146103525780636891397b1461035a5761023d565b8063203b378811610210578063203b3788146102a857806329c44f13146102bb57806330e2ae65146102dc57806336405257146102ef5780633e09fa10146103025761023d565b80630475db5a14610242578063090f05c21461026b57806313af40351461028057806319db222814610295575b600080fd5b610255610250366004615197565b6104e4565b6040516102629190615dd6565b60405180910390f35b610273610580565b6040516102629190615e49565b61029361028e366004615127565b610587565b005b6102936102a3366004615127565b610669565b6102936102b6366004615356565b6106c1565b6102ce6102c9366004615211565b61074f565b604051610262929190615e28565b6102936102ea3660046152c6565b6108b0565b6102936102fd366004615127565b610b30565b610293610310366004615127565b610db6565b61029361102f565b61032561106e565b60405161026291906154fc565b610345610340366004615127565b6110fd565b6040516102629190615460565b610345611115565b61036d610368366004615127565b61111f565b6040516102629190615e1e565b610293610388366004615356565b61119d565b610395611213565b604051610262919061540f565b610293611222565b6103956112a1565b6102736112b1565b6102936112b8565b6102936103d0366004615127565b6112f5565b6102936103e3366004615356565b61134d565b6102936103f6366004615197565b6113c4565b610293610409366004615258565b611410565b61042161041c3660046151c4565b611831565b604051610262929190615e39565b610395611a43565b610293610445366004615143565b611a52565b610293610458366004615305565b611adc565b61029361046b3660046152c6565b611f58565b6103956120f5565b610273610486366004615127565b612105565b61039561211e565b61029361212e565b6102736121f1565b6102936104b13660046153cf565b6121f8565b61027361223f565b6103456104cc366004615127565b612246565b61036d6104df366004615197565b61225c565b6104ec615008565b506001600160a01b03918216600090815261019a602090815260408083209390941682526002928301815290839020835160e081018552815460c082019081528152845180840186526001830154815281840152845180840186529382015484528085019390935283519182019093526003830154815260608201526004820154608082015260059091015460a082015290565b6101d15481565b61058f6122bb565b6098546001600160a01b039081169116146105c55760405162461bcd60e51b81526004016105bc906158d1565b60405180910390fd5b6001600160a01b0381166105eb5760405162461bcd60e51b81526004016105bc90615d28565b6098546001600160a01b03828116911614156106195760405162461bcd60e51b81526004016105bc90615c33565b6099546001600160a01b03828116911614156106475760405162461bcd60e51b81526004016105bc9061572f565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6106716122bb565b6098546001600160a01b0390811691161461069e5760405162461bcd60e51b81526004016105bc906158d1565b61019d80546001600160a01b0319166001600160a01b0392909216919091179055565b6106c96122bb565b6098546001600160a01b039081169116146106f65760405162461bcd60e51b81526004016105bc906158d1565b805161019881905560408051602081019091529081527f6f825f18b787836f7cf974799b160538ab237aa0d14af3611fa69683a40c6d2290610737906122ca565b6040516107449190615e49565b60405180910390a150565b610757615056565b6101305460009060ff1661077d5760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055610790615008565b61079a86866104e4565b90506107a686866122ce565b90935091506107b3615056565b826107be57846107e0565b60408051602081019091526101d15481526107e090869063ffffffff61299416565b905060006107f183600001516122ca565b131561082c57610800816122ca565b610809856122ca565b10156108275760405162461bcd60e51b81526004016105bc906159cd565b610896565b600061083b83600001516122ca565b128015610861575061085b61084e6129c0565b829063ffffffff6129db16565b60000b15155b156108965761086f816122ca565b610878856122ca565b11156108965760405162461bcd60e51b81526004016105bc90615bad565b5050610130805460ff191660011790559094909350915050565b60cc5460ff16156108d35760405162461bcd60e51b81526004016105bc90615866565b6101305460ff166108f65760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff1916905561090c826001612a0c565b6000826001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f919061533a565b90506109998161099436859003850185615356565b612b99565b60006109a36122bb565b90506109ad615008565b6109b785836104e4565b90506109c1615056565b6109ea6000196109de6109d936899003890189615356565b612bc3565b9063ffffffff612c2716565b90506109f4615056565b6109fc615056565b610a04615056565b610a0c615056565b610a178a8787612c49565b9350935093509350610a28836122ca565b15610a455760405162461bcd60e51b81526004016105bc906155d3565b60208601849052606086018190526000610a77610a728c8a610a6d898963ffffffff612d0c16565b612d2f565b6122ca565b1215610a955760405162461bcd60e51b81526004016105bc90615955565b610aa08a8888612e3d565b610ab98888610ab4368d90038d018d615356565b612ea7565b896001600160a01b0316876001600160a01b03167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b610af7886122ca565b610b00866122ca565b604051610b0e9291906154ee565b60405180910390a35050610130805460ff191660011790555050505050505050565b6101305460ff16610b535760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055610b69816000612a0c565b6000610b736122bb565b9050610b7d615008565b610b8783836104e4565b9050610b968160000151612fb6565b610ba08383612fde565b610ba8615056565b836001600160a01b031663ec2c0e636040518163ffffffff1660e01b815260040160206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190615371565b9050610c23615056565b610c2c826122ca565b610c3b57506020820151610cc2565b610c43615056565b610ca18460200151610c95610c87610c72610c618960000151613098565b60408a01519063ffffffff6130c616565b610c7b88612bc3565b9063ffffffff6130e916565b87519063ffffffff61315e16565b9063ffffffff61318116565b90506000610cae826122ca565b1315610cc057610cbd81613098565b91505b505b6000610ccd826122ca565b1115610d4e57610d4e856001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d47919061533a565b85836131ec565b836001600160a01b0316856001600160a01b03167fba70e8457921bdd49042182753cb6259c62f923e2b64216b68372cd85ec3af6c610d8c846122ca565b604051610d999190615e49565b60405180910390a35050610130805460ff19166001179055505050565b610dc1816001612a0c565b610dc9615056565b816001600160a01b031663ed83d79c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190615102565b6001600160a01b038316600090815261019a60205260409020909150600101610e74610e678461111f565b839063ffffffff61331b16565b8154600181018355600092835260209092209051910155610e93615056565b826001600160a01b0316632f8488596040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190615102565b9050610f0e615056565b610f1e838363ffffffff61315e16565b90506000846001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5b57600080fd5b505afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f93919061533a565b90506000610fa0836122ca565b12156110165761019c546001600160a01b031663252978b882610fc285613098565b6040518363ffffffff1660e01b8152600401610fdf92919061546b565b600060405180830381600087803b158015610ff957600080fd5b505af115801561100d573d6000803e3d6000fd5b50505050611028565b6110288161102384613098565b61333e565b5050505050565b6110376122bb565b6098546001600160a01b039081169116146110645760405162461bcd60e51b81526004016105bc906158d1565b61106c61338a565b565b610195805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110f55780601f106110ca576101008083540402835291602001916110f5565b820191906000526020600020905b8154815290600101906020018083116110d857829003601f168201915b505050505081565b610194546001600160a01b038281169116145b919050565b60cc5460ff165b90565b611127615056565b6001600160a01b038216600090815261019a60205260409020600101548015611197576001600160a01b038316600090815261019a602052604090206001018054600019830190811061117657fe5b60009182526020918290206040805193840190520154815291506111109050565b50919050565b6111a56122bb565b6098546001600160a01b039081169116146111d25760405162461bcd60e51b81526004016105bc906158d1565b805161019781905560408051602081019091529081527fce738a6382894b012492e42016c4321ac69da80c4827f80a2e0907585818ac3190610737906122ca565b6099546001600160a01b031690565b61122a6122bb565b6098546001600160a01b039081169116146112575760405162461bcd60e51b81526004016105bc906158d1565b6098546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609880546001600160a01b0319169055565b610194546001600160a01b031681565b6101975481565b6112c06122bb565b6098546001600160a01b039081169116146112ed5760405162461bcd60e51b81526004016105bc906158d1565b61106c6133f6565b6112fd6122bb565b6098546001600160a01b0390811691161461132a5760405162461bcd60e51b81526004016105bc906158d1565b61019e80546001600160a01b0319166001600160a01b0392909216919091179055565b6113556122bb565b6098546001600160a01b039081169116146113825760405162461bcd60e51b81526004016105bc906158d1565b600061139c61138f61344f565b839063ffffffff6129db16565b60000b13156113bd5760405162461bcd60e51b81526004016105bc90615a69565b516101d155565b6101305460ff166113e75760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff191690556113fc82826122ce565b5050610130805460ff191660011790555050565b60cc5460ff16156114335760405162461bcd60e51b81526004016105bc90615866565b6101305460ff166114565760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff1916905561146c856001612a0c565b6000856001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df919061533a565b90506114eb8185612b99565b6114f483613473565b61152a611512846115066109d961344f565b9063ffffffff61349816565b60408051602081019091526101965481526001613512565b61153386613559565b600061153d6122bb565b9050611547615069565b600061155c6115568a856104e4565b516122ca565b90506000811561156d576000611570565b60015b905080806115a4575088600181111561158557fe5b60008313611594576001611597565b60005b60018111156115a257fe5b145b156115cc576115c58a8a6115be8b8b63ffffffff61299416565b898b6135b6565b92506115df565b6115dc8a8a868b8b8b60006137e0565b92505b6115ee8a858560000151612e3d565b801580156116065750825151611603906122ca565b15155b15611630576116306116188b8661225c565b60408051602081019091526101975481526001613512565b61163d83604001516122ca565b1561165a5760405162461bcd60e51b81526004016105bc90615666565b60006116698460c001516122ca565b131561168c576116878585306116828760c00151613098565b613a2e565b6116b3565b600061169b8460c001516122ca565b12156116b3576116b38585610ab48660c00151613098565b50506116bd615056565b6116cc838a8460200151613b60565b905060006117448a6001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a729190615371565b9050600061175584608001516122ca565b90508a6001600160a01b0316856001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c261179d8760000151602001516122ca565b6117aa88602001516122ca565b6117b789606001516122ca565b6117c0896122ca565b8a51516117cc906122ca565b6117d98c60a001516122ca565b6117e68d60e001516122ca565b6117f38e604001516122ca565b60008d8d60405161180e9b9a99989796959493929190615e52565b60405180910390a35050610130805460ff19166001179055505050505050505050565b611839615056565b611841615056565b611849615008565b61185386866104e4565b905061185d615056565b815161186890613098565b9050611873816122ca565b15611a395760008061188884600001516122ca565b12905060008161189957600061189c565b60015b905060018760028111156118ac57fe5b1415611937576040516337d2176f60e11b81526001600160a01b038a1690636fa42ede906118e09084908790600401615485565b60206040518083038186803b1580156118f857600080fd5b505afa15801561190c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119309190615371565b9550611a08565b600087600281111561194557fe5b14156119795760405163da0c592760e01b81526001600160a01b038a169063da0c5927906118e09084908790600401615485565b611981615056565b896001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190615371565b9050611a04848263ffffffff61299416565b9650505b81611a2357611a1e8460400151610c7b88612bc3565b611a34565b611a3486610c7b8660400151612bc3565b945050505b5050935093915050565b6098546001600160a01b031690565b611a5a6122bb565b6098546001600160a01b03908116911614611a875760405162461bcd60e51b81526004016105bc906158d1565b6001600160a01b03821660008181526101d26020526040808220805460ff191685151590811790915590519092917fea46bd0a90ba772a1dbffd4f585e1418c095cb5f70177a38f6eeadf26046e8a991a35050565b60cc5460ff1615611aff5760405162461bcd60e51b81526004016105bc90615866565b6101305460ff16611b225760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055611b38826001612a0c565b611b4182613559565b6000611b4b6122bb565b9050611b55615069565b611b5d615008565b611b6785846104e4565b9050600080611b7983600001516122ca565b13611b85576001611b88565b60005b9050856001600160a01b031663130234cf82611ba78560000151613098565b6040518363ffffffff1660e01b8152600401611bc4929190615485565b60206040518083038186803b158015611bdc57600080fd5b505afa158015611bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c14919061517b565b8015611c4a57506000611c45611c2861344f565b60408051602081019091526101d15481529063ffffffff6129db16565b60000b125b15611d5657611c57615056565b60408051602081019091526101d154815283516001600160a01b0389169163da0c5927918591611c9591611c909163ffffffff613d9016565b613098565b6040518363ffffffff1660e01b8152600401611cb2929190615485565b60206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190615371565b9050611d3f876000611d1786600001516122ca565b13611d23576000611d26565b60015b8784611d3061344f565b611d386129c0565b60016137e0565b9350611d5087868660000151612e3d565b50611d64565b611d61868587613e01565b92505b611d7183604001516122ca565b15611d8e5760405162461bcd60e51b81526004016105bc90615666565b6000866001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc957600080fd5b505afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e01919061533a565b9050611e158186610ab48760c00151613098565b505050611e20615056565b611e2f83868460200151613b60565b90506000611e6f866001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b90506000611e8084608001516122ca565b9050866001600160a01b0316856001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c2611ec88760000151602001516122ca565b611ed588602001516122ca565b611ee289606001516122ca565b611eeb896122ca565b8a5151611ef7906122ca565b611f048c60a001516122ca565b611f118d60e001516122ca565b611f1e8e604001516122ca565b60008d8d604051611f399b9a99989796959493929190615e52565b60405180910390a35050610130805460ff191660011790555050505050565b60cc5460ff1615611f7b5760405162461bcd60e51b81526004016105bc90615866565b6101305460ff16611f9e5760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055611fb4826001612a0c565b6000826001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612027919061533a565b905061203c8161099436859003850185615356565b60006120466122bb565b9050612050615008565b61205a85836104e4565b905061207f61206e36869003860186615356565b60208301519063ffffffff613f9b16565b602082015261208f858383612e3d565b6120a483833061168236899003890189615356565b6001600160a01b038086169083167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b6120e5610a7236899003890189615356565b6000604051610d999291906154ee565b61019d546001600160a01b031681565b6101996020526000908152604090205481565b92915050565b61019c546001600160a01b031681565b6099546001600160a01b03166121565760405162461bcd60e51b81526004016105bc90615be4565b61215e6122bb565b6099546001600160a01b0390811691161461218b5760405162461bcd60e51b81526004016105bc906156bf565b6099546098546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360998054609880546001600160a01b03199081166001600160a01b03841617909155169055565b6101985481565b612200613fbe565b612208614050565b60408051602081019091528290526101969190915561019c80546001600160a01b0319166001600160a01b03909216919091179055565b6101965481565b6101d26020526000908152604090205460ff1681565b612264615056565b61226c615008565b61227684846104e4565b90506122858160000151612fb6565b61228d615056565b612295615056565b6122a1868660006140e0565b915091506122b186848484614171565b9695505050505050565b60006122c56141ab565b905090565b5190565b6122d6615056565b60006122e3846001612a0c565b6122eb615056565b6122f5858561225c565b9050846001600160a01b0316639e0103626040518163ffffffff1660e01b815260040160206040518083038186803b15801561233057600080fd5b505afa158015612344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612368919061517b565b156123a457612375615056565b612381868660026141dd565b90506000612398610a72838563ffffffff61423116565b13156123a2578091505b505b60408051602081019091526101975481526123c29082906000613512565b6123ca615069565b6123d2615056565b6123da615056565b6123e2615056565b6123ea615056565b60008a6001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d919061533a565b90506000612470610a728d8d60006141dd565b604080516020810190915261019854815290915061248d906122ca565b811380156124a8575060006124a3611c2861344f565b60000b125b80156124cc575060408051602081019091526101d15481526124c9906122ca565b15155b15612663576124d9615008565b6124e38d8d6104e4565b90506124ed615056565b8d6001600160a01b031663da0c5927600061250b85600001516122ca565b1361251757600161251a565b60005b60408051602081019091526101d1548152855161254191611c90919063ffffffff613d9016565b6040518363ffffffff1660e01b815260040161255e929190615485565b60206040518083038186803b15801561257657600080fd5b505afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190615371565b90506125dc8e60006125c385600001516122ca565b136125cf5760006125d2565b60015b8f84611d3061344f565b60408051602080820190925261019854815290820151919a50612605919063ffffffff61299416565b975061261888600263ffffffff61425416565b955061262a888763ffffffff612d0c16565b895160200151909550612643908963ffffffff612d0c16565b8951602001528851612658908f908f90612e3d565b60019a5050506127b5565b61266d8c8c6104e4565b6020015195506126858c8c6126806129c0565b613e01565b965061268f615056565b61269c8860c00151613098565b604080516020808201909252610198548152908a01519192506126d8916002916126cc919063ffffffff61299416565b9063ffffffff61425416565b94506126e2615056565b5060408801516126f1826122ca565b6126fa876122ca565b111561272957612710868363ffffffff612d0c16565b9650612722818863ffffffff613f9b16565b905061273c565b612739828763ffffffff612d0c16565b91505b6000612747826122ca565b111561279d576101d2600061275a6122bb565b6001600160a01b0316815260208101919091526040016000205460ff166127935760405162461bcd60e51b81526004016105bc90615706565b61279d8482614276565b60006127a8836122ca565b11156127b2578194505b50505b60006127c0846122ca565b11156127d0576127d0828461333e565b6127e2826127dc6122bb565b86612ea7565b6127eb8c61438e565b8b6001600160a01b03168b6001600160a01b03167f5225638a979dd133f201045ab4169ec2189874d864f2b5a10be72ac6e4b421b461282d8a602001516122ca565b61283a8b606001516143f5565b612843896122ca565b61284b6122bb565b6128548c6122ca565b604051612865959493929190615ea0565b60405180910390a3505050505060006128b0886001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b905060006128c184608001516122ca565b9050886001600160a01b0316886001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c26129098760000151602001516122ca565b61291688602001516122ca565b61292389606001516122ca565b895151600090612932906122ca565b61293f8c60a001516122ca565b61294c8d60e001516122ca565b6129598e604001516122ca565b6129628e6122ca565b8d8d60405161297b9b9a99989796959493929190615e52565b60405180910390a3505050602001519250509250929050565b61299c615056565b6129a4615056565b825184516129b79163ffffffff61440716565b81529392505050565b6129c8615056565b5060408051602081019091526000815290565b8051825160009110156129f057506001612118565b815183511015612a035750600019612118565b50600092915050565b61019c546040516301dd29e160e21b81526001600160a01b0390911690630774a78490612a3d90859060040161540f565b60206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8d919061517b565b612aa95760405162461bcd60e51b81526004016105bc90615553565b816001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1a919061517b565b15158115151481612b4e576040518060400160405280600b81526020016a30b6b69034b99037b832b760a91b815250612b76565b6040518060400160405280600e81526020016d185b5b481dd85cc818db1bdcd95960921b8152505b90612b945760405162461bcd60e51b81526004016105bc91906154fc565b505050565b612ba38282614415565b612bbf5760405162461bcd60e51b81526004016105bc90615638565b5050565b612bcb615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e6033913990612c125760405162461bcd60e51b81526004016105bc91906154fc565b50506040805160208101909152915182525090565b612c2f615056565b612c37615056565b83516129b7908463ffffffff61449316565b612c51615056565b612c59615056565b612c61615056565b612c69615056565b612c728761111f565b9050612c8186600001516122ca565b15612cb25785516060870151612caf9190612ca390849063ffffffff61423116565b9063ffffffff61315e16565b91505b612cba615056565b6020870151612cd390610c95888663ffffffff61423116565b90506000612ce0826122ca565b1215612cf657612cef81613098565b9350612d02565b612cff81613098565b94505b5093509350935093565b612d14615056565b612d1c615056565b825184516129b79163ffffffff6144fe16565b612d37615056565b612d3f615008565b612d4985856104e4565b9050612d53615056565b612d5b615056565b612d67878760016140e0565b91509150612d73615056565b612d83838763ffffffff61318116565b9050612d8d615056565b6000612d98856122ca565b13612da35781612dac565b612dac87612bc3565b9050612db6615056565b6000612dc587600001516122ca565b13612df9576040805160208101909152610196548152612df490612de886612bc3565b9063ffffffff613d9016565b612e1b565b6040805160208101825261019654815290870151612e1b9190612de890612bc3565b9050612e2d828263ffffffff61423116565b96505050505050505b9392505050565b6001600160a01b03928316600090815261019a602090815260408083209490951682526002938401815290849020825151815590820151516001820155928101515191830191909155606081015151600383015560a0810151600583015560800151600490910155565b612eaf615056565b612eb98430614540565b9050612ec4826122ca565b612ecd826122ca565b1015612fa557612edb615056565b612eeb838363ffffffff612d0c16565b6001600160a01b038616600090815261019b6020908152604091829020825191820190925290548152909150612f27908263ffffffff613f9b16565b6001600160a01b03808716600090815261019b602052604090819020925190925561019c5491516304a52f1760e31b815291169063252978b890612f71908890859060040161546b565b600060405180830381600087803b158015612f8b57600080fd5b505af1158015612f9f573d6000803e3d6000fd5b50505050505b612fb08484846131ec565b50505050565b612fbf816122ca565b612fdb5760405162461bcd60e51b81526004016105bc9061557a565b50565b6040518060c00160405280612ff16129c0565b8152602001612ffe6129c0565b815260200161300b6129c0565b81526020016130186129c0565b81526020016000815260200161302c6145cd565b90526001600160a01b03928316600090815261019a60209081526040808320949095168252600293840181529084902082515181559082015151600182015592810151519183019190915560608101515160038301556080810151600483015560a00151600590910155565b6130a0615056565b6130a8615056565b8251600013156130be5782516000038152612118565b915182525090565b6130ce615056565b6130d6615056565b825184516129b79163ffffffff6145d116565b6130f1615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906131385760405162461bcd60e51b81526004016105bc91906154fc565b50613141615056565b835185516131549163ffffffff6145df16565b8152949350505050565b613166615056565b61316e615056565b825184516129b79163ffffffff61462516565b613189615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906131d05760405162461bcd60e51b81526004016105bc91906154fc565b506131d9615056565b835185516131549163ffffffff61463316565b6131f583614679565b6131fd615056565b6132078484614540565b905060006132158584614415565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401613240929190615447565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161327e91906153f3565b6000604051808303816000865af19150503d80600081146132bb576040519150601f19603f3d011682016040523d82523d6000602084013e6132c0565b606091505b50915091508180156132ea5750805115806132ea5750808060200190518101906132ea919061517b565b6133065760405162461bcd60e51b81526004016105bc90615601565b613312878785876146c3565b50505050505050565b613323615056565b61332b615056565b825184516129b79163ffffffff61463316565b613346615056565b6133508330614540565b61019c54909150612b949084906001600160a01b031661336f856122ca565b613378856122ca565b106133835784613385565b835b6131ec565b60cc5460ff166133ac5760405162461bcd60e51b81526004016105bc906155a5565b60cc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6133df6122bb565b6040516133ec919061540f565b60405180910390a1565b60cc5460ff16156134195760405162461bcd60e51b81526004016105bc90615866565b60cc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133df6122bb565b613457615056565b604051806020016040528061346c601261470a565b9052905090565b61347c816122ca565b612fdb5760405162461bcd60e51b81526004016105bc90615a45565b6134a0615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906134e75760405162461bcd60e51b81526004016105bc91906154fc565b506134f0615056565b6135096134fc85612bc3565b869063ffffffff61471316565b95945050505050565b6000613527610a72858563ffffffff6130e916565b905081613537576000811261353d565b60008112155b612fb05760405162461bcd60e51b81526004016105bc906157ee565b60006135636145cd565b6001600160a01b038316600090815261019a6020526040902054909150811415612bbf5780613594836102506122bb565b60a001511415612bbf5760405162461bcd60e51b81526004016105bc906157b7565b6135be615069565b60006135c86122bb565b90506135d2615008565b6135dc88836104e4565b90506135ec888888886000614736565b60608401526135f9615056565b6060840151825161360f9163ffffffff61331b16565b90506136238961361e89612bc3565b61481f565b61019e546001600160a01b0384811691161461370357613641615056565b896001600160a01b031663113773946040518163ffffffff1660e01b815260040160206040518083038186803b15801561367a57600080fd5b505afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190615371565b905060006136bf826122ca565b11156137015760006136e0826136d485613098565b9063ffffffff6129db16565b60000b13156137015760405162461bcd60e51b81526004016105bc90615b3f565b505b61370b615056565b61371e6109d9898863ffffffff6130c616565b9050613728615056565b613730615056565b613738615056565b6137438d8786612c49565b93509350509250613752615056565b61375e8e896000611831565b6020808c018f815260e08d0183905260c0808e018a905260808e018890526040805191820181528b825292810189905290518b830151939550909350908301916137ad9163ffffffff613f9b16565b8152602001838152602001886080015181526020016137ca6145cd565b9052895250969c9b505050505050505050505050565b6137e8615069565b6137f0615056565b613800868663ffffffff61299416565b905061380a615056565b613812615056565b61381e8b8a6000611831565b9150915061382a615069565b613833846122ca565b61383c846122ca565b1115613a0e576138558c61361e6000196109de88612bc3565b61385d615008565b6138678d8c6104e4565b90506138768d8d878b8b614736565b60608301528051613886906122ca565b156138be576138b861389b8260000151613098565b6115066138ab8560600151613098565b869063ffffffff613d9016565b60a08301525b6138c6615056565b6138ce615056565b6138dd8f848660a00151612c49565b6080880191909152604087019190915260a0860151919350915061390890869063ffffffff61423116565b60e08501526020840187905261391c615056565b600061392b85600001516122ca565b136139545761394f8560200151610c7b898860e0015161318190919063ffffffff16565b613979565b6139798560e0015161396d8760200151610c7b8b612bc3565b9063ffffffff61423116565b90506000613986826122ca565b136139a35760405162461bcd60e51b81526004016105bc9061591e565b6040518060c001604052806139c98760600151876000015161331b90919063ffffffff16565b81526020018481526020016139dd83613098565b8152602001838152602001856080015181526020016139fa6145cd565b9052855250929650613a2395505050505050565b613a1c8c8c8c8c8c8c614952565b9450505050505b979650505050505050565b613a3784614679565b613a3f615056565b613a498584614540565b90506000613a578684614415565b905060006060876001600160a01b03166323b872dd60e01b888886604051602401613a8493929190615423565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613ac291906153f3565b6000604051808303816000865af19150503d8060008114613aff576040519150601f19603f3d011682016040523d82523d6000602084013e613b04565b606091505b5091509150818015613b2e575080511580613b2e575080806020019051810190613b2e919061517b565b613b4a5760405162461bcd60e51b81526004016105bc90615890565b613b56888785876146c3565b5050505050505050565b613b68615056565b613b70615056565b613b78615056565b604051636226795560e01b81526001600160a01b03861690636226795590613ba4908790600401615e1e565b604080518083038186803b158015613bbb57600080fd5b505afa158015613bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf3919061538c565b91509150600080613c03846122ca565b119050600080613c12846122ca565b1190508180613c1e5750805b15613d85576000876001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5e57600080fd5b505afa158015613c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c96919061533a565b90508115613cb95761019c54613cb99082908b906001600160a01b031687613a2e565b8215613d695761019d546001600160a01b0316613ce85760405162461bcd60e51b81526004016105bc90615c79565b61019d54613d039082908b906001600160a01b031688613a2e565b61019d54604051630a8d9b6760e01b81526001600160a01b0390911690630a8d9b6790613d36908490899060040161546b565b600060405180830381600087803b158015613d5057600080fd5b505af1158015613d64573d6000803e3d6000fd5b505050505b613d79858563ffffffff613f9b16565b95505050505050612e36565b505050509392505050565b613d98615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e6033913990613ddf5760405162461bcd60e51b81526004016105bc91906154fc565b50613de8615056565b613509613df485612bc3565b869063ffffffff61315e16565b613e09615069565b613e11615008565b613e1b85856104e4565b9050613e2a8160000151612fb6565b613e32615056565b613e3e86866000611831565b915050613e49615056565b613e51615056565b613e59615056565b613e64898686612c49565b5087519295509093509150613e819060001963ffffffff612c2716565b606087015260a086018490526040860182905260808601819052613eaa6000196109de85612bc3565b60c087015284516001600160a01b038a169063d71ec2ad90600090613ece906122ca565b13613eda576001613edd565b60005b8751613ee890613098565b8a6040518463ffffffff1660e01b8152600401613f07939291906154a1565b602060405180830381600087803b158015613f2157600080fd5b505af1158015613f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f599190615371565b60208701526040850151613f85908a9061361e90600019906109de90610c958a8963ffffffff61318116565b613f8f8989612fde565b50505050509392505050565b613fa3615056565b613fab615056565b825184516129b79163ffffffff614b3516565b603354610100900460ff1680613fd75750613fd7614b5a565b80613fe5575060335460ff16155b6140015760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff1615801561402c576033805460ff1961ff0019909116610100171660011790555b614034614b60565b61403c614be1565b8015612fdb576033805461ff001916905550565b603354610100900460ff16806140695750614069614b5a565b80614077575060335460ff16155b6140935760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff161580156140be576033805460ff1961ff0019909116610100171660011790555b610130805460ff191660011790558015612fdb576033805461ff001916905550565b6140e8615056565b6140f0615056565b6140f8615056565b614100615056565b61410c87876000611831565b91509150614118615056565b614120615056565b61412c89896001611831565b91509150614139816122ca565b614142846122ca565b13600088600181111561415157fe5b141461415e578082614161565b82845b909a909950975050505050505050565b614179615056565b614181615056565b614189615056565b614194878787612c49565b505091509150613a238461150683610c7b86612bc3565b6000601836108015906141c257506141c2336110fd565b156141d6575060131936013560601c61111c565b503361111c565b6141e5615056565b6141ed615008565b6141f785856104e4565b90506142068160000151612fb6565b61420e615056565b614216615056565b614221878787611831565b91509150613a2387848385614171565b614239615056565b614241615056565b825184516129b79163ffffffff6145df16565b61425c615056565b614264615056565b83516129b7908463ffffffff614cbb16565b61427e615056565b506001600160a01b038216600090815261019b60209081526040918290208251918201909252905481526142b1826122ca565b6142ba826122ca565b11156142f2576142d0818363ffffffff612d0c16565b6001600160a01b038416600090815261019b6020526040902090519055612b94565b61019c546001600160a01b031663252978b884614315858563ffffffff612d0c16565b6040518363ffffffff1660e01b815260040161433292919061546b565b600060405180830381600087803b15801561434c57600080fd5b505af1158015614360573d6000803e3d6000fd5b5050505061436c6129c0565b6001600160a01b038416600090815261019b6020526040902090519055505050565b60006143986145cd565b6001600160a01b038316600090815261019a602052604090819020829055519091507f97f920fec5d17ec336df7ad438ca8a76dcfd206ddc1d19b263b6f3e6ba3c4f31906143e99084908490615447565b60405180910390a15050565b600061440082613098565b5192915050565b6000612e3683836012614cfd565b60008061442184614d1b565b90506012811061445f5761445761443f82601263ffffffff6144fe16565b600a0a61444b856122ca565b9063ffffffff614dff16565b915050612118565b61448b61447360128363ffffffff6144fe16565b600a0a61447f856122ca565b9063ffffffff614cbb16565b949350505050565b6000826144a257506000612118565b826000191480156144b65750600160ff1b82145b156144d35760405162461bcd60e51b81526004016105bc90615af8565b828202828482816144e057fe5b0514612e365760405162461bcd60e51b81526004016105bc90615af8565b6000612e3683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614e39565b614548615056565b612e3683846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401614578919061540f565b60206040518083038186803b15801561459057600080fd5b505afa1580156145a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c891906153b7565b614e65565b4390565b6000612e3683836012614ef7565b60008183038183128015906145f45750838113155b80614609575060008312801561460957508381135b612e365760405162461bcd60e51b81526004016105bc90615ce4565b6000612e3683836012614f16565b60008282018183128015906146485750838112155b8061465d575060008312801561465d57508381125b612e365760405162461bcd60e51b81526004016105bc90615776565b600061468482614d1b565b6001600160a01b0383166000908152602081905260409020549091508114612bbf576001600160a01b0391909116600090815260208190526040902055565b6146ea6146e06146d38685614e65565b839063ffffffff613f9b16565b6136d48686614540565b60000b15612fb05760405162461bcd60e51b81526004016105bc90615ca2565b60ff16600a0a90565b61471b615056565b614723615056565b825184516129b79163ffffffff614f4016565b61473e615056565b60008086600181111561474d57fe5b1461475957600161475c565b60005b9050614766615056565b6040516375df638960e01b81526147ee906001600160a01b038a16906375df63899061479c9086908b908b908b906004016154c4565b602060405180830381600087803b1580156147b657600080fd5b505af11580156147ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190615371565b90508160018111156147fc57fe5b60011415613a23576148168160001963ffffffff612c2716565b92505050613509565b600061485d836001600160a01b031663525454106040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b9050828115612fb05761486e615056565b6001600160a01b038216600090815261019960209081526040918290208251918201909252905481526148a890859063ffffffff61318116565b905060006148b5826122ca565b12156148c6576148c36129c0565b90505b60006148d1856122ca565b131561492557826148e1826143f5565b111580614909575061019e546001600160a01b03166148fe6122bb565b6001600160a01b0316145b6149255760405162461bcd60e51b81526004016105bc9061552f565b61492e81613098565b6001600160a01b038316600090815261019960205260409020905190555050505050565b61495a615069565b614962615069565b61496f88876126806129c0565b905061497e81604001516122ca565b1561499b5760405162461bcd60e51b81526004016105bc90615b76565b6149a3615056565b60208201516149c8906149bc888863ffffffff61299416565b9063ffffffff612d0c16565b90506149dd610a72828763ffffffff6130c616565b6149e957819250614b29565b6149f1615056565b6149fe83606001516143f5565b614a07866122ca565b1115614a2d57614a2a614a1d8460600151613098565b869063ffffffff612d0c16565b90505b614a35615069565b614a428b8b85858b6135b6565b905060405180610100016040528082600001518152602001614a7583602001518760200151613f9b90919063ffffffff16565b8152602001614a9583604001518760400151613f9b90919063ffffffff16565b8152602001614ab58360600151876060015161331b90919063ffffffff16565b8152602001614ad58360800151876080015161331b90919063ffffffff16565b8152602001614af58360a001518760a0015161331b90919063ffffffff16565b8152602001614b158360c001518760c0015161331b90919063ffffffff16565b8152602001614b226129c0565b9052945050505b50509695505050505050565b600082820183811015612e365760405162461bcd60e51b81526004016105bc90615688565b303b1590565b603354610100900460ff1680614b795750614b79614b5a565b80614b87575060335460ff16155b614ba35760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff1615801561403c576033805460ff1961ff0019909116610100171660011790558015612fdb576033805461ff001916905550565b603354610100900460ff1680614bfa5750614bfa614b5a565b80614c08575060335460ff16155b614c245760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff16158015614c4f576033805460ff1961ff0019909116610100171660011790555b6000614c596122bb565b609880546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612fdb576033805461ff001916905550565b6000612e3683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614f4e565b600061448b614d0b8361470a565b61447f868663ffffffff614dff16565b6001600160a01b038116600090815260208190526040812054806121185760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691614d7d916153f3565b600060405180830381855afa9150503d8060008114614db8576040519150601f19603f3d011682016040523d82523d6000602084013e614dbd565b606091505b5091509150818015614dcf5750805115155b614deb5760405162461bcd60e51b81526004016105bc90615825565b8080602001905181019061350991906153b7565b600082614e0e57506000612118565b82820282848281614e1b57fe5b0414612e365760405162461bcd60e51b81526004016105bc90615a04565b60008184841115614e5d5760405162461bcd60e51b81526004016105bc91906154fc565b505050900390565b614e6d615056565b6000614e7884614d1b565b905060128110614ebd57604080516020810190915280614eb2614ea284601263ffffffff6144fe16565b8690600a0a63ffffffff614cbb16565b815250915050612118565b604080516020810190915280614eed614edd60128563ffffffff6144fe16565b8690600a0a63ffffffff614dff16565b9052949350505050565b600061448b8361447f614f098561470a565b879063ffffffff614dff16565b600061448b614f248361470a565b614f34868663ffffffff61449316565b9063ffffffff614f8516565b6000612e3683836012614fe9565b60008183614f6f5760405162461bcd60e51b81526004016105bc91906154fc565b506000838581614f7b57fe5b0495945050505050565b600081614fa45760405162461bcd60e51b81526004016105bc90615d6a565b81600019148015614fb85750600160ff1b83145b15614fd55760405162461bcd60e51b81526004016105bc9061598c565b6000828481614fe057fe5b05949350505050565b600061448b83614f34614ffb8561470a565b879063ffffffff61449316565b6040518060c0016040528061501b615056565b8152602001615028615056565b8152602001615035615056565b8152602001615042615056565b815260200160008152602001600081525090565b6040518060200160405280600081525090565b60405180610100016040528061507d615008565b815260200161508a615056565b8152602001615097615056565b81526020016150a4615056565b81526020016150b1615056565b81526020016150be615056565b81526020016150cb615056565b81526020016150d8615056565b905290565b6000602082840312156150ee578081fd5b6150f86020615ecc565b9135825250919050565b600060208284031215615113578081fd5b61511d6020615ecc565b9151825250919050565b600060208284031215615138578081fd5b8135612e3681615f2a565b60008060408385031215615155578081fd5b823561516081615f2a565b9150602083013561517081615f3f565b809150509250929050565b60006020828403121561518c578081fd5b8151612e3681615f3f565b600080604083850312156151a9578182fd5b82356151b481615f2a565b9150602083013561517081615f2a565b6000806000606084860312156151d8578081fd5b83356151e381615f2a565b925060208401356151f381615f2a565b9150604084013560038110615206578182fd5b809150509250925092565b600080600060608486031215615225578283fd5b833561523081615f2a565b9250602084013561524081615f2a565b915061524f85604086016150dd565b90509250925092565b600080600080600060a0868803121561526f578081fd5b853561527a81615f2a565b945060208601356002811061528d578182fd5b935061529c87604088016150dd565b92506152ab87606088016150dd565b91506152ba87608088016150dd565b90509295509295909350565b60008082840360408112156152d9578283fd5b83356152e481615f2a565b92506020601f19820112156152f7578182fd5b506020830190509250929050565b60008060408385031215615317578081fd5b823561532281615f2a565b915061533184602085016150dd565b90509250929050565b60006020828403121561534b578081fd5b8151612e3681615f2a565b600060208284031215615367578081fd5b612e3683836150dd565b600060208284031215615382578081fd5b612e368383615102565b6000806040838503121561539e578182fd5b6153a88484615102565b91506153318460208501615102565b6000602082840312156153c8578081fd5b5051919050565b600080604083850312156153e1578182fd5b82359150602083013561517081615f2a565b60008251615405818460208701615efe565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b0392909216825251602082015260400190565b6040810161549284615ef3565b82529151602090910152919050565b606081016154ae85615ef3565b8252925160208201529051604090910152919050565b608081016154d186615ef3565b825293516020820152915160408301521515606090910152919050565b918252602082015260400190565b600060208252825180602084015261551b816040850160208701615efe565b601f01601f19169190910160400192915050565b6020808252600a90820152691bdd995c881b1a5b5a5d60b21b604082015260600190565b6020808252600d908201526c185b5b481b9bdd08199bdd5b99609a1b604082015260600190565b6020808252601190820152700706f736974696f6e53697a65206973203607c1b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601490820152730dac2e4ced2dc40d2e640dcdee840cadcdeeaced60631b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601490820152731a5b9d985b1a59081d1bdad95b88185b5bdd5b9d60621b604082015260600190565b602080825260089082015267189859081919589d60c21b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600f908201526e06e6f74206261636b73746f70204c5608c1b604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6f6e6c79206f6e6520616374696f6e20616c6c6f776564000000000000000000604082015260600190565b6020808252601e908201527f4d617267696e20726174696f206e6f74206d6565742063726974657269610000604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601a908201527f76616c7565206f66206f70656e4e6f74696f6e616c203c3d2030000000000000604082015260600190565b6020808252601d908201527f6672656520636f6c6c61746572616c206973206e6f7420656e6f756768000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a90820152690696e70757420697320360b41b604082015260600190565b60208082526021908201527f696e76616c6964207061727469616c206c69717569646174696f6e20726174696040820152606f60f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b6020808252601d908201527f68697420706f736974696f6e2073697a6520757070657220626f756e64000000604082015260600190565b6020808252601d908201527f72656475636520616e20756e646572776174657220706f736974696f6e000000604082015260600190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6020808252600f908201526e125b9d985b1a5908199959541bdbdb608a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060c08201905082515182526020830151516020830152604083015151604083015260608301515160608301526080830151608083015260a083015160a083015292915050565b9051815260200190565b915182521515602082015260400190565b9151825251602082015260400190565b90815260200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b60405181810167ffffffffffffffff81118282101715615eeb57600080fd5b604052919050565b806002811061111057fe5b60005b83811015615f19578181015183820152602001615f01565b83811115612fb05750506000910152565b6001600160a01b0381168114612fdb57600080fd5b8015158114612fdb57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a264697066735822122032b7537b7bc81ee74fe25ebc914886dc0d228d9b68cdf14aeb102774239752b064736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80638456cb591161013b578063ae2e933b116100b8578063cfe711031161007c578063cfe711031461049b578063da35a26f146104a3578063e57d5636146104b6578063e9a4019b146104be578063ea0a45f9146104d15761023d565b8063ae2e933b14610470578063b0ac5f2f14610478578063b33dc19014610242578063b79023031461048b578063bc5920ba146104935761023d565b80638bedf3bb116100ff5780638bedf3bb1461040e5780638da5cb5b1461042f57806390cf78e414610437578063a8c1b0bc1461044a578063ac06a96e1461045d5761023d565b80638456cb59146103ba578063854cff2f146103c2578063862c04e3146103d557806386b9d81f146103e8578063893d242d146103fb5761023d565b80633f4ba83a116101c95780636c1274461161018d5780636c1274461461037a5780636c8381f81461038d578063715018a6146103a25780637da0a877146103aa57806383acb48a146103b25761023d565b80633f4ba83a14610315578063486ff0cd1461031d578063572b6c05146103325780635c975abb146103525780636891397b1461035a5761023d565b8063203b378811610210578063203b3788146102a857806329c44f13146102bb57806330e2ae65146102dc57806336405257146102ef5780633e09fa10146103025761023d565b80630475db5a14610242578063090f05c21461026b57806313af40351461028057806319db222814610295575b600080fd5b610255610250366004615197565b6104e4565b6040516102629190615dd6565b60405180910390f35b610273610580565b6040516102629190615e49565b61029361028e366004615127565b610587565b005b6102936102a3366004615127565b610669565b6102936102b6366004615356565b6106c1565b6102ce6102c9366004615211565b61074f565b604051610262929190615e28565b6102936102ea3660046152c6565b6108b0565b6102936102fd366004615127565b610b30565b610293610310366004615127565b610db6565b61029361102f565b61032561106e565b60405161026291906154fc565b610345610340366004615127565b6110fd565b6040516102629190615460565b610345611115565b61036d610368366004615127565b61111f565b6040516102629190615e1e565b610293610388366004615356565b61119d565b610395611213565b604051610262919061540f565b610293611222565b6103956112a1565b6102736112b1565b6102936112b8565b6102936103d0366004615127565b6112f5565b6102936103e3366004615356565b61134d565b6102936103f6366004615197565b6113c4565b610293610409366004615258565b611410565b61042161041c3660046151c4565b611831565b604051610262929190615e39565b610395611a43565b610293610445366004615143565b611a52565b610293610458366004615305565b611adc565b61029361046b3660046152c6565b611f58565b6103956120f5565b610273610486366004615127565b612105565b61039561211e565b61029361212e565b6102736121f1565b6102936104b13660046153cf565b6121f8565b61027361223f565b6103456104cc366004615127565b612246565b61036d6104df366004615197565b61225c565b6104ec615008565b506001600160a01b03918216600090815261019a602090815260408083209390941682526002928301815290839020835160e081018552815460c082019081528152845180840186526001830154815281840152845180840186529382015484528085019390935283519182019093526003830154815260608201526004820154608082015260059091015460a082015290565b6101d15481565b61058f6122bb565b6098546001600160a01b039081169116146105c55760405162461bcd60e51b81526004016105bc906158d1565b60405180910390fd5b6001600160a01b0381166105eb5760405162461bcd60e51b81526004016105bc90615d28565b6098546001600160a01b03828116911614156106195760405162461bcd60e51b81526004016105bc90615c33565b6099546001600160a01b03828116911614156106475760405162461bcd60e51b81526004016105bc9061572f565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6106716122bb565b6098546001600160a01b0390811691161461069e5760405162461bcd60e51b81526004016105bc906158d1565b61019d80546001600160a01b0319166001600160a01b0392909216919091179055565b6106c96122bb565b6098546001600160a01b039081169116146106f65760405162461bcd60e51b81526004016105bc906158d1565b805161019881905560408051602081019091529081527f6f825f18b787836f7cf974799b160538ab237aa0d14af3611fa69683a40c6d2290610737906122ca565b6040516107449190615e49565b60405180910390a150565b610757615056565b6101305460009060ff1661077d5760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055610790615008565b61079a86866104e4565b90506107a686866122ce565b90935091506107b3615056565b826107be57846107e0565b60408051602081019091526101d15481526107e090869063ffffffff61299416565b905060006107f183600001516122ca565b131561082c57610800816122ca565b610809856122ca565b10156108275760405162461bcd60e51b81526004016105bc906159cd565b610896565b600061083b83600001516122ca565b128015610861575061085b61084e6129c0565b829063ffffffff6129db16565b60000b15155b156108965761086f816122ca565b610878856122ca565b11156108965760405162461bcd60e51b81526004016105bc90615bad565b5050610130805460ff191660011790559094909350915050565b60cc5460ff16156108d35760405162461bcd60e51b81526004016105bc90615866565b6101305460ff166108f65760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff1916905561090c826001612a0c565b6000826001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561094757600080fd5b505afa15801561095b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097f919061533a565b90506109998161099436859003850185615356565b612b99565b60006109a36122bb565b90506109ad615008565b6109b785836104e4565b90506109c1615056565b6109ea6000196109de6109d936899003890189615356565b612bc3565b9063ffffffff612c2716565b90506109f4615056565b6109fc615056565b610a04615056565b610a0c615056565b610a178a8787612c49565b9350935093509350610a28836122ca565b15610a455760405162461bcd60e51b81526004016105bc906155d3565b60208601849052606086018190526000610a77610a728c8a610a6d898963ffffffff612d0c16565b612d2f565b6122ca565b1215610a955760405162461bcd60e51b81526004016105bc90615955565b610aa08a8888612e3d565b610ab98888610ab4368d90038d018d615356565b612ea7565b896001600160a01b0316876001600160a01b03167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b610af7886122ca565b610b00866122ca565b604051610b0e9291906154ee565b60405180910390a35050610130805460ff191660011790555050505050505050565b6101305460ff16610b535760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055610b69816000612a0c565b6000610b736122bb565b9050610b7d615008565b610b8783836104e4565b9050610b968160000151612fb6565b610ba08383612fde565b610ba8615056565b836001600160a01b031663ec2c0e636040518163ffffffff1660e01b815260040160206040518083038186803b158015610be157600080fd5b505afa158015610bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c199190615371565b9050610c23615056565b610c2c826122ca565b610c3b57506020820151610cc2565b610c43615056565b610ca18460200151610c95610c87610c72610c618960000151613098565b60408a01519063ffffffff6130c616565b610c7b88612bc3565b9063ffffffff6130e916565b87519063ffffffff61315e16565b9063ffffffff61318116565b90506000610cae826122ca565b1315610cc057610cbd81613098565b91505b505b6000610ccd826122ca565b1115610d4e57610d4e856001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d47919061533a565b85836131ec565b836001600160a01b0316856001600160a01b03167fba70e8457921bdd49042182753cb6259c62f923e2b64216b68372cd85ec3af6c610d8c846122ca565b604051610d999190615e49565b60405180910390a35050610130805460ff19166001179055505050565b610dc1816001612a0c565b610dc9615056565b816001600160a01b031663ed83d79c6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e0457600080fd5b505af1158015610e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3c9190615102565b6001600160a01b038316600090815261019a60205260409020909150600101610e74610e678461111f565b839063ffffffff61331b16565b8154600181018355600092835260209092209051910155610e93615056565b826001600160a01b0316632f8488596040518163ffffffff1660e01b815260040160206040518083038186803b158015610ecc57600080fd5b505afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190615102565b9050610f0e615056565b610f1e838363ffffffff61315e16565b90506000846001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f5b57600080fd5b505afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f93919061533a565b90506000610fa0836122ca565b12156110165761019c546001600160a01b031663252978b882610fc285613098565b6040518363ffffffff1660e01b8152600401610fdf92919061546b565b600060405180830381600087803b158015610ff957600080fd5b505af115801561100d573d6000803e3d6000fd5b50505050611028565b6110288161102384613098565b61333e565b5050505050565b6110376122bb565b6098546001600160a01b039081169116146110645760405162461bcd60e51b81526004016105bc906158d1565b61106c61338a565b565b610195805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156110f55780601f106110ca576101008083540402835291602001916110f5565b820191906000526020600020905b8154815290600101906020018083116110d857829003601f168201915b505050505081565b610194546001600160a01b038281169116145b919050565b60cc5460ff165b90565b611127615056565b6001600160a01b038216600090815261019a60205260409020600101548015611197576001600160a01b038316600090815261019a602052604090206001018054600019830190811061117657fe5b60009182526020918290206040805193840190520154815291506111109050565b50919050565b6111a56122bb565b6098546001600160a01b039081169116146111d25760405162461bcd60e51b81526004016105bc906158d1565b805161019781905560408051602081019091529081527fce738a6382894b012492e42016c4321ac69da80c4827f80a2e0907585818ac3190610737906122ca565b6099546001600160a01b031690565b61122a6122bb565b6098546001600160a01b039081169116146112575760405162461bcd60e51b81526004016105bc906158d1565b6098546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3609880546001600160a01b0319169055565b610194546001600160a01b031681565b6101975481565b6112c06122bb565b6098546001600160a01b039081169116146112ed5760405162461bcd60e51b81526004016105bc906158d1565b61106c6133f6565b6112fd6122bb565b6098546001600160a01b0390811691161461132a5760405162461bcd60e51b81526004016105bc906158d1565b61019e80546001600160a01b0319166001600160a01b0392909216919091179055565b6113556122bb565b6098546001600160a01b039081169116146113825760405162461bcd60e51b81526004016105bc906158d1565b600061139c61138f61344f565b839063ffffffff6129db16565b60000b13156113bd5760405162461bcd60e51b81526004016105bc90615a69565b516101d155565b6101305460ff166113e75760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff191690556113fc82826122ce565b5050610130805460ff191660011790555050565b60cc5460ff16156114335760405162461bcd60e51b81526004016105bc90615866565b6101305460ff166114565760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff1916905561146c856001612a0c565b6000856001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b1580156114a757600080fd5b505afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df919061533a565b90506114eb8185612b99565b6114f483613473565b61152a611512846115066109d961344f565b9063ffffffff61349816565b60408051602081019091526101965481526001613512565b61153386613559565b600061153d6122bb565b9050611547615069565b600061155c6115568a856104e4565b516122ca565b90506000811561156d576000611570565b60015b905080806115a4575088600181111561158557fe5b60008313611594576001611597565b60005b60018111156115a257fe5b145b156115cc576115c58a8a6115be8b8b63ffffffff61299416565b898b6135b6565b92506115df565b6115dc8a8a868b8b8b60006137e0565b92505b6115ee8a858560000151612e3d565b801580156116065750825151611603906122ca565b15155b15611630576116306116188b8661225c565b60408051602081019091526101975481526001613512565b61163d83604001516122ca565b1561165a5760405162461bcd60e51b81526004016105bc90615666565b60006116698460c001516122ca565b131561168c576116878585306116828760c00151613098565b613a2e565b6116b3565b600061169b8460c001516122ca565b12156116b3576116b38585610ab48660c00151613098565b50506116bd615056565b6116cc838a8460200151613b60565b905060006117448a6001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b505afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a729190615371565b9050600061175584608001516122ca565b90508a6001600160a01b0316856001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c261179d8760000151602001516122ca565b6117aa88602001516122ca565b6117b789606001516122ca565b6117c0896122ca565b8a51516117cc906122ca565b6117d98c60a001516122ca565b6117e68d60e001516122ca565b6117f38e604001516122ca565b60008d8d60405161180e9b9a99989796959493929190615e52565b60405180910390a35050610130805460ff19166001179055505050505050505050565b611839615056565b611841615056565b611849615008565b61185386866104e4565b905061185d615056565b815161186890613098565b9050611873816122ca565b15611a395760008061188884600001516122ca565b12905060008161189957600061189c565b60015b905060018760028111156118ac57fe5b1415611937576040516337d2176f60e11b81526001600160a01b038a1690636fa42ede906118e09084908790600401615485565b60206040518083038186803b1580156118f857600080fd5b505afa15801561190c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119309190615371565b9550611a08565b600087600281111561194557fe5b14156119795760405163da0c592760e01b81526001600160a01b038a169063da0c5927906118e09084908790600401615485565b611981615056565b896001600160a01b031663468f02d26040518163ffffffff1660e01b815260040160206040518083038186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190615371565b9050611a04848263ffffffff61299416565b9650505b81611a2357611a1e8460400151610c7b88612bc3565b611a34565b611a3486610c7b8660400151612bc3565b945050505b5050935093915050565b6098546001600160a01b031690565b611a5a6122bb565b6098546001600160a01b03908116911614611a875760405162461bcd60e51b81526004016105bc906158d1565b6001600160a01b03821660008181526101d26020526040808220805460ff191685151590811790915590519092917fea46bd0a90ba772a1dbffd4f585e1418c095cb5f70177a38f6eeadf26046e8a991a35050565b60cc5460ff1615611aff5760405162461bcd60e51b81526004016105bc90615866565b6101305460ff16611b225760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055611b38826001612a0c565b611b4182613559565b6000611b4b6122bb565b9050611b55615069565b611b5d615008565b611b6785846104e4565b9050600080611b7983600001516122ca565b13611b85576001611b88565b60005b9050856001600160a01b031663130234cf82611ba78560000151613098565b6040518363ffffffff1660e01b8152600401611bc4929190615485565b60206040518083038186803b158015611bdc57600080fd5b505afa158015611bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c14919061517b565b8015611c4a57506000611c45611c2861344f565b60408051602081019091526101d15481529063ffffffff6129db16565b60000b125b15611d5657611c57615056565b60408051602081019091526101d154815283516001600160a01b0389169163da0c5927918591611c9591611c909163ffffffff613d9016565b613098565b6040518363ffffffff1660e01b8152600401611cb2929190615485565b60206040518083038186803b158015611cca57600080fd5b505afa158015611cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d029190615371565b9050611d3f876000611d1786600001516122ca565b13611d23576000611d26565b60015b8784611d3061344f565b611d386129c0565b60016137e0565b9350611d5087868660000151612e3d565b50611d64565b611d61868587613e01565b92505b611d7183604001516122ca565b15611d8e5760405162461bcd60e51b81526004016105bc90615666565b6000866001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015611dc957600080fd5b505afa158015611ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e01919061533a565b9050611e158186610ab48760c00151613098565b505050611e20615056565b611e2f83868460200151613b60565b90506000611e6f866001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b90506000611e8084608001516122ca565b9050866001600160a01b0316856001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c2611ec88760000151602001516122ca565b611ed588602001516122ca565b611ee289606001516122ca565b611eeb896122ca565b8a5151611ef7906122ca565b611f048c60a001516122ca565b611f118d60e001516122ca565b611f1e8e604001516122ca565b60008d8d604051611f399b9a99989796959493929190615e52565b60405180910390a35050610130805460ff191660011790555050505050565b60cc5460ff1615611f7b5760405162461bcd60e51b81526004016105bc90615866565b6101305460ff16611f9e5760405162461bcd60e51b81526004016105bc90615d9f565b610130805460ff19169055611fb4826001612a0c565b6000826001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612027919061533a565b905061203c8161099436859003850185615356565b60006120466122bb565b9050612050615008565b61205a85836104e4565b905061207f61206e36869003860186615356565b60208301519063ffffffff613f9b16565b602082015261208f858383612e3d565b6120a483833061168236899003890189615356565b6001600160a01b038086169083167f1c822fe92555a7e529201522fbd166b03a55712d945737f4cc5c1e18199caa7b6120e5610a7236899003890189615356565b6000604051610d999291906154ee565b61019d546001600160a01b031681565b6101996020526000908152604090205481565b92915050565b61019c546001600160a01b031681565b6099546001600160a01b03166121565760405162461bcd60e51b81526004016105bc90615be4565b61215e6122bb565b6099546001600160a01b0390811691161461218b5760405162461bcd60e51b81526004016105bc906156bf565b6099546098546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360998054609880546001600160a01b03199081166001600160a01b03841617909155169055565b6101985481565b612200613fbe565b612208614050565b60408051602081019091528290526101969190915561019c80546001600160a01b0319166001600160a01b03909216919091179055565b6101965481565b6101d26020526000908152604090205460ff1681565b612264615056565b61226c615008565b61227684846104e4565b90506122858160000151612fb6565b61228d615056565b612295615056565b6122a1868660006140e0565b915091506122b186848484614171565b9695505050505050565b60006122c56141ab565b905090565b5190565b6122d6615056565b60006122e3846001612a0c565b6122eb615056565b6122f5858561225c565b9050846001600160a01b0316639e0103626040518163ffffffff1660e01b815260040160206040518083038186803b15801561233057600080fd5b505afa158015612344573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612368919061517b565b156123a457612375615056565b612381868660026141dd565b90506000612398610a72838563ffffffff61423116565b13156123a2578091505b505b60408051602081019091526101975481526123c29082906000613512565b6123ca615069565b6123d2615056565b6123da615056565b6123e2615056565b6123ea615056565b60008a6001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d919061533a565b90506000612470610a728d8d60006141dd565b604080516020810190915261019854815290915061248d906122ca565b811380156124a8575060006124a3611c2861344f565b60000b125b80156124cc575060408051602081019091526101d15481526124c9906122ca565b15155b15612663576124d9615008565b6124e38d8d6104e4565b90506124ed615056565b8d6001600160a01b031663da0c5927600061250b85600001516122ca565b1361251757600161251a565b60005b60408051602081019091526101d1548152855161254191611c90919063ffffffff613d9016565b6040518363ffffffff1660e01b815260040161255e929190615485565b60206040518083038186803b15801561257657600080fd5b505afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190615371565b90506125dc8e60006125c385600001516122ca565b136125cf5760006125d2565b60015b8f84611d3061344f565b60408051602080820190925261019854815290820151919a50612605919063ffffffff61299416565b975061261888600263ffffffff61425416565b955061262a888763ffffffff612d0c16565b895160200151909550612643908963ffffffff612d0c16565b8951602001528851612658908f908f90612e3d565b60019a5050506127b5565b61266d8c8c6104e4565b6020015195506126858c8c6126806129c0565b613e01565b965061268f615056565b61269c8860c00151613098565b604080516020808201909252610198548152908a01519192506126d8916002916126cc919063ffffffff61299416565b9063ffffffff61425416565b94506126e2615056565b5060408801516126f1826122ca565b6126fa876122ca565b111561272957612710868363ffffffff612d0c16565b9650612722818863ffffffff613f9b16565b905061273c565b612739828763ffffffff612d0c16565b91505b6000612747826122ca565b111561279d576101d2600061275a6122bb565b6001600160a01b0316815260208101919091526040016000205460ff166127935760405162461bcd60e51b81526004016105bc90615706565b61279d8482614276565b60006127a8836122ca565b11156127b2578194505b50505b60006127c0846122ca565b11156127d0576127d0828461333e565b6127e2826127dc6122bb565b86612ea7565b6127eb8c61438e565b8b6001600160a01b03168b6001600160a01b03167f5225638a979dd133f201045ab4169ec2189874d864f2b5a10be72ac6e4b421b461282d8a602001516122ca565b61283a8b606001516143f5565b612843896122ca565b61284b6122bb565b6128548c6122ca565b604051612865959493929190615ea0565b60405180910390a3505050505060006128b0886001600160a01b031663dc76fabc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b905060006128c184608001516122ca565b9050886001600160a01b0316886001600160a01b03167f4c7b764f428c13bbea8cc8da90ebe6eef4dafeb27a4e3d9041d64208c47ca7c26129098760000151602001516122ca565b61291688602001516122ca565b61292389606001516122ca565b895151600090612932906122ca565b61293f8c60a001516122ca565b61294c8d60e001516122ca565b6129598e604001516122ca565b6129628e6122ca565b8d8d60405161297b9b9a99989796959493929190615e52565b60405180910390a3505050602001519250509250929050565b61299c615056565b6129a4615056565b825184516129b79163ffffffff61440716565b81529392505050565b6129c8615056565b5060408051602081019091526000815290565b8051825160009110156129f057506001612118565b815183511015612a035750600019612118565b50600092915050565b61019c546040516301dd29e160e21b81526001600160a01b0390911690630774a78490612a3d90859060040161540f565b60206040518083038186803b158015612a5557600080fd5b505afa158015612a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8d919061517b565b612aa95760405162461bcd60e51b81526004016105bc90615553565b816001600160a01b031663fcfff16f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ae257600080fd5b505afa158015612af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1a919061517b565b15158115151481612b4e576040518060400160405280600b81526020016a30b6b69034b99037b832b760a91b815250612b76565b6040518060400160405280600e81526020016d185b5b481dd85cc818db1bdcd95960921b8152505b90612b945760405162461bcd60e51b81526004016105bc91906154fc565b505050565b612ba38282614415565b612bbf5760405162461bcd60e51b81526004016105bc90615638565b5050565b612bcb615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e6033913990612c125760405162461bcd60e51b81526004016105bc91906154fc565b50506040805160208101909152915182525090565b612c2f615056565b612c37615056565b83516129b7908463ffffffff61449316565b612c51615056565b612c59615056565b612c61615056565b612c69615056565b612c728761111f565b9050612c8186600001516122ca565b15612cb25785516060870151612caf9190612ca390849063ffffffff61423116565b9063ffffffff61315e16565b91505b612cba615056565b6020870151612cd390610c95888663ffffffff61423116565b90506000612ce0826122ca565b1215612cf657612cef81613098565b9350612d02565b612cff81613098565b94505b5093509350935093565b612d14615056565b612d1c615056565b825184516129b79163ffffffff6144fe16565b612d37615056565b612d3f615008565b612d4985856104e4565b9050612d53615056565b612d5b615056565b612d67878760016140e0565b91509150612d73615056565b612d83838763ffffffff61318116565b9050612d8d615056565b6000612d98856122ca565b13612da35781612dac565b612dac87612bc3565b9050612db6615056565b6000612dc587600001516122ca565b13612df9576040805160208101909152610196548152612df490612de886612bc3565b9063ffffffff613d9016565b612e1b565b6040805160208101825261019654815290870151612e1b9190612de890612bc3565b9050612e2d828263ffffffff61423116565b96505050505050505b9392505050565b6001600160a01b03928316600090815261019a602090815260408083209490951682526002938401815290849020825151815590820151516001820155928101515191830191909155606081015151600383015560a0810151600583015560800151600490910155565b612eaf615056565b612eb98430614540565b9050612ec4826122ca565b612ecd826122ca565b1015612fa557612edb615056565b612eeb838363ffffffff612d0c16565b6001600160a01b038616600090815261019b6020908152604091829020825191820190925290548152909150612f27908263ffffffff613f9b16565b6001600160a01b03808716600090815261019b602052604090819020925190925561019c5491516304a52f1760e31b815291169063252978b890612f71908890859060040161546b565b600060405180830381600087803b158015612f8b57600080fd5b505af1158015612f9f573d6000803e3d6000fd5b50505050505b612fb08484846131ec565b50505050565b612fbf816122ca565b612fdb5760405162461bcd60e51b81526004016105bc9061557a565b50565b6040518060c00160405280612ff16129c0565b8152602001612ffe6129c0565b815260200161300b6129c0565b81526020016130186129c0565b81526020016000815260200161302c6145cd565b90526001600160a01b03928316600090815261019a60209081526040808320949095168252600293840181529084902082515181559082015151600182015592810151519183019190915560608101515160038301556080810151600483015560a00151600590910155565b6130a0615056565b6130a8615056565b8251600013156130be5782516000038152612118565b915182525090565b6130ce615056565b6130d6615056565b825184516129b79163ffffffff6145d116565b6130f1615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906131385760405162461bcd60e51b81526004016105bc91906154fc565b50613141615056565b835185516131549163ffffffff6145df16565b8152949350505050565b613166615056565b61316e615056565b825184516129b79163ffffffff61462516565b613189615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906131d05760405162461bcd60e51b81526004016105bc91906154fc565b506131d9615056565b835185516131549163ffffffff61463316565b6131f583614679565b6131fd615056565b6132078484614540565b905060006132158584614415565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401613240929190615447565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161327e91906153f3565b6000604051808303816000865af19150503d80600081146132bb576040519150601f19603f3d011682016040523d82523d6000602084013e6132c0565b606091505b50915091508180156132ea5750805115806132ea5750808060200190518101906132ea919061517b565b6133065760405162461bcd60e51b81526004016105bc90615601565b613312878785876146c3565b50505050505050565b613323615056565b61332b615056565b825184516129b79163ffffffff61463316565b613346615056565b6133508330614540565b61019c54909150612b949084906001600160a01b031661336f856122ca565b613378856122ca565b106133835784613385565b835b6131ec565b60cc5460ff166133ac5760405162461bcd60e51b81526004016105bc906155a5565b60cc805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6133df6122bb565b6040516133ec919061540f565b60405180910390a1565b60cc5460ff16156134195760405162461bcd60e51b81526004016105bc90615866565b60cc805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586133df6122bb565b613457615056565b604051806020016040528061346c601261470a565b9052905090565b61347c816122ca565b612fdb5760405162461bcd60e51b81526004016105bc90615a45565b6134a0615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e60339139906134e75760405162461bcd60e51b81526004016105bc91906154fc565b506134f0615056565b6135096134fc85612bc3565b869063ffffffff61471316565b95945050505050565b6000613527610a72858563ffffffff6130e916565b905081613537576000811261353d565b60008112155b612fb05760405162461bcd60e51b81526004016105bc906157ee565b60006135636145cd565b6001600160a01b038316600090815261019a6020526040902054909150811415612bbf5780613594836102506122bb565b60a001511415612bbf5760405162461bcd60e51b81526004016105bc906157b7565b6135be615069565b60006135c86122bb565b90506135d2615008565b6135dc88836104e4565b90506135ec888888886000614736565b60608401526135f9615056565b6060840151825161360f9163ffffffff61331b16565b90506136238961361e89612bc3565b61481f565b61019e546001600160a01b0384811691161461370357613641615056565b896001600160a01b031663113773946040518163ffffffff1660e01b815260040160206040518083038186803b15801561367a57600080fd5b505afa15801561368e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b29190615371565b905060006136bf826122ca565b11156137015760006136e0826136d485613098565b9063ffffffff6129db16565b60000b13156137015760405162461bcd60e51b81526004016105bc90615b3f565b505b61370b615056565b61371e6109d9898863ffffffff6130c616565b9050613728615056565b613730615056565b613738615056565b6137438d8786612c49565b93509350509250613752615056565b61375e8e896000611831565b6020808c018f815260e08d0183905260c0808e018a905260808e018890526040805191820181528b825292810189905290518b830151939550909350908301916137ad9163ffffffff613f9b16565b8152602001838152602001886080015181526020016137ca6145cd565b9052895250969c9b505050505050505050505050565b6137e8615069565b6137f0615056565b613800868663ffffffff61299416565b905061380a615056565b613812615056565b61381e8b8a6000611831565b9150915061382a615069565b613833846122ca565b61383c846122ca565b1115613a0e576138558c61361e6000196109de88612bc3565b61385d615008565b6138678d8c6104e4565b90506138768d8d878b8b614736565b60608301528051613886906122ca565b156138be576138b861389b8260000151613098565b6115066138ab8560600151613098565b869063ffffffff613d9016565b60a08301525b6138c6615056565b6138ce615056565b6138dd8f848660a00151612c49565b6080880191909152604087019190915260a0860151919350915061390890869063ffffffff61423116565b60e08501526020840187905261391c615056565b600061392b85600001516122ca565b136139545761394f8560200151610c7b898860e0015161318190919063ffffffff16565b613979565b6139798560e0015161396d8760200151610c7b8b612bc3565b9063ffffffff61423116565b90506000613986826122ca565b136139a35760405162461bcd60e51b81526004016105bc9061591e565b6040518060c001604052806139c98760600151876000015161331b90919063ffffffff16565b81526020018481526020016139dd83613098565b8152602001838152602001856080015181526020016139fa6145cd565b9052855250929650613a2395505050505050565b613a1c8c8c8c8c8c8c614952565b9450505050505b979650505050505050565b613a3784614679565b613a3f615056565b613a498584614540565b90506000613a578684614415565b905060006060876001600160a01b03166323b872dd60e01b888886604051602401613a8493929190615423565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613ac291906153f3565b6000604051808303816000865af19150503d8060008114613aff576040519150601f19603f3d011682016040523d82523d6000602084013e613b04565b606091505b5091509150818015613b2e575080511580613b2e575080806020019051810190613b2e919061517b565b613b4a5760405162461bcd60e51b81526004016105bc90615890565b613b56888785876146c3565b5050505050505050565b613b68615056565b613b70615056565b613b78615056565b604051636226795560e01b81526001600160a01b03861690636226795590613ba4908790600401615e1e565b604080518083038186803b158015613bbb57600080fd5b505afa158015613bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf3919061538c565b91509150600080613c03846122ca565b119050600080613c12846122ca565b1190508180613c1e5750805b15613d85576000876001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015613c5e57600080fd5b505afa158015613c72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c96919061533a565b90508115613cb95761019c54613cb99082908b906001600160a01b031687613a2e565b8215613d695761019d546001600160a01b0316613ce85760405162461bcd60e51b81526004016105bc90615c79565b61019d54613d039082908b906001600160a01b031688613a2e565b61019d54604051630a8d9b6760e01b81526001600160a01b0390911690630a8d9b6790613d36908490899060040161546b565b600060405180830381600087803b158015613d5057600080fd5b505af1158015613d64573d6000803e3d6000fd5b505050505b613d79858563ffffffff613f9b16565b95505050505050612e36565b505050509392505050565b613d98615056565b8180600001516001600160ff1b031015604051806060016040528060338152602001615f4e6033913990613ddf5760405162461bcd60e51b81526004016105bc91906154fc565b50613de8615056565b613509613df485612bc3565b869063ffffffff61315e16565b613e09615069565b613e11615008565b613e1b85856104e4565b9050613e2a8160000151612fb6565b613e32615056565b613e3e86866000611831565b915050613e49615056565b613e51615056565b613e59615056565b613e64898686612c49565b5087519295509093509150613e819060001963ffffffff612c2716565b606087015260a086018490526040860182905260808601819052613eaa6000196109de85612bc3565b60c087015284516001600160a01b038a169063d71ec2ad90600090613ece906122ca565b13613eda576001613edd565b60005b8751613ee890613098565b8a6040518463ffffffff1660e01b8152600401613f07939291906154a1565b602060405180830381600087803b158015613f2157600080fd5b505af1158015613f35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f599190615371565b60208701526040850151613f85908a9061361e90600019906109de90610c958a8963ffffffff61318116565b613f8f8989612fde565b50505050509392505050565b613fa3615056565b613fab615056565b825184516129b79163ffffffff614b3516565b603354610100900460ff1680613fd75750613fd7614b5a565b80613fe5575060335460ff16155b6140015760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff1615801561402c576033805460ff1961ff0019909116610100171660011790555b614034614b60565b61403c614be1565b8015612fdb576033805461ff001916905550565b603354610100900460ff16806140695750614069614b5a565b80614077575060335460ff16155b6140935760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff161580156140be576033805460ff1961ff0019909116610100171660011790555b610130805460ff191660011790558015612fdb576033805461ff001916905550565b6140e8615056565b6140f0615056565b6140f8615056565b614100615056565b61410c87876000611831565b91509150614118615056565b614120615056565b61412c89896001611831565b91509150614139816122ca565b614142846122ca565b13600088600181111561415157fe5b141461415e578082614161565b82845b909a909950975050505050505050565b614179615056565b614181615056565b614189615056565b614194878787612c49565b505091509150613a238461150683610c7b86612bc3565b6000601836108015906141c257506141c2336110fd565b156141d6575060131936013560601c61111c565b503361111c565b6141e5615056565b6141ed615008565b6141f785856104e4565b90506142068160000151612fb6565b61420e615056565b614216615056565b614221878787611831565b91509150613a2387848385614171565b614239615056565b614241615056565b825184516129b79163ffffffff6145df16565b61425c615056565b614264615056565b83516129b7908463ffffffff614cbb16565b61427e615056565b506001600160a01b038216600090815261019b60209081526040918290208251918201909252905481526142b1826122ca565b6142ba826122ca565b11156142f2576142d0818363ffffffff612d0c16565b6001600160a01b038416600090815261019b6020526040902090519055612b94565b61019c546001600160a01b031663252978b884614315858563ffffffff612d0c16565b6040518363ffffffff1660e01b815260040161433292919061546b565b600060405180830381600087803b15801561434c57600080fd5b505af1158015614360573d6000803e3d6000fd5b5050505061436c6129c0565b6001600160a01b038416600090815261019b6020526040902090519055505050565b60006143986145cd565b6001600160a01b038316600090815261019a602052604090819020829055519091507f97f920fec5d17ec336df7ad438ca8a76dcfd206ddc1d19b263b6f3e6ba3c4f31906143e99084908490615447565b60405180910390a15050565b600061440082613098565b5192915050565b6000612e3683836012614cfd565b60008061442184614d1b565b90506012811061445f5761445761443f82601263ffffffff6144fe16565b600a0a61444b856122ca565b9063ffffffff614dff16565b915050612118565b61448b61447360128363ffffffff6144fe16565b600a0a61447f856122ca565b9063ffffffff614cbb16565b949350505050565b6000826144a257506000612118565b826000191480156144b65750600160ff1b82145b156144d35760405162461bcd60e51b81526004016105bc90615af8565b828202828482816144e057fe5b0514612e365760405162461bcd60e51b81526004016105bc90615af8565b6000612e3683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614e39565b614548615056565b612e3683846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401614578919061540f565b60206040518083038186803b15801561459057600080fd5b505afa1580156145a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145c891906153b7565b614e65565b4390565b6000612e3683836012614ef7565b60008183038183128015906145f45750838113155b80614609575060008312801561460957508381135b612e365760405162461bcd60e51b81526004016105bc90615ce4565b6000612e3683836012614f16565b60008282018183128015906146485750838112155b8061465d575060008312801561465d57508381125b612e365760405162461bcd60e51b81526004016105bc90615776565b600061468482614d1b565b6001600160a01b0383166000908152602081905260409020549091508114612bbf576001600160a01b0391909116600090815260208190526040902055565b6146ea6146e06146d38685614e65565b839063ffffffff613f9b16565b6136d48686614540565b60000b15612fb05760405162461bcd60e51b81526004016105bc90615ca2565b60ff16600a0a90565b61471b615056565b614723615056565b825184516129b79163ffffffff614f4016565b61473e615056565b60008086600181111561474d57fe5b1461475957600161475c565b60005b9050614766615056565b6040516375df638960e01b81526147ee906001600160a01b038a16906375df63899061479c9086908b908b908b906004016154c4565b602060405180830381600087803b1580156147b657600080fd5b505af11580156147ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d99190615371565b90508160018111156147fc57fe5b60011415613a23576148168160001963ffffffff612c2716565b92505050613509565b600061485d836001600160a01b031663525454106040518163ffffffff1660e01b815260040160206040518083038186803b15801561170c57600080fd5b9050828115612fb05761486e615056565b6001600160a01b038216600090815261019960209081526040918290208251918201909252905481526148a890859063ffffffff61318116565b905060006148b5826122ca565b12156148c6576148c36129c0565b90505b60006148d1856122ca565b131561492557826148e1826143f5565b111580614909575061019e546001600160a01b03166148fe6122bb565b6001600160a01b0316145b6149255760405162461bcd60e51b81526004016105bc9061552f565b61492e81613098565b6001600160a01b038316600090815261019960205260409020905190555050505050565b61495a615069565b614962615069565b61496f88876126806129c0565b905061497e81604001516122ca565b1561499b5760405162461bcd60e51b81526004016105bc90615b76565b6149a3615056565b60208201516149c8906149bc888863ffffffff61299416565b9063ffffffff612d0c16565b90506149dd610a72828763ffffffff6130c616565b6149e957819250614b29565b6149f1615056565b6149fe83606001516143f5565b614a07866122ca565b1115614a2d57614a2a614a1d8460600151613098565b869063ffffffff612d0c16565b90505b614a35615069565b614a428b8b85858b6135b6565b905060405180610100016040528082600001518152602001614a7583602001518760200151613f9b90919063ffffffff16565b8152602001614a9583604001518760400151613f9b90919063ffffffff16565b8152602001614ab58360600151876060015161331b90919063ffffffff16565b8152602001614ad58360800151876080015161331b90919063ffffffff16565b8152602001614af58360a001518760a0015161331b90919063ffffffff16565b8152602001614b158360c001518760c0015161331b90919063ffffffff16565b8152602001614b226129c0565b9052945050505b50509695505050505050565b600082820183811015612e365760405162461bcd60e51b81526004016105bc90615688565b303b1590565b603354610100900460ff1680614b795750614b79614b5a565b80614b87575060335460ff16155b614ba35760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff1615801561403c576033805460ff1961ff0019909116610100171660011790558015612fdb576033805461ff001916905550565b603354610100900460ff1680614bfa5750614bfa614b5a565b80614c08575060335460ff16155b614c245760405162461bcd60e51b81526004016105bc90615aaa565b603354610100900460ff16158015614c4f576033805460ff1961ff0019909116610100171660011790555b6000614c596122bb565b609880546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015612fdb576033805461ff001916905550565b6000612e3683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614f4e565b600061448b614d0b8361470a565b61447f868663ffffffff614dff16565b6001600160a01b038116600090815260208190526040812054806121185760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b03871691614d7d916153f3565b600060405180830381855afa9150503d8060008114614db8576040519150601f19603f3d011682016040523d82523d6000602084013e614dbd565b606091505b5091509150818015614dcf5750805115155b614deb5760405162461bcd60e51b81526004016105bc90615825565b8080602001905181019061350991906153b7565b600082614e0e57506000612118565b82820282848281614e1b57fe5b0414612e365760405162461bcd60e51b81526004016105bc90615a04565b60008184841115614e5d5760405162461bcd60e51b81526004016105bc91906154fc565b505050900390565b614e6d615056565b6000614e7884614d1b565b905060128110614ebd57604080516020810190915280614eb2614ea284601263ffffffff6144fe16565b8690600a0a63ffffffff614cbb16565b815250915050612118565b604080516020810190915280614eed614edd60128563ffffffff6144fe16565b8690600a0a63ffffffff614dff16565b9052949350505050565b600061448b8361447f614f098561470a565b879063ffffffff614dff16565b600061448b614f248361470a565b614f34868663ffffffff61449316565b9063ffffffff614f8516565b6000612e3683836012614fe9565b60008183614f6f5760405162461bcd60e51b81526004016105bc91906154fc565b506000838581614f7b57fe5b0495945050505050565b600081614fa45760405162461bcd60e51b81526004016105bc90615d6a565b81600019148015614fb85750600160ff1b83145b15614fd55760405162461bcd60e51b81526004016105bc9061598c565b6000828481614fe057fe5b05949350505050565b600061448b83614f34614ffb8561470a565b879063ffffffff61449316565b6040518060c0016040528061501b615056565b8152602001615028615056565b8152602001615035615056565b8152602001615042615056565b815260200160008152602001600081525090565b6040518060200160405280600081525090565b60405180610100016040528061507d615008565b815260200161508a615056565b8152602001615097615056565b81526020016150a4615056565b81526020016150b1615056565b81526020016150be615056565b81526020016150cb615056565b81526020016150d8615056565b905290565b6000602082840312156150ee578081fd5b6150f86020615ecc565b9135825250919050565b600060208284031215615113578081fd5b61511d6020615ecc565b9151825250919050565b600060208284031215615138578081fd5b8135612e3681615f2a565b60008060408385031215615155578081fd5b823561516081615f2a565b9150602083013561517081615f3f565b809150509250929050565b60006020828403121561518c578081fd5b8151612e3681615f3f565b600080604083850312156151a9578182fd5b82356151b481615f2a565b9150602083013561517081615f2a565b6000806000606084860312156151d8578081fd5b83356151e381615f2a565b925060208401356151f381615f2a565b9150604084013560038110615206578182fd5b809150509250925092565b600080600060608486031215615225578283fd5b833561523081615f2a565b9250602084013561524081615f2a565b915061524f85604086016150dd565b90509250925092565b600080600080600060a0868803121561526f578081fd5b853561527a81615f2a565b945060208601356002811061528d578182fd5b935061529c87604088016150dd565b92506152ab87606088016150dd565b91506152ba87608088016150dd565b90509295509295909350565b60008082840360408112156152d9578283fd5b83356152e481615f2a565b92506020601f19820112156152f7578182fd5b506020830190509250929050565b60008060408385031215615317578081fd5b823561532281615f2a565b915061533184602085016150dd565b90509250929050565b60006020828403121561534b578081fd5b8151612e3681615f2a565b600060208284031215615367578081fd5b612e3683836150dd565b600060208284031215615382578081fd5b612e368383615102565b6000806040838503121561539e578182fd5b6153a88484615102565b91506153318460208501615102565b6000602082840312156153c8578081fd5b5051919050565b600080604083850312156153e1578182fd5b82359150602083013561517081615f2a565b60008251615405818460208701615efe565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6001600160a01b0392909216825251602082015260400190565b6040810161549284615ef3565b82529151602090910152919050565b606081016154ae85615ef3565b8252925160208201529051604090910152919050565b608081016154d186615ef3565b825293516020820152915160408301521515606090910152919050565b918252602082015260400190565b600060208252825180602084015261551b816040850160208701615efe565b601f01601f19169190910160400192915050565b6020808252600a90820152691bdd995c881b1a5b5a5d60b21b604082015260600190565b6020808252600d908201526c185b5b481b9bdd08199bdd5b99609a1b604082015260600190565b6020808252601190820152700706f736974696f6e53697a65206973203607c1b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252601490820152730dac2e4ced2dc40d2e640dcdee840cadcdeeaced60631b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601490820152731a5b9d985b1a59081d1bdad95b88185b5bdd5b9d60621b604082015260600190565b602080825260089082015267189859081919589d60c21b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b6020808252600f908201526e06e6f74206261636b73746f70204c5608c1b604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6f6e6c79206f6e6520616374696f6e20616c6c6f776564000000000000000000604082015260600190565b6020808252601e908201527f4d617267696e20726174696f206e6f74206d6565742063726974657269610000604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b6020808252601a908201527f76616c7565206f66206f70656e4e6f74696f6e616c203c3d2030000000000000604082015260600190565b6020808252601d908201527f6672656520636f6c6c61746572616c206973206e6f7420656e6f756768000000604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601d908201527f4c657373207468616e206d696e696d616c2071756f746520746f6b656e000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252600a90820152690696e70757420697320360b41b604082015260600190565b60208082526021908201527f696e76616c6964207061727469616c206c69717569646174696f6e20726174696040820152606f60f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526027908201527f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f604082015266766572666c6f7760c81b606082015260800190565b6020808252601d908201527f68697420706f736974696f6e2073697a6520757070657220626f756e64000000604082015260600190565b6020808252601d908201527f72656475636520616e20756e646572776174657220706f736974696f6e000000604082015260600190565b6020808252601d908201527f4d6f7265207468616e206d6178696d616c2071756f746520746f6b656e000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6020808252600f908201526e125b9d985b1a5908199959541bdbdb608a1b604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252818101527f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600060c08201905082515182526020830151516020830152604083015151604083015260608301515160608301526080830151608083015260a083015160a083015292915050565b9051815260200190565b915182521515602082015260400190565b9151825251602082015260400190565b90815260200190565b9a8b5260208b019990995260408a01979097526060890195909552608088019390935260a087019190915260c086015260e08501526101008401526101208301526101408201526101600190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b60405181810167ffffffffffffffff81118282101715615eeb57600080fd5b604052919050565b806002811061111057fe5b60005b83811015615f19578181015183820152602001615f01565b83811115612fb05750506000910152565b6001600160a01b0381168114612fdb57600080fd5b8015158114612fdb57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a264697066735822122032b7537b7bc81ee74fe25ebc914886dc0d228d9b68cdf14aeb102774239752b064736f6c63430006090033",
  "devdoc": {
    "methods": {
      "addMargin(address,(uint256))": {
        "params": {
          "_addedMargin": "added margin in 18 digits",
          "_amm": "IAmm address"
        }
      },
      "closePosition(address,(uint256))": {
        "params": {
          "_amm": "IAmm address"
        }
      },
      "getLatestCumulativePremiumFraction(address)": {
        "params": {
          "_amm": "IAmm address"
        },
        "returns": {
          "_0": "latest cumulative premium fraction in 18 digits"
        }
      },
      "getMarginRatio(address,address)": {
        "params": {
          "_amm": "IAmm address",
          "_trader": "trader address"
        },
        "returns": {
          "_0": "margin ratio in 18 digits"
        }
      },
      "getPosition(address,address)": {
        "params": {
          "_amm": "IAmm address",
          "_trader": "trader address"
        },
        "returns": {
          "_0": "struct Position"
        }
      },
      "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": {
        "params": {
          "_amm": "IAmm address",
          "_pnlCalcOption": "enum PnlCalcOption, SPOT_PRICE for spot price and TWAP for twap price",
          "_trader": "trader address"
        },
        "returns": {
          "positionNotional": "position notional",
          "unrealizedPnl": "unrealized Pnl"
        }
      },
      "liquidate(address,address)": {
        "details": "liquidator can NOT open any positions in the same block to prevent from price manipulation.",
        "params": {
          "_amm": "IAmm address",
          "_trader": "trader address"
        }
      },
      "openPosition(address,uint8,(uint256),(uint256),(uint256))": {
        "params": {
          "_amm": "amm address",
          "_baseAssetAmountLimit": "minimum base asset amount expected to get to prevent from slippage.",
          "_leverage": "leverage  in 18 digits. Can Not be 0",
          "_quoteAssetAmount": "quote asset amount in 18 digits. Can Not be 0",
          "_side": "enum Side; BUY for long and SELL for short"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payFunding(address)": {
        "params": {
          "_amm": "IAmm address"
        }
      },
      "removeMargin(address,(uint256))": {
        "params": {
          "_amm": "IAmm address",
          "_removedMargin": "removed margin in 18 digits"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBackstopLiquidityProvider(address,bool)": {
        "details": "only owner can call",
        "params": {
          "account": "provider address",
          "isProvider": "wether the account is a backstop liquidity provider"
        }
      },
      "setFeePool(address)": {
        "details": "only owner can call"
      },
      "setLiquidationFeeRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_liquidationFeeRatio": "new liquidation fee ratio in 18 digits"
        }
      },
      "setMaintenanceMarginRatio((uint256))": {
        "details": "only owner can call",
        "params": {
          "_maintenanceMarginRatio": "new maintenance margin ratio in 18 digits"
        }
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "setPartialLiquidationRatio((uint256))": {
        "details": "only owner can call"
      },
      "setWhitelist(address)": {
        "details": "only owner can call",
        "params": {
          "_whitelist": "an address"
        }
      },
      "settlePosition(address)": {
        "params": {
          "_amm": "IAmm address"
        }
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "addMargin(address,(uint256))": {
        "notice": "add margin to increase margin ratio"
      },
      "closePosition(address,(uint256))": {
        "notice": "close all the positions"
      },
      "getLatestCumulativePremiumFraction(address)": {
        "notice": "get latest cumulative premium fraction."
      },
      "getMarginRatio(address,address)": {
        "notice": "get margin ratio, marginRatio = (margin + funding payment + unrealized Pnl) / positionNotional use spot and twap price to calculate unrealized Pnl, final unrealized Pnl depends on which one is higher"
      },
      "getPosition(address,address)": {
        "notice": "get personal position information"
      },
      "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": {
        "notice": "get position notional and unrealized Pnl without fee expense and funding payment"
      },
      "liquidate(address,address)": {
        "notice": "liquidate trader's underwater position. Require trader's margin ratio less than maintenance margin ratio"
      },
      "openPosition(address,uint8,(uint256),(uint256),(uint256))": {
        "notice": "open a position"
      },
      "payFunding(address)": {
        "notice": "if funding rate is positive, traders with long position pay traders with short position and vice versa."
      },
      "removeMargin(address,(uint256))": {
        "notice": "remove margin to decrease margin ratio"
      },
      "setBackstopLiquidityProvider(address,bool)": {
        "notice": "set backstop liquidity provider"
      },
      "setFeePool(address)": {
        "notice": "set the fee pool address"
      },
      "setLiquidationFeeRatio((uint256))": {
        "notice": "set liquidation fee ratio"
      },
      "setMaintenanceMarginRatio((uint256))": {
        "notice": "set maintenance margin ratio"
      },
      "setPartialLiquidationRatio((uint256))": {
        "notice": "set the margin ratio after deleveraging"
      },
      "setWhitelist(address)": {
        "notice": "add an address in the whitelist. People in the whitelist can hold unlimited positions."
      },
      "settlePosition(address)": {
        "notice": "settle all the positions when amm is shutdown. The settlement price is according to IAmm.settlementPrice"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17537,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "decimalMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17541,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 151,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "initialized",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "initializing",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "______gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18200,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 18202,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_candidate",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 18376,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2312,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_paused",
        "offset": 0,
        "slot": "204",
        "type": "t_bool"
      },
      {
        "astId": 2401,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11182,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2410,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "_notEntered",
        "offset": 0,
        "slot": "304",
        "type": "t_bool"
      },
      {
        "astId": 2451,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17235,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "354",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "trustedForwarder",
        "offset": 0,
        "slot": "404",
        "type": "t_address"
      },
      {
        "astId": 5427,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "versionRecipient",
        "offset": 0,
        "slot": "405",
        "type": "t_string_storage"
      },
      {
        "astId": 5429,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "initMarginRatio",
        "offset": 0,
        "slot": "406",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 5431,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "maintenanceMarginRatio",
        "offset": 0,
        "slot": "407",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 5433,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "liquidationFeeRatio",
        "offset": 0,
        "slot": "408",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 5437,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "openInterestNotionalMap",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_address,t_struct(decimal)17269_storage)"
      },
      {
        "astId": 5441,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "ammMap",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_struct(AmmMap)5424_storage)"
      },
      {
        "astId": 5445,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "prepaidBadDebt",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_address,t_struct(decimal)17269_storage)"
      },
      {
        "astId": 5447,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "insuranceFund",
        "offset": 0,
        "slot": "412",
        "type": "t_contract(IInsuranceFund)14923"
      },
      {
        "astId": 5449,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "feePool",
        "offset": 0,
        "slot": "413",
        "type": "t_contract(IMultiTokenRewardRecipient)14959"
      },
      {
        "astId": 5451,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "whitelist",
        "offset": 0,
        "slot": "414",
        "type": "t_address"
      },
      {
        "astId": 5455,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "__gap",
        "offset": 0,
        "slot": "415",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5457,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "partialLiquidationRatio",
        "offset": 0,
        "slot": "465",
        "type": "t_struct(decimal)17269_storage"
      },
      {
        "astId": 5461,
        "contract": "contracts/ClearingHouse.sol:ClearingHouse",
        "label": "backstopLiquidityProviderMap",
        "offset": 0,
        "slot": "466",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(signedDecimal)18667_storage)dyn_storage": {
        "base": "t_struct(signedDecimal)18667_storage",
        "encoding": "dynamic_array",
        "label": "struct SignedDecimal.signedDecimal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInsuranceFund)14923": {
        "encoding": "inplace",
        "label": "contract IInsuranceFund",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiTokenRewardRecipient)14959": {
        "encoding": "inplace",
        "label": "contract IMultiTokenRewardRecipient",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AmmMap)5424_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClearingHouse.AmmMap)",
        "numberOfBytes": "32",
        "value": "t_struct(AmmMap)5424_storage"
      },
      "t_mapping(t_address,t_struct(Position)5397_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ClearingHouse.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)5397_storage"
      },
      "t_mapping(t_address,t_struct(decimal)17269_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Decimal.decimal)",
        "numberOfBytes": "32",
        "value": "t_struct(decimal)17269_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AmmMap)5424_storage": {
        "encoding": "inplace",
        "label": "struct ClearingHouse.AmmMap",
        "members": [
          {
            "astId": 5416,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "lastRestrictionBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5419,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "cumulativePremiumFractions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(signedDecimal)18667_storage)dyn_storage"
          },
          {
            "astId": 5423,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "positionMap",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Position)5397_storage)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Position)5397_storage": {
        "encoding": "inplace",
        "label": "struct ClearingHouse.Position",
        "members": [
          {
            "astId": 5386,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(signedDecimal)18667_storage"
          },
          {
            "astId": 5388,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "margin",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 5390,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "openNotional",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 5392,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "lastUpdatedCumulativePremiumFraction",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(signedDecimal)18667_storage"
          },
          {
            "astId": 5394,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "liquidityHistoryIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5396,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "blockNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(decimal)17269_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 17268,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(signedDecimal)18667_storage": {
        "encoding": "inplace",
        "label": "struct SignedDecimal.signedDecimal",
        "members": [
          {
            "astId": 18666,
            "contract": "contracts/ClearingHouse.sol:ClearingHouse",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}