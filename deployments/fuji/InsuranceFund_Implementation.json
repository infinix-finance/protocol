{
  "address": "0x083d7bACba065d260041B4c1888e6B09650A1974",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        }
      ],
      "name": "AmmAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "amm",
          "type": "address"
        }
      ],
      "name": "AmmRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "ShutdownAllAmms",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "addAmm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchangeWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAmms",
      "outputs": [
        {
          "internalType": "contract IAmm[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuoteTokenLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ifnxToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationMonitor",
      "outputs": [
        {
          "internalType": "contract IInflationMonitor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "isExistedAmm",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "contract IMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "quoteTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAmm",
          "name": "_amm",
          "type": "address"
        }
      ],
      "name": "removeAmm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IExchangeWrapper",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInflationMonitor",
          "name": "_inflationMonitor",
          "type": "address"
        }
      ],
      "name": "setInflationMonitor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMinter",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownAllAmm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x898ab920a4e251aa5c4a43337255db2f1b0b04c3aeb8373fa060e5e41a1c871a",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x083d7bACba065d260041B4c1888e6B09650A1974",
    "transactionIndex": 0,
    "gasUsed": "2485953",
    "logsBloom": "0x
    "blockHash": "0x23050f1f6d434e0203fd3ad315dbebd1878624c048cca804bf21b750eb1967b7",
    "transactionHash": "0x898ab920a4e251aa5c4a43337255db2f1b0b04c3aeb8373fa060e5e41a1c871a",
    "logs": [],
    "blockNumber": 10579768,
    "cumulativeGasUsed": "2485953",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f54165b21f7a8419402d8a8ce3bda827",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"}],\"name\":\"AmmAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"}],\"name\":\"AmmRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"ShutdownAllAmms\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"addAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchangeWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAmms\",\"outputs\":[{\"internalType\":\"contract IAmm[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuoteTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifnxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationMonitor\",\"outputs\":[{\"internalType\":\"contract IInflationMonitor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"isExistedAmm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quoteTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAmm\",\"name\":\"_amm\",\"type\":\"address\"}],\"name\":\"removeAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExchangeWrapper\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInflationMonitor\",\"name\":\"_inflationMonitor\",\"type\":\"address\"}],\"name\":\"setInflationMonitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMinter\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownAllAmm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addAmm(address)\":{\"details\":\"only owner can call\",\"params\":{\"_amm\":\"IAmm address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAmm(address)\":{\"details\":\"only owner can call. no need to call\",\"params\":{\"_amm\":\"IAmm address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"shutdownAllAmm()\":{\"details\":\"only owner can call. Emit `ShutdownAllAmms` event\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"},\"withdraw(address,(uint256))\":{\"params\":{\"_amount\":\"the amount of quoteToken caller want to withdraw\"}}}},\"userdoc\":{\"methods\":{\"shutdownAllAmm()\":{\"notice\":\"shutdown all Amms when fatal error happens\"},\"withdraw(address,(uint256))\":{\"notice\":\"withdraw token to caller\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceFund.sol\":\"InsuranceFund\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/InsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { IfnxFiOwnableUpgrade } from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeSafe\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Decimal } from \\\"./utils/Decimal.sol\\\";\\nimport { IExchangeWrapper } from \\\"./interface/IExchangeWrapper.sol\\\";\\nimport { IInsuranceFund } from \\\"./interface/IInsuranceFund.sol\\\";\\nimport { BlockContext } from \\\"./utils/BlockContext.sol\\\";\\nimport { DecimalERC20 } from \\\"./utils/DecimalERC20.sol\\\";\\nimport { IMinter } from \\\"./interface/IMinter.sol\\\";\\nimport { IAmm } from \\\"./interface/IAmm.sol\\\";\\nimport { IInflationMonitor } from \\\"./interface/IInflationMonitor.sol\\\";\\n\\ncontract InsuranceFund is IInsuranceFund, IfnxFiOwnableUpgrade, BlockContext, ReentrancyGuardUpgradeSafe, DecimalERC20 {\\n    using Decimal for Decimal.decimal;\\n\\n    //\\n    // EVENTS\\n    //\\n\\n    event Withdrawn(address withdrawer, uint256 amount);\\n    event TokenAdded(address tokenAddress);\\n    event TokenRemoved(address tokenAddress);\\n    event ShutdownAllAmms(uint256 blockNumber);\\n    event AmmAdded(address amm);\\n    event AmmRemoved(address amm);\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n\\n    mapping(address => bool) private ammMap;\\n    mapping(address => bool) private quoteTokenMap;\\n    IAmm[] private amms;\\n    IERC20[] public quoteTokens;\\n\\n    // contract dependencies\\n    IExchangeWrapper public exchange;\\n    IERC20 public ifnxToken;\\n    IMinter public minter;\\n    IInflationMonitor public inflationMonitor;\\n    address private beneficiary;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function initialize() external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @dev only owner can call\\n     * @param _amm IAmm address\\n     */\\n    function addAmm(IAmm _amm) public onlyOwner {\\n        require(!isExistedAmm(_amm), \\\"amm already added\\\");\\n        ammMap[address(_amm)] = true;\\n        amms.push(_amm);\\n        emit AmmAdded(address(_amm));\\n\\n        // add token if it's new one\\n        IERC20 token = _amm.quoteAsset();\\n        if (!isQuoteTokenExisted(token)) {\\n            quoteTokens.push(token);\\n            quoteTokenMap[address(token)] = true;\\n            emit TokenAdded(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev only owner can call. no need to call\\n     * @param _amm IAmm address\\n     */\\n    function removeAmm(IAmm _amm) external onlyOwner {\\n        require(isExistedAmm(_amm), \\\"amm not existed\\\");\\n        ammMap[address(_amm)] = false;\\n        uint256 ammLength = amms.length;\\n        for (uint256 i = 0; i < ammLength; i++) {\\n            if (amms[i] == _amm) {\\n                amms[i] = amms[ammLength - 1];\\n                amms.pop();\\n                emit AmmRemoved(address(_amm));\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice shutdown all Amms when fatal error happens\\n     * @dev only owner can call. Emit `ShutdownAllAmms` event\\n     */\\n    function shutdownAllAmm() external onlyOwner {\\n        if (!inflationMonitor.isOverMintThreshold()) {\\n            return;\\n        }\\n        for (uint256 i; i < amms.length; i++) {\\n            amms[i].shutdown();\\n        }\\n        emit ShutdownAllAmms(block.number);\\n    }\\n\\n    function removeToken(IERC20 _token) external onlyOwner {\\n        require(isQuoteTokenExisted(_token), \\\"token not existed\\\");\\n\\n        quoteTokenMap[address(_token)] = false;\\n        uint256 quoteTokensLength = getQuoteTokenLength();\\n        for (uint256 i = 0; i < quoteTokensLength; i++) {\\n            if (quoteTokens[i] == _token) {\\n                if (i < quoteTokensLength - 1) {\\n                    quoteTokens[i] = quoteTokens[quoteTokensLength - 1];\\n                }\\n                quoteTokens.pop();\\n                break;\\n            }\\n        }\\n\\n        // exchange and transfer to the quoteToken with the most value. if no more quoteToken, buy protocol tokens\\n        // TODO use curve or balancer fund token for pooling the fees will be less painful\\n        if (balanceOf(_token).toUint() > 0) {\\n            address outputToken = getTokenWithMaxValue();\\n            if (outputToken == address(0)) {\\n                outputToken = address(ifnxToken);\\n            }\\n            swapInput(_token, IERC20(outputToken), balanceOf(_token), Decimal.zero());\\n        }\\n\\n        emit TokenRemoved(address(_token));\\n    }\\n\\n    /**\\n     * @notice withdraw token to caller\\n     * @param _amount the amount of quoteToken caller want to withdraw\\n     */\\n    function withdraw(IERC20 _quoteToken, Decimal.decimal calldata _amount) external override {\\n        require(beneficiary == _msgSender(), \\\"caller is not beneficiary\\\");\\n        require(isQuoteTokenExisted(_quoteToken), \\\"Asset is not supported\\\");\\n\\n        Decimal.decimal memory quoteBalance = balanceOf(_quoteToken);\\n        if (_amount.toUint() > quoteBalance.toUint()) {\\n            Decimal.decimal memory insufficientAmount = _amount.subD(quoteBalance);\\n            swapEnoughQuoteAmount(_quoteToken, insufficientAmount);\\n            quoteBalance = balanceOf(_quoteToken);\\n        }\\n        require(quoteBalance.toUint() >= _amount.toUint(), \\\"Fund not enough\\\");\\n\\n        _transfer(_quoteToken, _msgSender(), _amount);\\n        emit Withdrawn(_msgSender(), _amount.toUint());\\n    }\\n\\n    //\\n    // SETTER\\n    //\\n\\n    function setExchange(IExchangeWrapper _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setBeneficiary(address _beneficiary) external onlyOwner {\\n        beneficiary = _beneficiary;\\n    }\\n\\n    function setMinter(IMinter _minter) public onlyOwner {\\n        minter = _minter;\\n        ifnxToken = minter.getIfnxToken();\\n    }\\n\\n    function setInflationMonitor(IInflationMonitor _inflationMonitor) external onlyOwner {\\n        inflationMonitor = _inflationMonitor;\\n    }\\n\\n    function getQuoteTokenLength() public view returns (uint256) {\\n        return quoteTokens.length;\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n\\n    function getTokenWithMaxValue() internal view returns (address) {\\n        uint256 numOfQuoteTokens = quoteTokens.length;\\n        if (numOfQuoteTokens == 0) {\\n            return address(0);\\n        }\\n        if (numOfQuoteTokens == 1) {\\n            return address(quoteTokens[0]);\\n        }\\n\\n        IERC20 denominatedToken = quoteTokens[0];\\n        IERC20 maxValueToken = denominatedToken;\\n        Decimal.decimal memory valueOfMaxValueToken = balanceOf(denominatedToken);\\n        for (uint256 i = 1; i < numOfQuoteTokens; i++) {\\n            IERC20 quoteToken = quoteTokens[i];\\n            Decimal.decimal memory quoteTokenValue =\\n                exchange.getInputPrice(quoteToken, denominatedToken, balanceOf(quoteToken));\\n            if (quoteTokenValue.cmp(valueOfMaxValueToken) > 0) {\\n                maxValueToken = quoteToken;\\n                valueOfMaxValueToken = quoteTokenValue;\\n            }\\n        }\\n        return address(maxValueToken);\\n    }\\n\\n    function swapInput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal memory inputTokenSold,\\n        Decimal.decimal memory minOutputTokenBought\\n    ) internal returns (Decimal.decimal memory received) {\\n        if (inputTokenSold.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        _approve(inputToken, address(exchange), inputTokenSold);\\n        received = exchange.swapInput(inputToken, outputToken, inputTokenSold, minOutputTokenBought, Decimal.zero());\\n        require(received.toUint() > 0, \\\"Exchange swap error\\\");\\n    }\\n\\n    function swapOutput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal memory outputTokenBought,\\n        Decimal.decimal memory maxInputTokenSold\\n    ) internal returns (Decimal.decimal memory received) {\\n        if (outputTokenBought.toUint() == 0) {\\n            return Decimal.zero();\\n        }\\n        _approve(inputToken, address(exchange), maxInputTokenSold);\\n        received = exchange.swapOutput(inputToken, outputToken, outputTokenBought, maxInputTokenSold, Decimal.zero());\\n        require(received.toUint() > 0, \\\"Exchange swap error\\\");\\n    }\\n\\n    function swapEnoughQuoteAmount(IERC20 _quoteToken, Decimal.decimal memory _requiredQuoteAmount) internal {\\n        IERC20[] memory orderedTokens = getOrderedQuoteTokens(_quoteToken);\\n        for (uint256 i = 0; i < orderedTokens.length; i++) {\\n            // get how many amount of quote token i is still required\\n            Decimal.decimal memory swappedQuoteToken;\\n            Decimal.decimal memory otherQuoteRequiredAmount =\\n                exchange.getOutputPrice(orderedTokens[i], _quoteToken, _requiredQuoteAmount);\\n\\n            // if balance of token i can afford the left debt, swap and return\\n            if (otherQuoteRequiredAmount.toUint() <= balanceOf(orderedTokens[i]).toUint()) {\\n                swappedQuoteToken = swapInput(orderedTokens[i], _quoteToken, otherQuoteRequiredAmount, Decimal.zero());\\n                return;\\n            }\\n\\n            // if balance of token i can't afford the left debt, show hand and move to the next one\\n            swappedQuoteToken = swapInput(orderedTokens[i], _quoteToken, balanceOf(orderedTokens[i]), Decimal.zero());\\n            _requiredQuoteAmount = _requiredQuoteAmount.subD(swappedQuoteToken);\\n        }\\n\\n        // if all the quote tokens can't afford the debt, ask staking token to mint\\n        if (_requiredQuoteAmount.toUint() > 0) {\\n            Decimal.decimal memory requiredIfnxAmount =\\n                exchange.getOutputPrice(ifnxToken, _quoteToken, _requiredQuoteAmount);\\n            minter.mintForLoss(requiredIfnxAmount);\\n            swapInput(ifnxToken, _quoteToken, requiredIfnxAmount, Decimal.zero());\\n        }\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function isExistedAmm(IAmm _amm) public view override returns (bool) {\\n        return ammMap[address(_amm)];\\n    }\\n\\n    function getAllAmms() external view override returns (IAmm[] memory) {\\n        return amms;\\n    }\\n\\n    function isQuoteTokenExisted(IERC20 _token) internal view returns (bool) {\\n        return quoteTokenMap[address(_token)];\\n    }\\n\\n    function getOrderedQuoteTokens(IERC20 _exceptionQuoteToken) internal view returns (IERC20[] memory orderedTokens) {\\n        IERC20[] memory tokens = quoteTokens;\\n        // insertion sort\\n        for (uint256 i = 0; i < getQuoteTokenLength(); i++) {\\n            IERC20 currentToken = quoteTokens[i];\\n            Decimal.decimal memory currentIfnxValue =\\n                exchange.getInputPrice(currentToken, ifnxToken, balanceOf(currentToken));\\n\\n            for (uint256 j = i; j > 0; j--) {\\n                Decimal.decimal memory subsetIfnxValue =\\n                    exchange.getInputPrice(tokens[j - 1], ifnxToken, balanceOf(tokens[j - 1]));\\n                if (currentIfnxValue.toUint() > subsetIfnxValue.toUint()) {\\n                    tokens[j] = tokens[j - 1];\\n                    tokens[j - 1] = currentToken;\\n                }\\n            }\\n        }\\n\\n        orderedTokens = new IERC20[](tokens.length - 1);\\n        uint256 j;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            // jump to the next token\\n            if (tokens[i] == _exceptionQuoteToken) {\\n                continue;\\n            }\\n            orderedTokens[j] = tokens[i];\\n            j++;\\n        }\\n    }\\n\\n    function balanceOf(IERC20 _quoteToken) internal view returns (Decimal.decimal memory) {\\n        return _balanceOf(_quoteToken, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x44458861d3924cacb3f021385c2636670399eabdffb29c51ee0a97cb0f04cf98\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IAmm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"../utils/SignedDecimal.sol\\\";\\n\\ninterface IAmm {\\n    /**\\n     * @notice asset direction, used in getInputPrice, getOutputPrice, swapInput and swapOutput\\n     * @param ADD_TO_AMM add asset to Amm\\n     * @param REMOVE_FROM_AMM remove asset from Amm\\n     */\\n    enum Dir {\\n        ADD_TO_AMM,\\n        REMOVE_FROM_AMM\\n    }\\n\\n    struct LiquidityChangedSnapshot {\\n        SignedDecimal.signedDecimal cumulativeNotional;\\n        // the base/quote reserve of amm right before liquidity changed\\n        Decimal.decimal quoteAssetReserve;\\n        Decimal.decimal baseAssetReserve;\\n        // total position size owned by amm after last snapshot taken\\n        // `totalPositionSize` = currentBaseAssetReserve - lastLiquidityChangedHistoryItem.baseAssetReserve + prevTotalPositionSize\\n        SignedDecimal.signedDecimal totalPositionSize;\\n    }\\n\\n    function swapInput(\\n        Dir _dir,\\n        Decimal.decimal calldata _quoteAssetAmount,\\n        Decimal.decimal calldata _baseAssetAmountLimit,\\n        bool _canOverFluctuationLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        Dir _dir,\\n        Decimal.decimal calldata _baseAssetAmount,\\n        Decimal.decimal calldata _quoteAssetAmountLimit\\n    ) external returns (Decimal.decimal memory);\\n\\n    function shutdown() external;\\n\\n    function settleFunding() external returns (SignedDecimal.signedDecimal memory);\\n\\n    function calcFee(Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory, Decimal.decimal memory);\\n\\n    //\\n    // VIEW\\n    //\\n\\n    function isOverFluctuationLimit(Dir _dirOfBase, Decimal.decimal memory _baseAssetAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function calcBaseAssetAfterLiquidityMigration(\\n        SignedDecimal.signedDecimal memory _baseAssetAmount,\\n        Decimal.decimal memory _fromQuoteReserve,\\n        Decimal.decimal memory _fromBaseReserve\\n    ) external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getInputTwap(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputTwap(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPrice(Dir _dir, Decimal.decimal calldata _quoteAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(Dir _dir, Decimal.decimal calldata _baseAssetAmount)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n\\n    function getInputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _quoteAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getOutputPriceWithReserves(\\n        Dir _dir,\\n        Decimal.decimal memory _baseAssetAmount,\\n        Decimal.decimal memory _quoteAssetPoolAmount,\\n        Decimal.decimal memory _baseAssetPoolAmount\\n    ) external pure returns (Decimal.decimal memory);\\n\\n    function getSpotPrice() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityHistoryLength() external view returns (uint256);\\n\\n    // overridden by state variable\\n    function quoteAsset() external view returns (IERC20);\\n\\n    function open() external view returns (bool);\\n\\n    // can not be overridden by state variable due to type `Deciaml.decimal`\\n    function getSettlementPrice() external view returns (Decimal.decimal memory);\\n\\n    function getBaseAssetDeltaThisFundingPeriod()\\n        external\\n        view\\n        returns (SignedDecimal.signedDecimal memory);\\n\\n    function getCumulativeNotional() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getMaxHoldingBaseAsset() external view returns (Decimal.decimal memory);\\n\\n    function getOpenInterestNotionalCap() external view returns (Decimal.decimal memory);\\n\\n    function getLiquidityChangedSnapshots(uint256 i)\\n        external\\n        view\\n        returns (LiquidityChangedSnapshot memory);\\n\\n    function getBaseAssetDelta() external view returns (SignedDecimal.signedDecimal memory);\\n\\n    function getUnderlyingPrice() external view returns (Decimal.decimal memory);\\n\\n    function isOverSpreadLimit() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d5f998a5439e3776cc385cc68d32bd72b020e31037c025d1372c6bc0a4d768\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IExchangeWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IExchangeWrapper {\\n    function swapInput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata inputTokenSold,\\n        Decimal.decimal calldata minOutputTokenBought,\\n        Decimal.decimal calldata maxPrice\\n    ) external returns (Decimal.decimal memory);\\n\\n    function swapOutput(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata outputTokenBought,\\n        Decimal.decimal calldata maxInputTokeSold,\\n        Decimal.decimal calldata maxPrice\\n    ) external returns (Decimal.decimal memory);\\n\\n    function getInputPrice(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata inputTokenSold\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getOutputPrice(\\n        IERC20 inputToken,\\n        IERC20 outputToken,\\n        Decimal.decimal calldata outputTokenBought\\n    ) external view returns (Decimal.decimal memory);\\n\\n    function getSpotPrice(IERC20 inputToken, IERC20 outputToken)\\n        external\\n        view\\n        returns (Decimal.decimal memory);\\n}\\n\",\"keccak256\":\"0xb3094d49093608a1405cbd8d1b17050ea822435d553205a67c07136c3172b64b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IInflationMonitor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IInflationMonitor {\\n    function isOverMintThreshold() external view returns (bool);\\n\\n    function appendMintedTokenHistory(Decimal.decimal calldata _amount) external;\\n}\\n\",\"keccak256\":\"0xaf2dcbc7d4c7dd85dbcdc699dee05b98f0f6a60d7354b79404ae6c2d57ffca6c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IInsuranceFund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IAmm} from \\\"./IAmm.sol\\\";\\n\\ninterface IInsuranceFund {\\n    function withdraw(IERC20 _quoteToken, Decimal.decimal calldata _amount) external;\\n\\n    function isExistedAmm(IAmm _amm) external view returns (bool);\\n\\n    function getAllAmms() external view returns (IAmm[] memory);\\n}\\n\",\"keccak256\":\"0x69fa2d9a8cd1199229de1de72230673f5941b85eeb08806b0d038b2d05d81a5d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMinter {\\n    function mintReward() external;\\n\\n    function mintForLoss(Decimal.decimal memory _amount) external;\\n\\n    function getIfnxToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x253fd10327d44c024ea635e48c6c5d51202ffef1e79328eb4fe8bacd56a31fba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nabstract contract DecimalERC20 {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // INTERNAL functions\\n    //\\n\\n    // CAUTION: do not input _from == _to s.t. this function will always fail\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transfer failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(IERC20 _token, address _owner)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(IERC20 _token) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(IERC20 _token, uint256 _number)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number.div(10**(tokenDecimals.sub(18))));\\n        }\\n\\n        return Decimal.decimal(_number.mul(10**(uint256(18).sub(tokenDecimals))));\\n    }\\n\\n    function _toUint(IERC20 _token, Decimal.decimal memory _decimal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint().mul(10**(tokenDecimals.sub(18)));\\n        }\\n        return _decimal.toUint().div(10**(uint256(18).sub(tokenDecimals)));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"DecimalERC20: get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.approve.selector, _spender, _toUint(_token, _value))\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"DecimalERC20: balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf97ccdfa07abeda868c8cc6bf80035cf6a4c5c0aa972ffd9bc7fe5f6c62e5170\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n    using SignedSafeMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(signedDecimal memory x) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xf5a874997ac59e59cc1176149e159a095977b145232507e8faa7bd0933d6e7f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    using SignedSafeMath for int256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x5fdb8310e8a1d7f2770179ff12515c0cfbbf83474a263ce316f4a4a9a7dda8b8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612c00806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638da5cb5b116100c3578063c68ade371161007c578063c68ade3714610266578063ca58b19814610279578063cf23097914610281578063d2f7265a14610294578063d926de1c1461029c578063fca3b5aa146102af5761014d565b80638da5cb5b1461021c5780639dd96eb214610224578063b0ecdc2d1461022c578063b7538c6214610234578063bc5920ba14610249578063beb0597a146102515761014d565b80632c9115c7116101155780632c9115c7146101cb5780635fa7b584146101de57806367b1f5df146101f15780636c8381f814610204578063715018a61461020c5780638129fc1c146102145761014d565b806307546172146101525780630774a7841461017057806313af4035146101905780631c31f710146101a5578063252978b8146101b8575b600080fd5b61015a6102c2565b604051610167919061259f565b60405180910390f35b61018361017e366004612472565b6102d2565b6040516101679190612619565b6101a361019e366004612472565b6102f1565b005b6101a36101b3366004612472565b6103d3565b6101a36101c63660046124ca565b61042b565b61015a6101d9366004612553565b6105ae565b6101a36101ec366004612472565b6105d6565b6101a36101ff366004612472565b6107dd565b61015a610835565b6101a3610845565b6101a36108c4565b61015a610957565b6101a3610966565b61015a610aee565b61023c610afe565b60405161016791906125cc565b6101a3610b61565b610259610c24565b6040516101679190612b59565b6101a3610274366004612472565b610c2b565b61015a610c83565b6101a361028f366004612472565b610c93565b61015a610e2d565b6101a36102aa366004612472565b610e3d565b6101a36102bd366004612472565b611055565b610136546001600160a01b031681565b6001600160a01b03166000908152610130602052604090205460ff1690565b6102f9611143565b6065546001600160a01b0390811691161461032f5760405162461bcd60e51b81526004016103269061289f565b60405180910390fd5b6001600160a01b0381166103555760405162461bcd60e51b815260040161032690612b0d565b6065546001600160a01b03828116911614156103835760405162461bcd60e51b815260040161032690612a25565b6066546001600160a01b03828116911614156103b15760405162461bcd60e51b8152600401610326906127c1565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6103db611143565b6065546001600160a01b039081169116146104085760405162461bcd60e51b81526004016103269061289f565b61013880546001600160a01b0319166001600160a01b0392909216919091179055565b610433611143565b610138546001600160a01b039081169116146104615760405162461bcd60e51b81526004016103269061270c565b61046a82611147565b6104865760405162461bcd60e51b8152600401610326906128ec565b61048e61245f565b61049783611166565b90506104a28161117e565b6104b96104b436859003850185612509565b61117e565b11156104ff576104c761245f565b6104e6826104da36869003860186612509565b9063ffffffff61118216565b90506104f284826111ae565b6104fb84611166565b9150505b6105116104b436849003840184612509565b61051a8261117e565b10156105385760405162461bcd60e51b815260040161032690612ae4565b61055883610544611143565b61055336869003860186612509565b61143e565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5610581611143565b6105936104b436869003860186612509565b6040516105a19291906125b3565b60405180910390a1505050565b61013381815481106105bc57fe5b6000918252602090912001546001600160a01b0316905081565b6105de611143565b6065546001600160a01b0390811691161461060b5760405162461bcd60e51b81526004016103269061289f565b61061481611147565b6106305760405162461bcd60e51b8152600401610326906126aa565b6001600160a01b038116600090815261013160205260408120805460ff19169055610659610c24565b905060005b8181101561074657826001600160a01b0316610133828154811061067e57fe5b6000918252602090912001546001600160a01b0316141561073e576001820381101561070b5761013360018303815481106106b557fe5b60009182526020909120015461013380546001600160a01b0390921691839081106106dc57fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b61013380548061071757fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610746565b60010161065e565b5060006107556104b484611166565b11156107a257600061076561156d565b90506001600160a01b0381166107845750610135546001600160a01b03165b61079f838261079286611166565b61079a6116f2565b61170d565b50505b7f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3826040516107d1919061259f565b60405180910390a15050565b6107e5611143565b6065546001600160a01b039081169116146108125760405162461bcd60e51b81526004016103269061289f565b61013480546001600160a01b0319166001600160a01b0392909216919091179055565b6066546001600160a01b03165b90565b61084d611143565b6065546001600160a01b0390811691161461087a5760405162461bcd60e51b81526004016103269061289f565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600054610100900460ff16806108dd57506108dd61180c565b806108eb575060005460ff16155b6109075760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff16158015610932576000805460ff1961ff0019909116610100171660011790555b61093a611812565b610942611890565b8015610954576000805461ff00191690555b50565b6065546001600160a01b031690565b61096e611143565b6065546001600160a01b0390811691161461099b5760405162461bcd60e51b81526004016103269061289f565b61013760009054906101000a90046001600160a01b03166001600160a01b0316633fe204d96040518163ffffffff1660e01b815260040160206040518083038186803b1580156109ea57600080fd5b505afa1580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a22919061248e565b610a2b57610aec565b60005b61013254811015610ab3576101328181548110610a4757fe5b60009182526020822001546040805163fc0e74d160e01b815290516001600160a01b039092169263fc0e74d19260048084019382900301818387803b158015610a8f57600080fd5b505af1158015610aa3573d6000803e3d6000fd5b505060019092019150610a2e9050565b507ffc9f9c6cbb93f675af09b9bb43859333114dfa5e4c5abd35297e153f2434810143604051610ae39190612b59565b60405180910390a15b565b610135546001600160a01b031681565b6060610132805480602002602001604051908101604052809291908181526020018280548015610b5757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b39575b5050505050905090565b6066546001600160a01b0316610b895760405162461bcd60e51b8152600401610326906129d6565b610b91611143565b6066546001600160a01b03908116911614610bbe5760405162461bcd60e51b81526004016103269061277a565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b6101335490565b610c33611143565b6065546001600160a01b03908116911614610c605760405162461bcd60e51b81526004016103269061289f565b61013780546001600160a01b0319166001600160a01b0392909216919091179055565b610137546001600160a01b031681565b610c9b611143565b6065546001600160a01b03908116911614610cc85760405162461bcd60e51b81526004016103269061289f565b610cd1816102d2565b610ced5760405162461bcd60e51b815260040161032690612849565b6001600160a01b038116600090815261013060205260408120805460ff1916905561013254905b81811015610e2857826001600160a01b03166101328281548110610d3457fe5b6000918252602090912001546001600160a01b03161415610e20576101326001830381548110610d6057fe5b60009182526020909120015461013280546001600160a01b039092169183908110610d8757fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610132805480610dc157fe5b600082815260209020810160001990810180546001600160a01b03191690550190556040517fdaad2af263ebb3abf337a324f20752addc3bf170971ce7b80cc3bfea1fcf30ee90610e1390859061259f565b60405180910390a1610e28565b600101610d14565b505050565b610134546001600160a01b031681565b610e45611143565b6065546001600160a01b03908116911614610e725760405162461bcd60e51b81526004016103269061289f565b610e7b816102d2565b15610e985760405162461bcd60e51b8152600401610326906129ab565b6001600160a01b03811660008181526101306020526040808220805460ff19166001908117909155610132805491820181559092527fc53bdfd4aa1ab65dfdaf681ca6bda958ae4a123d4ed68c4277796592280e783590910180546001600160a01b031916909217909155517f10cdbb821aa416c854add806e1d7e8138afe2a538921cebe99b1351362ae38b290610f3190839061259f565b60405180910390a16000816001600160a01b031663fdf262b76040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7457600080fd5b505afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac91906124ae565b9050610fb781611147565b61105157610133805460018082019092557f92e985329fb94cc1b424ebb0f7f2929b6d27383ca94c0ec71c44fb48bdf96d2c0180546001600160a01b0319166001600160a01b0384169081179091556000908152610131602052604090819020805460ff1916909217909155517f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4906107d190839061259f565b5050565b61105d611143565b6065546001600160a01b0390811691161461108a5760405162461bcd60e51b81526004016103269061289f565b61013680546001600160a01b0319166001600160a01b0383811691909117918290556040805163343f70ff60e01b81529051929091169163343f70ff91600480820192602092909190829003018186803b1580156110e757600080fd5b505afa1580156110fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111f91906124ae565b61013580546001600160a01b0319166001600160a01b039290921691909117905550565b3390565b6001600160a01b03166000908152610131602052604090205460ff1690565b61116e61245f565b6111788230611906565b92915050565b5190565b61118a61245f565b61119261245f565b825184516111a59163ffffffff61199a16565b81529392505050565b60606111b9836119dc565b905060005b8151811015611313576111cf61245f565b6111d761245f565b6101345484516001600160a01b039091169063c643ea63908690869081106111fb57fe5b602002602001015188886040518463ffffffff1660e01b815260040161122393929190612624565b60206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611273919061252e565b90506112946104b485858151811061128757fe5b6020026020010151611166565b61129d8261117e565b116112ce576112c38484815181106112b157fe5b6020026020010151878361079a6116f2565b915050505050611051565b6112f58484815181106112dd57fe5b60200260200101518761079287878151811061128757fe5b9150611307858363ffffffff61118216565b945050506001016111be565b50600061131f8361117e565b1115610e285761132d61245f565b610134546101355460405163c643ea6360e01b81526001600160a01b039283169263c643ea63926113679291169088908890600401612624565b60206040518083038186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b7919061252e565b6101365460405163b90ffc4160e01b81529192506001600160a01b03169063b90ffc41906113e9908490600401612b4f565b600060405180830381600087803b15801561140357600080fd5b505af1158015611417573d6000803e3d6000fd5b50506101355461143792506001600160a01b03169050858361079a6116f2565b5050505050565b61144783611d67565b61144f61245f565b6114598484611906565b905060006114678584611db1565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016114929291906125b3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516114d09190612583565b6000604051808303816000865af19150503d806000811461150d576040519150601f19603f3d011682016040523d82523d6000602084013e611512565b606091505b509150915081801561153c57508051158061153c57508080602001905181019061153c919061248e565b6115585760405162461bcd60e51b8152600401610326906126d5565b61156487878587611e27565b50505050505050565b6101335460009080611583576000915050610842565b80600114156115b95761013360008154811061159b57fe5b6000918252602090912001546001600160a01b031691506108429050565b60006101336000815481106115ca57fe5b6000918252602090912001546001600160a01b03169050806115ea61245f565b6115f383611166565b905060015b848110156116e8576000610133828154811061161057fe5b6000918252602090912001546001600160a01b0316905061162f61245f565b610134546001600160a01b031663c1094e5b838861164c82611166565b6040518463ffffffff1660e01b815260040161166a93929190612624565b60206040518083038186803b15801561168257600080fd5b505afa158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba919061252e565b905060006116ce828663ffffffff611e8016565b60000b13156116de578194508093505b50506001016115f8565b5090935050505090565b6116fa61245f565b5060408051602081019091526000815290565b61171561245f565b61171e8361117e565b6117315761172a6116f2565b9050611804565b6101345461174a9086906001600160a01b031685611eb1565b610134546001600160a01b031663e5e75d1e868686866117686116f2565b6040518663ffffffff1660e01b8152600401611788959493929190612647565b602060405180830381600087803b1580156117a257600080fd5b505af11580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da919061252e565b905060006117e78261117e565b116118045760405162461bcd60e51b815260040161032690612872565b949350505050565b303b1590565b600054610100900460ff168061182b575061182b61180c565b80611839575060005460ff16155b6118555760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff16158015611880576000805460ff1961ff0019909116610100171660011790555b611888611ed7565b610942611f58565b600054610100900460ff16806118a957506118a961180c565b806118b7575060005460ff16155b6118d35760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff161580156118fe576000805460ff1961ff0019909116610100171660011790555b610942612032565b61190e61245f565b61199383846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161193e919061259f565b60206040518083038186803b15801561195657600080fd5b505afa15801561196a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198e919061256b565b6120c1565b9392505050565b600061199383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612153565b606080610133805480602002602001604051908101604052809291908181526020018280548015611a3657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611a18575b50939450600093505050505b611a4a610c24565b811015611c905760006101338281548110611a6157fe5b6000918252602090912001546001600160a01b03169050611a8061245f565b61013454610135546001600160a01b039182169163c1094e5b91859116611aa682611166565b6040518463ffffffff1660e01b8152600401611ac493929190612624565b60206040518083038186803b158015611adc57600080fd5b505afa158015611af0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b14919061252e565b9050825b8015611c8557611b2661245f565b6101345486516001600160a01b039091169063c1094e5b9088906000198601908110611b4e57fe5b602002602001015161013560009054906101000a90046001600160a01b0316611b7f8a600188038151811061128757fe5b6040518463ffffffff1660e01b8152600401611b9d93929190612624565b60206040518083038186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed919061252e565b9050611bf88161117e565b611c018461117e565b1115611c7b57856001830381518110611c1657fe5b6020026020010151868381518110611c2a57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083866001840381518110611c5a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060001901611b18565b505050600101611a42565b50600181510367ffffffffffffffff81118015611cac57600080fd5b50604051908082528060200260200182016040528015611cd6578160200160208202803683370190505b5091506000805b8251811015611d5f57846001600160a01b0316838281518110611cfc57fe5b60200260200101516001600160a01b03161415611d1857611d57565b828181518110611d2457fe5b6020026020010151848381518110611d3857fe5b6001600160a01b03909216602092830291909101909101526001909101905b600101611cdd565b505050919050565b6000611d728261217f565b6001600160a01b038316600090815260fd60205260409020549091508114611051576001600160a01b0391909116600090815260fd6020526040902055565b600080611dbd8461217f565b905060128110611dfb57611df3611ddb82601263ffffffff61199a16565b600a0a611de78561117e565b9063ffffffff61226c16565b915050611178565b611804611e0f60128363ffffffff61199a16565b600a0a611e1b8561117e565b9063ffffffff6122a616565b611e5a611e44611e3786856120c1565b839063ffffffff6122e816565b611e4e8686611906565b9063ffffffff611e8016565b60000b15611e7a5760405162461bcd60e51b815260040161032690612aa2565b50505050565b805182516000911015611e9557506001611178565b815183511015611ea85750600019611178565b50600092915050565b611eba83611d67565b611ecc8383611ec76116f2565b61230b565b610e2883838361230b565b600054610100900460ff1680611ef05750611ef061180c565b80611efe575060005460ff16155b611f1a5760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff16158015610942576000805460ff1961ff0019909116610100171660011790558015610954576000805461ff001916905550565b600054610100900460ff1680611f715750611f7161180c565b80611f7f575060005460ff16155b611f9b5760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff16158015611fc6576000805460ff1961ff0019909116610100171660011790555b6000611fd0611143565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610954576000805461ff001916905550565b600054610100900460ff168061204b575061204b61180c565b80612059575060005460ff16155b6120755760405162461bcd60e51b81526004016103269061295d565b600054610100900460ff161580156120a0576000805460ff1961ff0019909116610100171660011790555b60cb805460ff191660011790558015610954576000805461ff001916905550565b6120c961245f565b60006120d48461217f565b9050601281106121195760408051602081019091528061210e6120fe84601263ffffffff61199a16565b8690600a0a63ffffffff6122a616565b815250915050611178565b60408051602081019091528061214961213960128563ffffffff61199a16565b8690600a0a63ffffffff61226c16565b9052949350505050565b600081848411156121775760405162461bcd60e51b81526004016103269190612677565b505050900390565b6001600160a01b038116600090815260fd6020526040812054806111785760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916121e191612583565b600060405180830381855afa9150503d806000811461221c576040519150601f19603f3d011682016040523d82523d6000602084013e612221565b606091505b50915091508180156122335750805115155b61224f5760405162461bcd60e51b815260040161032690612808565b80806020019051810190612263919061256b565b95945050505050565b60008261227b57506000611178565b8282028284828161228857fe5b04146119935760405162461bcd60e51b81526004016103269061291c565b600061199383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612403565b6122f061245f565b6122f861245f565b825184516111a59163ffffffff61243a16565b600060606001600160a01b03851663095ea7b360e01b8561232c8887611db1565b60405160240161233d9291906125b3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161237b9190612583565b6000604051808303816000865af19150503d80600081146123b8576040519150601f19603f3d011682016040523d82523d6000602084013e6123bd565b606091505b50915091508180156123e75750805115806123e75750808060200190518101906123e7919061248e565b6114375760405162461bcd60e51b815260040161032690612a6b565b600081836124245760405162461bcd60e51b81526004016103269190612677565b50600083858161243057fe5b0495945050505050565b6000828201838110156119935760405162461bcd60e51b815260040161032690612743565b6040518060200160405280600081525090565b600060208284031215612483578081fd5b813561199381612bb5565b60006020828403121561249f578081fd5b81518015158114611993578182fd5b6000602082840312156124bf578081fd5b815161199381612bb5565b60008082840360408112156124dd578182fd5b83356124e881612bb5565b92506020601f19820112156124fb578182fd5b506020830190509250929050565b60006020828403121561251a578081fd5b6125246020612b62565b9135825250919050565b60006020828403121561253f578081fd5b6125496020612b62565b9151825250919050565b600060208284031215612564578081fd5b5035919050565b60006020828403121561257c578081fd5b5051919050565b60008251612595818460208701612b89565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561260d5783516001600160a01b0316835292840192918401916001016125e8565b50909695505050505050565b901515815260200190565b6001600160a01b0393841681529190921660208201529051604082015260600190565b6001600160a01b039586168152939094166020840152905160408301525160608201529051608082015260a00190565b6000602082528251806020840152612696816040850160208701612b89565b601f01601f19169190910160400192915050565b6020808252601190820152701d1bdad95b881b9bdd08195e1a5cdd1959607a1b604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b60208082526019908201527f63616c6c6572206973206e6f742062656e656669636961727900000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252600f908201526e185b5b481b9bdd08195e1a5cdd1959608a1b604082015260600190565b60208082526013908201527222bc31b430b733b29039bbb0b81032b93937b960691b604082015260600190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b602080825260169082015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260119082015270185b5b48185b1c9958591e481859191959607a1b604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b6020808252601c908201527f446563696d616c45524332303a20617070726f7665206661696c656400000000604082015260600190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b6020808252600f908201526e08ceadcc840dcdee840cadcdeeaced608b1b604082015260600190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b9051815260200190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612b8157600080fd5b604052919050565b60005b83811015612ba4578181015183820152602001612b8c565b83811115611e7a5750506000910152565b6001600160a01b038116811461095457600080fdfea26469706673582212200bdbfec0d811323eaf16378c3d5f8f47942fbf04f839663ebd942aad2f5277ce64736f6c63430006090033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "addAmm(address)": {
        "details": "only owner can call",
        "params": {
          "_amm": "IAmm address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAmm(address)": {
        "details": "only owner can call. no need to call",
        "params": {
          "_amm": "IAmm address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "shutdownAllAmm()": {
        "details": "only owner can call. Emit `ShutdownAllAmms` event"
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      },
      "withdraw(address,(uint256))": {
        "params": {
          "_amount": "the amount of quoteToken caller want to withdraw"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "shutdownAllAmm()": {
        "notice": "shutdown all Amms when fatal error happens"
      },
      "withdraw(address,(uint256))": {
        "notice": "withdraw token to caller"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18203,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 18205,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 18379,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17238,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2410,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "_notEntered",
        "offset": 0,
        "slot": "203",
        "type": "t_bool"
      },
      {
        "astId": 2451,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17540,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "decimalMap",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17544,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9873,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "ammMap",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9877,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "quoteTokenMap",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9880,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "amms",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_contract(IAmm)14706)dyn_storage"
      },
      {
        "astId": 9883,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "quoteTokens",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_contract(IERC20)1832)dyn_storage"
      },
      {
        "astId": 9885,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "exchange",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IExchangeWrapper)14870"
      },
      {
        "astId": 9887,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "ifnxToken",
        "offset": 0,
        "slot": "309",
        "type": "t_contract(IERC20)1832"
      },
      {
        "astId": 9889,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "minter",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IMinter)14947"
      },
      {
        "astId": 9891,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "inflationMonitor",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IInflationMonitor)14896"
      },
      {
        "astId": 9893,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "beneficiary",
        "offset": 0,
        "slot": "312",
        "type": "t_address"
      },
      {
        "astId": 9897,
        "contract": "contracts/InsuranceFund.sol:InsuranceFund",
        "label": "__gap",
        "offset": 0,
        "slot": "313",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IAmm)14706)dyn_storage": {
        "base": "t_contract(IAmm)14706",
        "encoding": "dynamic_array",
        "label": "contract IAmm[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)1832)dyn_storage": {
        "base": "t_contract(IERC20)1832",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAmm)14706": {
        "encoding": "inplace",
        "label": "contract IAmm",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1832": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchangeWrapper)14870": {
        "encoding": "inplace",
        "label": "contract IExchangeWrapper",
        "numberOfBytes": "20"
      },
      "t_contract(IInflationMonitor)14896": {
        "encoding": "inplace",
        "label": "contract IInflationMonitor",
        "numberOfBytes": "20"
      },
      "t_contract(IMinter)14947": {
        "encoding": "inplace",
        "label": "contract IMinter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}