{
  "address": "0x9a717Cf7C5AF2c60Cb728651C38290ccC46CEaC8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "FeeInEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "candidate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFeesAndVestedReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "depositAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochRewardHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "perpReward",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "d",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNotifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEpochRewardHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getFeeEpochCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getFeeOfEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getFeeRevenue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "balance",
              "type": "tuple"
            }
          ],
          "internalType": "struct StakingReserve.FeeBalance[]",
          "name": "feeBalance",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochIndex",
          "type": "uint256"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "exist",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "locked",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "d",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.decimal",
              "name": "timeWeightedLocked",
              "type": "tuple"
            }
          ],
          "internalType": "struct StakingReserve.LockedBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getRewardEpochCursor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochIndex",
          "type": "uint256"
        }
      ],
      "name": "getTotalEffectiveStake",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getUnlockedBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getUnstakableBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getVestedReward",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "reward",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ifnxToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ifnxToken",
          "type": "address"
        },
        {
          "internalType": "contract SupplySchedule",
          "name": "_supplySchedule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeNotifier",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestingPeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "isExistedFeeToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "notifyTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_notifier",
          "type": "address"
        }
      ],
      "name": "setFeeNotifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsDistribution",
          "type": "address"
        }
      ],
      "name": "setRewardsDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vestingPeriod",
          "type": "uint256"
        }
      ],
      "name": "setVestingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeBalanceMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "totalBalance",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "rewardEpochCursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeEpochCursor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "d",
              "type": "uint256"
            }
          ],
          "internalType": "struct Decimal.decimal",
          "name": "_amount",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeafec54d68f62292a9ccbc2ee7b824d48b828b085600faab1445ba319cd380c0",
  "receipt": {
    "to": null,
    "from": "0xED228D934a1B4c1bA7Ef46a358944F9dAA39ebb1",
    "contractAddress": "0x9a717Cf7C5AF2c60Cb728651C38290ccC46CEaC8",
    "transactionIndex": 0,
    "gasUsed": "3033935",
    "logsBloom": "0x
    "blockHash": "0xa28f138d525cf3296ce8e05a08db7e16a2ffbcdfe3ae37e4db0daa54fcaee480",
    "transactionHash": "0xeafec54d68f62292a9ccbc2ee7b824d48b828b085600faab1445ba319cd380c0",
    "logs": [],
    "blockNumber": 10579918,
    "cumulativeGasUsed": "3033935",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1b7591a75579d779edef390e2b1d74a1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.9+commit.3e3065ac\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"FeeInEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"candidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFeesAndVestedReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"depositAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochRewardHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"perpReward\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNotifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEpochRewardHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getFeeEpochCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getFeeOfEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getFeeRevenue\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"balance\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingReserve.FeeBalance[]\",\"name\":\"feeBalance\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochIndex\",\"type\":\"uint256\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"locked\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"timeWeightedLocked\",\"type\":\"tuple\"}],\"internalType\":\"struct StakingReserve.LockedBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getRewardEpochCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochIndex\",\"type\":\"uint256\"}],\"name\":\"getTotalEffectiveStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUnlockedBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getUnstakableBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getVestedReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"reward\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ifnxToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ifnxToken\",\"type\":\"address\"},{\"internalType\":\"contract SupplySchedule\",\"name\":\"_supplySchedule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeNotifier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"isExistedFeeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"notifyTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_notifier\",\"type\":\"address\"}],\"name\":\"setFeeNotifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"}],\"name\":\"setRewardsDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"setVestingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeBalanceMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"totalBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rewardEpochCursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeEpochCursor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.decimal\",\"name\":\"_amount\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"notifyRewardAmount((uint256))\":{\"details\":\"add epoch reward, update totalEffectiveStakeMap\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setOwner(address)\":{\"details\":\"Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"stake((uint256))\":{\"details\":\"staker can increase staking any time,\"},\"unstake((uint256))\":{\"details\":\"staker can decrease staking from stakeBalanceForNextEpoch\"},\"updateOwner()\":{\"details\":\"Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner.\"}}},\"userdoc\":{\"methods\":{\"getTotalBalance()\":{\"notice\":\"everyone can query total balance to check current collateralization ratio. TotalBalance of time weighted locked IFNX for coming epoch\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/StakingReserve.sol\":\"StakingReserve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe81686511d62f18b2d9c693c2c94c0a789c690de63aa90e15451ebf65c5bfd3e\"},\"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\":{\"content\":\"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x9bfec92e36234ecc99b5d37230acb6cd1f99560233753162204104a4897e8721\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x04d34b3cd5677bea25f8dfceb6dec0eaa071d4d4b789a43f13fe0c415ba4c296\"},\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Multiplies two signed integers, reverts on overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Subtracts two signed integers, reverts on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Adds two signed integers, reverts on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xfadc24a31d75d6b3f955190cffe13bbe6e24a274c12b2b60e8c4004131487ce8\"},\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6cc1cb934a3ac2137a7dcaed018af9e235392236ceecfd3687259702b9c767ad\"},\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuardUpgradeSafe is Initializable {\\n    bool private _notEntered;\\n\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n\\n\\n        // Storing an initial non-zero value makes deployment a bit more\\n        // expensive, but in exchange the refund on every call to nonReentrant\\n        // will be lower in amount. Since refunds are capped to a percetange of\\n        // the total transaction's gas, it is best to keep them low in cases\\n        // like this one, to increase the likelihood of the full refund coming\\n        // into effect.\\n        _notEntered = true;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x75a600e5ed3443ecf3b7fb636064b404b358317fd6cd91e70e3ca5cf2370e882\"},\"contracts/RewardsDistributionRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IfnxFiOwnableUpgrade} from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport {IRewardRecipient} from \\\"./interface/IRewardRecipient.sol\\\";\\nimport {Decimal} from \\\"./utils/Decimal.sol\\\";\\n\\nabstract contract RewardsDistributionRecipient is IfnxFiOwnableUpgrade, IRewardRecipient {\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n    address public rewardsDistribution;\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function notifyRewardAmount(Decimal.decimal calldata _amount) external virtual override;\\n\\n    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {\\n        rewardsDistribution = _rewardsDistribution;\\n    }\\n\\n    modifier onlyRewardsDistribution() {\\n        require(rewardsDistribution == _msgSender(), \\\"only rewardsDistribution\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb89b2194be0145a9096d619db8de0b0ea3fdb2729df9d17ab70819b470ce0e23\",\"license\":\"GPL-3.0-or-later\"},\"contracts/StakingReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuardUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Decimal, SafeMath} from \\\"./utils/Decimal.sol\\\";\\nimport {SignedDecimal, MixedDecimal} from \\\"./utils/MixedDecimal.sol\\\";\\nimport {RewardsDistributionRecipient} from \\\"./RewardsDistributionRecipient.sol\\\";\\nimport {DecimalERC20} from \\\"./utils/DecimalERC20.sol\\\";\\nimport {BlockContext} from \\\"./utils/BlockContext.sol\\\";\\nimport {SupplySchedule} from \\\"./SupplySchedule.sol\\\";\\nimport {IMultiTokenRewardRecipient} from \\\"./interface/IMultiTokenRewardRecipient.sol\\\";\\n\\ncontract StakingReserve is\\n    RewardsDistributionRecipient,\\n    IMultiTokenRewardRecipient,\\n    DecimalERC20,\\n    BlockContext,\\n    ReentrancyGuardUpgradeSafe\\n{\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using MixedDecimal for SignedDecimal.signedDecimal;\\n\\n    //\\n    // EVENTS\\n    //\\n    event RewardWithdrawn(address staker, uint256 amount);\\n    event FeeInEpoch(address token, uint256 fee, uint256 epoch);\\n\\n    //\\n    // STRUCT\\n    //\\n\\n    // TODO can improve if change to cumulative version\\n    struct EpochReward {\\n        Decimal.decimal perpReward;\\n        // key by Fee ERC20 token address\\n        mapping(address => Decimal.decimal) feeMap;\\n    }\\n\\n    struct StakeBalance {\\n        bool exist;\\n        // denominated in ifnxToken\\n        Decimal.decimal totalBalance;\\n        uint256 rewardEpochCursor;\\n        uint256 feeEpochCursor;\\n        // key by epochReward index (the starting epoch index when staker stake take effect)\\n        mapping(uint256 => LockedBalance) lockedBalanceMap;\\n    }\\n\\n    struct LockedBalance {\\n        bool exist;\\n        // locked staking amount\\n        Decimal.decimal locked;\\n        // timeWeightedLocked = locked * (how long has it been until endOfThisEpoch / epochPeriod)\\n        Decimal.decimal timeWeightedLocked;\\n    }\\n\\n    struct FeeBalance {\\n        address token;\\n        Decimal.decimal balance;\\n    }\\n\\n    //**********************************************************//\\n    //    Can not change the order of below state variables     //\\n    //**********************************************************//\\n    SignedDecimal.signedDecimal private totalPendingStakeBalance;\\n\\n    // the unit of vestingPeriod is epoch, by default 52 epochs equals to 1 year\\n    uint256 public vestingPeriod;\\n\\n    // key by staker address\\n    mapping(address => StakeBalance) public stakeBalanceMap;\\n\\n    // key by epoch index\\n    mapping(uint256 => Decimal.decimal) private totalEffectiveStakeMap;\\n\\n    EpochReward[] public epochRewardHistory;\\n\\n    address[] public stakers;\\n\\n    address public ifnxToken;\\n    SupplySchedule private supplySchedule;\\n\\n    /* @dev\\n     * record all the fee tokens (not remove)\\n     */\\n    IERC20[] public feeTokens;\\n    // key by Fee ERC20 token address\\n    mapping(IERC20 => Decimal.decimal) public feeMap;\\n\\n    // address who can call `notifyTokenAmount`, it's `clearingHouse` for now.\\n    address public feeNotifier;\\n\\n    IERC20 public override token;\\n\\n    //**********************************************************//\\n    //    Can not change the order of above state variables     //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function initialize(\\n        address _ifnxToken,\\n        SupplySchedule _supplySchedule,\\n        address _feeNotifier,\\n        uint256 _vestingPeriod\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        ifnxToken = _ifnxToken;\\n        supplySchedule = _supplySchedule;\\n        feeNotifier = _feeNotifier;\\n        vestingPeriod = _vestingPeriod;\\n    }\\n\\n    function setVestingPeriod(uint256 _vestingPeriod) external onlyOwner {\\n        vestingPeriod = _vestingPeriod;\\n    }\\n\\n    /**\\n     * @dev staker can increase staking any time,\\n     */\\n    function stake(Decimal.decimal memory _amount) public {\\n        require(_amount.toUint() > 0, \\\"Input amount is zero\\\");\\n        address sender = _msgSender();\\n        require(\\n            _amount.toUint() <= getUnlockedBalance(sender).toUint(),\\n            \\\"Stake more than all balance\\\"\\n        );\\n        require(supplySchedule.isStarted(), \\\"IFNX reward has not started\\\");\\n\\n        uint256 epochDuration = supplySchedule.mintDuration();\\n        uint256 afterNextEpochIndex = nextEpochIndex().add(1);\\n        uint256 nextEndEpochTimestamp = supplySchedule.nextMintTime();\\n\\n        // ignore this epoch if keeper didn't endEpoch in time\\n        Decimal.decimal memory timeWeightedLocked;\\n        if (nextEndEpochTimestamp > _blockTimestamp()) {\\n            // calculate timeWeightedLocked based on additional staking amount and the remain time during this epoch\\n            timeWeightedLocked = _amount\\n                .mulScalar(nextEndEpochTimestamp.sub(_blockTimestamp()))\\n                .divScalar(epochDuration);\\n\\n            // update stakerBalance for next epoch\\n            increaseStake(sender, nextEpochIndex(), _amount, timeWeightedLocked);\\n        }\\n\\n        // update stakerBalance for next + 1 epoch\\n        StakeBalance storage balance = stakeBalanceMap[sender];\\n        if (balance.lockedBalanceMap[afterNextEpochIndex].exist) {\\n            increaseStake(sender, afterNextEpochIndex, _amount, _amount);\\n        } else {\\n            LockedBalance memory currentBalance = balance.lockedBalanceMap[nextEpochIndex()];\\n            balance.lockedBalanceMap[afterNextEpochIndex] = LockedBalance(\\n                true,\\n                currentBalance.locked,\\n                currentBalance.locked\\n            );\\n        }\\n\\n        // update global stake balance states\\n        totalEffectiveStakeMap[nextEpochIndex()] = totalEffectiveStakeMap[nextEpochIndex()].addD(\\n            timeWeightedLocked\\n        );\\n        totalPendingStakeBalance = totalPendingStakeBalance.addD(_amount).subD(timeWeightedLocked);\\n    }\\n\\n    /**\\n     * @dev staker can decrease staking from stakeBalanceForNextEpoch\\n     */\\n    function unstake(Decimal.decimal calldata _amount) external {\\n        require(_amount.toUint() > 0, \\\"Input amount is zero\\\");\\n        address sender = _msgSender();\\n        require(\\n            _amount.toUint() <= getUnstakableBalance(sender).toUint(),\\n            \\\"Unstake more than locked balance\\\"\\n        );\\n\\n        // decrease stake balance for after next epoch\\n        uint256 afterNextEpochIndex = nextEpochIndex().add(1);\\n        LockedBalance memory afterNextLockedBalance = getLockedBalance(sender, afterNextEpochIndex);\\n        stakeBalanceMap[sender].lockedBalanceMap[afterNextEpochIndex] = LockedBalance(\\n            true,\\n            afterNextLockedBalance.locked.subD(_amount),\\n            afterNextLockedBalance.timeWeightedLocked.subD(_amount)\\n        );\\n\\n        // update global stake balance states\\n        totalPendingStakeBalance = totalPendingStakeBalance.subD(_amount);\\n    }\\n\\n    function depositAndStake(Decimal.decimal calldata _amount) external nonReentrant {\\n        deposit(_msgSender(), _amount);\\n        stake(_amount);\\n    }\\n\\n    function withdraw(Decimal.decimal calldata _amount) external nonReentrant {\\n        require(_amount.toUint() != 0, \\\"Input amount is zero\\\");\\n        address sender = _msgSender();\\n        require(_amount.toUint() <= getUnlockedBalance(sender).toUint(), \\\"Not enough balance\\\");\\n        stakeBalanceMap[sender].totalBalance = stakeBalanceMap[sender].totalBalance.subD(_amount);\\n        _transfer(IERC20(ifnxToken), sender, _amount);\\n    }\\n\\n    /**\\n     * @dev add epoch reward, update totalEffectiveStakeMap\\n     */\\n    function notifyRewardAmount(Decimal.decimal calldata _amount)\\n        external\\n        override\\n        onlyRewardsDistribution\\n    {\\n        // record reward to epochRewardHistory\\n        Decimal.decimal memory totalBalanceBeforeEndEpoch = getTotalBalance();\\n        epochRewardHistory.push(EpochReward(_amount));\\n\\n        // Note this is initialized AFTER a new entry is pushed to epochRewardHistory, hence the minus 1\\n        uint256 currentEpochIndex = nextEpochIndex().sub(1);\\n        for (uint256 i; i < feeTokens.length; i++) {\\n            IERC20 token = feeTokens[i];\\n            emit FeeInEpoch(address(token), feeMap[token].toUint(), currentEpochIndex);\\n            epochRewardHistory[currentEpochIndex].feeMap[address(token)] = feeMap[token];\\n            feeMap[token] = Decimal.zero();\\n        }\\n\\n        // update totalEffectiveStakeMap for coming epoch\\n        SignedDecimal.signedDecimal\\n            memory updatedTotalEffectiveStakeBalance = totalPendingStakeBalance.addD(\\n                totalBalanceBeforeEndEpoch\\n            );\\n        require(updatedTotalEffectiveStakeBalance.toInt() >= 0, \\\"Unstake more than locked balance\\\");\\n        totalEffectiveStakeMap[(nextEpochIndex())] = updatedTotalEffectiveStakeBalance.abs();\\n        totalPendingStakeBalance = SignedDecimal.zero();\\n    }\\n\\n    function notifyTokenAmount(IERC20 _token, Decimal.decimal calldata _amount) external override {\\n        require(feeNotifier == _msgSender(), \\\"!feeNotifier\\\");\\n        require(_amount.toUint() > 0, \\\"amount can't be 0\\\");\\n\\n        feeMap[_token] = feeMap[_token].addD(_amount);\\n        if (!isExistedFeeToken(_token)) {\\n            feeTokens.push(_token);\\n        }\\n    }\\n\\n    /*\\n     * claim all fees and vested reward at once\\n     * update lastUpdatedEffectiveStake\\n     */\\n    function claimFeesAndVestedReward() external nonReentrant {\\n        // calculate fee and reward\\n        address staker = _msgSender();\\n        Decimal.decimal memory reward = getVestedReward(staker);\\n        FeeBalance[] memory fees = getFeeRevenue(staker);\\n        bool hasFees = fees.length > 0;\\n        bool hasReward = reward.toUint() > 0;\\n        require(hasReward || hasFees, \\\"no vested reward or fee\\\");\\n\\n        // transfer fee reward\\n        stakeBalanceMap[staker].feeEpochCursor = epochRewardHistory.length;\\n        for (uint256 i = 0; i < fees.length; i++) {\\n            if (fees[i].balance.toUint() != 0) {\\n                _transfer(IERC20(fees[i].token), staker, fees[i].balance);\\n            }\\n        }\\n\\n        // transfer perp reward\\n        if (hasReward && epochRewardHistory.length >= vestingPeriod) {\\n            // solhint-disable reentrancy\\n            stakeBalanceMap[staker].rewardEpochCursor = epochRewardHistory.length.sub(\\n                vestingPeriod\\n            );\\n            _transfer(IERC20(ifnxToken), staker, reward);\\n            emit RewardWithdrawn(staker, reward.toUint());\\n        }\\n    }\\n\\n    function setFeeNotifier(address _notifier) external onlyOwner {\\n        feeNotifier = _notifier;\\n    }\\n\\n    //\\n    // VIEW FUNCTIONS\\n    //\\n\\n    function isExistedFeeToken(IERC20 _token) public view returns (bool) {\\n        for (uint256 i = 0; i < feeTokens.length; i++) {\\n            if (feeTokens[i] == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function nextEpochIndex() public view returns (uint256) {\\n        return epochRewardHistory.length;\\n    }\\n\\n    /**\\n     * everyone can query total balance to check current collateralization ratio.\\n     * TotalBalance of time weighted locked IFNX for coming epoch\\n     */\\n    function getTotalBalance() public view returns (Decimal.decimal memory) {\\n        return totalEffectiveStakeMap[nextEpochIndex()];\\n    }\\n\\n    function getTotalEffectiveStake(uint256 _epochIndex)\\n        public\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return totalEffectiveStakeMap[_epochIndex];\\n    }\\n\\n    function getFeeOfEpoch(uint256 _epoch, address _token)\\n        public\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return epochRewardHistory[_epoch].feeMap[_token];\\n    }\\n\\n    function getFeeRevenue(address _staker) public view returns (FeeBalance[] memory feeBalance) {\\n        StakeBalance storage balance = stakeBalanceMap[_staker];\\n        if (balance.feeEpochCursor == nextEpochIndex()) {\\n            return feeBalance;\\n        }\\n\\n        uint256 numberOfTokens = feeTokens.length;\\n        feeBalance = new FeeBalance[](numberOfTokens);\\n        Decimal.decimal memory latestLockedStake;\\n        // TODO enhancement, we can loop feeTokens first to save more gas if some feeToken was not used\\n        for (uint256 i = balance.feeEpochCursor; i < nextEpochIndex(); i++) {\\n            if (balance.lockedBalanceMap[i].timeWeightedLocked.toUint() != 0) {\\n                latestLockedStake = balance.lockedBalanceMap[i].timeWeightedLocked;\\n            }\\n            if (latestLockedStake.toUint() == 0) {\\n                continue;\\n            }\\n            Decimal.decimal memory effectiveStakePercentage = latestLockedStake.divD(\\n                totalEffectiveStakeMap[i]\\n            );\\n\\n            for (uint256 j = 0; j < numberOfTokens; j++) {\\n                IERC20 token = feeTokens[j];\\n                Decimal.decimal memory feeInThisEpoch = getFeeOfEpoch(i, address(token));\\n                if (feeInThisEpoch.toUint() == 0) {\\n                    continue;\\n                }\\n                feeBalance[j].balance = feeBalance[j].balance.addD(\\n                    feeInThisEpoch.mulD(effectiveStakePercentage)\\n                );\\n                feeBalance[j].token = address(token);\\n            }\\n        }\\n    }\\n\\n    function getVestedReward(address _staker) public view returns (Decimal.decimal memory reward) {\\n        if (nextEpochIndex() < vestingPeriod) {\\n            return Decimal.zero();\\n        }\\n\\n        // Note that rewardableEpochEnd is exclusive. The last rewardable epoch index = rewardableEpochEnd - 1\\n        uint256 rewardableEpochEnd = nextEpochIndex().sub(vestingPeriod);\\n        StakeBalance storage balance = stakeBalanceMap[_staker];\\n        if (balance.rewardEpochCursor > rewardableEpochEnd) {\\n            return Decimal.zero();\\n        }\\n\\n        Decimal.decimal memory latestLockedStake;\\n        for (uint256 i = balance.rewardEpochCursor; i < rewardableEpochEnd; i++) {\\n            if (balance.lockedBalanceMap[i].timeWeightedLocked.toUint() != 0) {\\n                latestLockedStake = balance.lockedBalanceMap[i].timeWeightedLocked;\\n            }\\n            if (latestLockedStake.toUint() == 0) {\\n                continue;\\n            }\\n            Decimal.decimal memory rewardInThisEpoch = epochRewardHistory[i]\\n                .perpReward\\n                .mulD(latestLockedStake)\\n                .divD(totalEffectiveStakeMap[i]);\\n            reward = reward.addD(rewardInThisEpoch);\\n        }\\n    }\\n\\n    function getUnlockedBalance(address _staker) public view returns (Decimal.decimal memory) {\\n        Decimal.decimal memory lockedForNextEpoch = getLockedBalance(_staker, nextEpochIndex())\\n            .locked;\\n        return stakeBalanceMap[_staker].totalBalance.subD(lockedForNextEpoch);\\n    }\\n\\n    // unstakable = lockedBalance@NextEpoch+1\\n    function getUnstakableBalance(address _staker) public view returns (Decimal.decimal memory) {\\n        return getLockedBalance(_staker, nextEpochIndex().add(1)).locked;\\n    }\\n\\n    // only store locked balance when there's changed, so if the target lockedBalance is not exist,\\n    // use the lockedBalance from the closest previous epoch\\n    function getLockedBalance(address _staker, uint256 _epochIndex)\\n        public\\n        view\\n        returns (LockedBalance memory)\\n    {\\n        while (_epochIndex >= 0) {\\n            LockedBalance memory lockedBalance = stakeBalanceMap[_staker].lockedBalanceMap[\\n                _epochIndex\\n            ];\\n            if (lockedBalance.exist) {\\n                return lockedBalance;\\n            }\\n            if (_epochIndex == 0) {\\n                break;\\n            }\\n            _epochIndex -= 1;\\n        }\\n        return LockedBalance(false, Decimal.zero(), Decimal.zero());\\n    }\\n\\n    function getEpochRewardHistoryLength() external view returns (uint256) {\\n        return epochRewardHistory.length;\\n    }\\n\\n    function getRewardEpochCursor(address _staker) public view returns (uint256) {\\n        return stakeBalanceMap[_staker].rewardEpochCursor;\\n    }\\n\\n    function getFeeEpochCursor(address _staker) public view returns (uint256) {\\n        return stakeBalanceMap[_staker].feeEpochCursor;\\n    }\\n\\n    //\\n    // Private\\n    //\\n\\n    function increaseStake(\\n        address _sender,\\n        uint256 _epochIndex,\\n        Decimal.decimal memory _locked,\\n        Decimal.decimal memory _timeWeightedLocked\\n    ) private {\\n        LockedBalance memory lockedBalance = getLockedBalance(_sender, _epochIndex);\\n        stakeBalanceMap[_sender].lockedBalanceMap[_epochIndex] = LockedBalance(\\n            true,\\n            lockedBalance.locked.addD(_locked),\\n            lockedBalance.timeWeightedLocked.addD(_timeWeightedLocked)\\n        );\\n    }\\n\\n    function deposit(address _sender, Decimal.decimal memory _amount) private {\\n        require(_amount.toUint() != 0, \\\"Input amount is zero\\\");\\n        StakeBalance storage balance = stakeBalanceMap[_sender];\\n        if (!balance.exist) {\\n            stakers.push(_sender);\\n            balance.exist = true;\\n            // set rewardEpochCursor for the first staking\\n            balance.rewardEpochCursor = nextEpochIndex();\\n        }\\n        balance.totalBalance = balance.totalBalance.addD(_amount);\\n        _transferFrom(IERC20(ifnxToken), _sender, address(this), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb61f1674f9f5d7c614b3f80a9ee05be8775ae45ffe3fdf108e73ca72d094f7df\",\"license\":\"GPL-3.0-or-later\"},\"contracts/SupplySchedule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IfnxFiOwnableUpgrade} from \\\"./utils/IfnxFiOwnableUpgrade.sol\\\";\\nimport {Decimal, SafeMath} from \\\"./utils/Decimal.sol\\\";\\nimport {BlockContext} from \\\"./utils/BlockContext.sol\\\";\\nimport {IMinter} from \\\"./interface/IMinter.sol\\\";\\n\\ncontract SupplySchedule is IfnxFiOwnableUpgrade, BlockContext {\\n    using Decimal for Decimal.decimal;\\n    using SafeMath for uint256;\\n\\n    //\\n    // CONSTANTS\\n    //\\n\\n    // 4 years is 365 * 4 + 1 = 1,461 days\\n    // 7 days * 52 weeks * 4 years = 1,456 days. if we add one more week, total days will be 1,463 days.\\n    // it's over 4 years and closest to 4 years. 209 weeks = 4 * 52 + 1 weeks\\n    uint256 private constant SUPPLY_DECAY_PERIOD = 209 weeks;\\n\\n    // Percentage growth of terminal supply per annum\\n    uint256 private constant TERMINAL_SUPPLY_EPOCH_RATE = 474970697307300; // 2.5% annual ~= 0.04749% weekly\\n\\n    //**********************************************************//\\n    //    The below state variables can not change the order    //\\n    //**********************************************************//\\n    Decimal.decimal public inflationRate;\\n    Decimal.decimal public decayRate;\\n\\n    uint256 public mintDuration; // default is 1 week\\n    uint256 public nextMintTime;\\n    uint256 public supplyDecayEndTime; // startSchedule time + 4 years\\n\\n    IMinter private minter;\\n\\n    //**********************************************************//\\n    //    The above state variables can not change the order    //\\n    //**********************************************************//\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // FUNCTIONS\\n    //\\n\\n    function initialize(\\n        IMinter _minter,\\n        uint256 _inflationRate,\\n        uint256 _decayRate,\\n        uint256 _mintDuration\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        minter = _minter;\\n        inflationRate = Decimal.decimal(_inflationRate);\\n        mintDuration = _mintDuration;\\n        decayRate = Decimal.decimal(_decayRate);\\n    }\\n\\n    //\\n    // PUBLIC FUNCTIONS\\n    //\\n\\n    function startSchedule() external onlyOwner {\\n        require(mintDuration > 0, \\\"mint duration is 0\\\");\\n        nextMintTime = _blockTimestamp() + mintDuration;\\n        supplyDecayEndTime = _blockTimestamp().add(SUPPLY_DECAY_PERIOD);\\n    }\\n\\n    function setDecayRate(Decimal.decimal memory _decayRate) public onlyOwner {\\n        decayRate = _decayRate;\\n    }\\n\\n    function recordMintEvent() external {\\n        require(_msgSender() == address(minter), \\\"!minter\\\");\\n        //@audit - inflationRate will continue to decay even after supplyDecayEndTime, but I guess that should be fine? (@detoo)\\n        inflationRate = inflationRate.mulD(Decimal.one().subD(decayRate));\\n        nextMintTime = nextMintTime.add(mintDuration);\\n    }\\n\\n    //\\n    // VIEW functions\\n    //\\n    function mintableSupply() external view returns (Decimal.decimal memory) {\\n        if (!isMintable()) {\\n            return Decimal.zero();\\n        }\\n        uint256 totalSupply = minter.getIfnxToken().totalSupply();\\n        if (_blockTimestamp() >= supplyDecayEndTime) {\\n            return Decimal.decimal(totalSupply).mulD(Decimal.decimal(TERMINAL_SUPPLY_EPOCH_RATE));\\n        }\\n        return Decimal.decimal(totalSupply).mulD(inflationRate);\\n    }\\n\\n    function isMintable() public view returns (bool) {\\n        if (nextMintTime == 0) {\\n            return false;\\n        }\\n        return _blockTimestamp() >= nextMintTime;\\n    }\\n\\n    function isStarted() external view returns (bool) {\\n        return nextMintTime > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc486d123f68e46ffba7b52ebfefdbe08ca54b2137df3716fb71ab8023eae1a5d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMinter {\\n    function mintReward() external;\\n\\n    function mintForLoss(Decimal.decimal memory _amount) external;\\n\\n    function getIfnxToken() external view returns (IERC20);\\n}\\n\",\"keccak256\":\"0x253fd10327d44c024ea635e48c6c5d51202ffef1e79328eb4fe8bacd56a31fba\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IMultiTokenRewardRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\n\\ninterface IMultiTokenRewardRecipient {\\n    function notifyTokenAmount(IERC20 _token, Decimal.decimal calldata _amount) external;\\n}\\n\",\"keccak256\":\"0x349a3fe87e74c99d9ef9143181108caaaace02ac9c78273a132716ea59353e1e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interface/IRewardRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\nimport {Decimal} from \\\"../utils/Decimal.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardRecipient {\\n    function notifyRewardAmount(Decimal.decimal calldata _amount) external;\\n\\n    function token() external returns (IERC20);\\n}\\n\",\"keccak256\":\"0x1cf443662faf375221b0d5c719a8df08e5c76c3e43674ee18519c2d10fd2a8c3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/BlockContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\n// wrap block.xxx functions for testing\\n// only support timestamp and number so far\\nabstract contract BlockContext {\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    function _blockTimestamp() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function _blockNumber() internal view virtual returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xd1b1f2a5a3cce33f04b4f3ea1d7c3112d27ec6ab14e46dcdc9d68e7ff52b6446\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.6.0 <=0.9.0;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {DecimalMath} from \\\"./DecimalMath.sol\\\";\\n\\nlibrary Decimal {\\n    using DecimalMath for uint256;\\n    using SafeMath for uint256;\\n\\n    struct decimal {\\n        uint256 d;\\n    }\\n\\n    function zero() internal pure returns (decimal memory) {\\n        return decimal(0);\\n    }\\n\\n    function one() internal pure returns (decimal memory) {\\n        return decimal(DecimalMath.unit(18));\\n    }\\n\\n    function toUint(decimal memory x) internal pure returns (uint256) {\\n        return x.d;\\n    }\\n\\n    function modD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        return decimal(x.d.mul(DecimalMath.unit(18)) % y.d);\\n    }\\n\\n    function cmp(decimal memory x, decimal memory y) internal pure returns (int8) {\\n        if (x.d > y.d) {\\n            return 1;\\n        } else if (x.d < y.d) {\\n            return -1;\\n        }\\n        return 0;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a decimal by a uint256\\n    function mulScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(decimal memory x, decimal memory y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a decimal by a uint256\\n    function divScalar(decimal memory x, uint256 y) internal pure returns (decimal memory) {\\n        decimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0x1db4f74edd20aa77b0ed6732de1d6fcbdfed4fe79e042f459dda6e26584ee574\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nabstract contract DecimalERC20 {\\n    using SafeMath for uint256;\\n    using Decimal for Decimal.decimal;\\n\\n    mapping(address => uint256) private decimalMap;\\n\\n    //\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4 add state variables below \\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4\\u25e5\\u25e4//\\n\\n    //\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3 add state variables above \\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3\\u25e2\\u25e3//\\n    uint256[50] private __gap;\\n\\n    //\\n    // INTERNAL functions\\n    //\\n\\n    // CAUTION: do not input _from == _to s.t. this function will always fail\\n    function _transfer(\\n        IERC20 _token,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transfer.selector, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transfer failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        Decimal.decimal memory balanceBefore = _balanceOf(_token, _to);\\n        uint256 roundedDownValue = _toUint(_token, _value);\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.transferFrom.selector, _from, _to, roundedDownValue)\\n        );\\n\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: transferFrom failed\\\"\\n        );\\n        _validateBalance(_token, _to, roundedDownValue, balanceBefore);\\n    }\\n\\n    function _approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) internal {\\n        _updateDecimal(address(_token));\\n        // to be compatible with some erc20 tokens like USDT\\n        __approve(_token, _spender, Decimal.zero());\\n        __approve(_token, _spender, _value);\\n    }\\n\\n    //\\n    // VIEW\\n    //\\n    function _allowance(\\n        IERC20 _token,\\n        address _owner,\\n        address _spender\\n    ) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.allowance(_owner, _spender));\\n    }\\n\\n    function _balanceOf(IERC20 _token, address _owner)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        return _toDecimal(_token, _token.balanceOf(_owner));\\n    }\\n\\n    function _totalSupply(IERC20 _token) internal view returns (Decimal.decimal memory) {\\n        return _toDecimal(_token, _token.totalSupply());\\n    }\\n\\n    function _toDecimal(IERC20 _token, uint256 _number)\\n        internal\\n        view\\n        returns (Decimal.decimal memory)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return Decimal.decimal(_number.div(10**(tokenDecimals.sub(18))));\\n        }\\n\\n        return Decimal.decimal(_number.mul(10**(uint256(18).sub(tokenDecimals))));\\n    }\\n\\n    function _toUint(IERC20 _token, Decimal.decimal memory _decimal)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 tokenDecimals = _getTokenDecimals(address(_token));\\n        if (tokenDecimals >= 18) {\\n            return _decimal.toUint().mul(10**(tokenDecimals.sub(18)));\\n        }\\n        return _decimal.toUint().div(10**(uint256(18).sub(tokenDecimals)));\\n    }\\n\\n    function _getTokenDecimals(address _token) internal view returns (uint256) {\\n        uint256 tokenDecimals = decimalMap[_token];\\n        if (tokenDecimals == 0) {\\n            (bool success, bytes memory data) = _token.staticcall(\\n                abi.encodeWithSignature(\\\"decimals()\\\")\\n            );\\n            require(success && data.length != 0, \\\"DecimalERC20: get decimals failed\\\");\\n            tokenDecimals = abi.decode(data, (uint256));\\n        }\\n        return tokenDecimals;\\n    }\\n\\n    //\\n    // PRIVATE\\n    //\\n    function _updateDecimal(address _token) private {\\n        uint256 tokenDecimals = _getTokenDecimals(_token);\\n        if (decimalMap[_token] != tokenDecimals) {\\n            decimalMap[_token] = tokenDecimals;\\n        }\\n    }\\n\\n    function __approve(\\n        IERC20 _token,\\n        address _spender,\\n        Decimal.decimal memory _value\\n    ) private {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory data) = address(_token).call(\\n            abi.encodeWithSelector(_token.approve.selector, _spender, _toUint(_token, _value))\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"DecimalERC20: approve failed\\\"\\n        );\\n    }\\n\\n    // To prevent from deflationary token, check receiver's balance is as expectation.\\n    function _validateBalance(\\n        IERC20 _token,\\n        address _to,\\n        uint256 _roundedDownValue,\\n        Decimal.decimal memory _balanceBefore\\n    ) private view {\\n        require(\\n            _balanceOf(_token, _to).cmp(\\n                _balanceBefore.addD(_toDecimal(_token, _roundedDownValue))\\n            ) == 0,\\n            \\\"DecimalERC20: balance inconsistent\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf97ccdfa07abeda868c8cc6bf80035cf6a4c5c0aa972ffd9bc7fe5f6c62e5170\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/DecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/// @dev Implements simple fixed point math add, sub, mul and div operations.\\n/// @author Alberto Cuesta Ca\\u00f1ada\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (uint256) {\\n        return 10**uint256(decimals);\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        uint256 x,\\n        uint256 y,\\n        uint8 decimals\\n    ) internal pure returns (uint256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x4879526465b70a7166efb7b32359e2713579ace533c766cc215c8e717ba8da5e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/IfnxFiOwnableUpgrade.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {ContextUpgradeSafe} from \\\"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\\\";\\n\\n// copy from openzeppelin Ownable, only modify how the owner transfer\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract IfnxFiOwnableUpgrade is ContextUpgradeSafe {\\n    address private _owner;\\n    address private _candidate;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function candidate() public view returns (address) {\\n        return _candidate;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"IfnxFiOwnableUpgrade: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Set ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function setOwner(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"IfnxFiOwnableUpgrade: zero address\\\");\\n        require(newOwner != _owner, \\\"IfnxFiOwnableUpgrade: same as original\\\");\\n        require(newOwner != _candidate, \\\"IfnxFiOwnableUpgrade: same as candidate\\\");\\n        _candidate = newOwner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`_candidate`).\\n     * Can only be called by the new owner.\\n     */\\n    function updateOwner() public {\\n        require(_candidate != address(0), \\\"IfnxFiOwnableUpgrade: candidate is zero address\\\");\\n        require(_candidate == _msgSender(), \\\"IfnxFiOwnableUpgrade: not the new owner\\\");\\n\\n        emit OwnershipTransferred(_owner, _candidate);\\n        _owner = _candidate;\\n        _candidate = address(0);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd04de8ce5b77f84da11af5b08c942c1774813b4ebc14fccedfd81d918b90ab88\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MixedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\nimport {SignedDecimal} from \\\"./SignedDecimal.sol\\\";\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev To handle a signedDecimal add/sub/mul/div a decimal and provide convert decimal to signedDecimal helper\\nlibrary MixedDecimal {\\n    using SignedDecimal for SignedDecimal.signedDecimal;\\n    using SignedSafeMath for int256;\\n\\n    uint256 private constant _INT256_MAX = 2**255 - 1;\\n    string private constant ERROR_NON_CONVERTIBLE =\\n        \\\"MixedDecimal: uint value is bigger than _INT256_MAX\\\";\\n\\n    modifier convertible(Decimal.decimal memory x) {\\n        require(_INT256_MAX >= x.d, ERROR_NON_CONVERTIBLE);\\n        _;\\n    }\\n\\n    function fromDecimal(Decimal.decimal memory x)\\n        internal\\n        pure\\n        convertible(x)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        return SignedDecimal.signedDecimal(int256(x.d));\\n    }\\n\\n    function toUint(SignedDecimal.signedDecimal memory x) internal pure returns (uint256) {\\n        return x.abs().d;\\n    }\\n\\n    /// @dev add SignedDecimal.signedDecimal and Decimal.decimal, using SignedSafeMath directly\\n    function addD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.add(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev subtract SignedDecimal.signedDecimal by Decimal.decimal, using SignedSafeMath directly\\n    function subD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t.d = x.d.sub(int256(y.d));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by Decimal.decimal\\n    function mulD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev multiple a SignedDecimal.signedDecimal by a uint256\\n    function mulScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.mulScalar(int256(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a Decimal.decimal\\n    function divD(SignedDecimal.signedDecimal memory x, Decimal.decimal memory y)\\n        internal\\n        pure\\n        convertible(y)\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divD(fromDecimal(y));\\n        return t;\\n    }\\n\\n    /// @dev divide a SignedDecimal.signedDecimal by a uint256\\n    function divScalar(SignedDecimal.signedDecimal memory x, uint256 y)\\n        internal\\n        pure\\n        returns (SignedDecimal.signedDecimal memory)\\n    {\\n        require(_INT256_MAX >= y, ERROR_NON_CONVERTIBLE);\\n        SignedDecimal.signedDecimal memory t;\\n        t = x.divScalar(int256(y));\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xd761a7aee6c51a11d4e1575494085f253a65e6b86db58ec26c80766fed987de0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\nimport {SignedDecimalMath} from \\\"./SignedDecimalMath.sol\\\";\\nimport {Decimal} from \\\"./Decimal.sol\\\";\\n\\nlibrary SignedDecimal {\\n    using SignedDecimalMath for int256;\\n    using SignedSafeMath for int256;\\n\\n    struct signedDecimal {\\n        int256 d;\\n    }\\n\\n    function zero() internal pure returns (signedDecimal memory) {\\n        return signedDecimal(0);\\n    }\\n\\n    function toInt(signedDecimal memory x) internal pure returns (int256) {\\n        return x.d;\\n    }\\n\\n    function isNegative(signedDecimal memory x) internal pure returns (bool) {\\n        if (x.d < 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function abs(signedDecimal memory x) internal pure returns (Decimal.decimal memory) {\\n        Decimal.decimal memory t;\\n        if (x.d < 0) {\\n            t.d = uint256(0 - x.d);\\n        } else {\\n            t.d = uint256(x.d);\\n        }\\n        return t;\\n    }\\n\\n    /// @dev add two decimals\\n    function addD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.add(y.d);\\n        return t;\\n    }\\n\\n    /// @dev subtract two decimals\\n    function subD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.sub(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple two decimals\\n    function mulD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.muld(y.d);\\n        return t;\\n    }\\n\\n    /// @dev multiple a signedDecimal by a int256\\n    function mulScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.mul(y);\\n        return t;\\n    }\\n\\n    /// @dev divide two decimals\\n    function divD(signedDecimal memory x, signedDecimal memory y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.divd(y.d);\\n        return t;\\n    }\\n\\n    /// @dev divide a signedDecimal by a int256\\n    function divScalar(signedDecimal memory x, int256 y)\\n        internal\\n        pure\\n        returns (signedDecimal memory)\\n    {\\n        signedDecimal memory t;\\n        t.d = x.d.div(y);\\n        return t;\\n    }\\n}\\n\",\"keccak256\":\"0xf5a874997ac59e59cc1176149e159a095977b145232507e8faa7bd0933d6e7f7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/SignedDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.9;\\n\\nimport {SignedSafeMath} from \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SignedSafeMath.sol\\\";\\n\\n/// @dev Implements simple signed fixed point math add, sub, mul and div operations.\\nlibrary SignedDecimalMath {\\n    using SignedSafeMath for int256;\\n\\n    /// @dev Returns 1 in the fixed point representation, with `decimals` decimals.\\n    function unit(uint8 decimals) internal pure returns (int256) {\\n        return int256(10**uint256(decimals));\\n    }\\n\\n    /// @dev Adds x and y, assuming they are both fixed point with 18 decimals.\\n    function addd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.add(y);\\n    }\\n\\n    /// @dev Subtracts y from x, assuming they are both fixed point with 18 decimals.\\n    function subd(int256 x, int256 y) internal pure returns (int256) {\\n        return x.sub(y);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with 18 digits.\\n    function muld(int256 x, int256 y) internal pure returns (int256) {\\n        return muld(x, y, 18);\\n    }\\n\\n    /// @dev Multiplies x and y, assuming they are both fixed point with `decimals` digits.\\n    function muld(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(y).div(unit(decimals));\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with 18 digits.\\n    function divd(int256 x, int256 y) internal pure returns (int256) {\\n        return divd(x, y, 18);\\n    }\\n\\n    /// @dev Divides x between y, assuming they are both fixed point with `decimals` digits.\\n    function divd(\\n        int256 x,\\n        int256 y,\\n        uint8 decimals\\n    ) internal pure returns (int256) {\\n        return x.mul(unit(decimals)).div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x5fdb8310e8a1d7f2770179ff12515c0cfbbf83474a263ce316f4a4a9a7dda8b8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80635cdd7c701161013b578063a7d4b2d3116100b8578063cfc90c321161007c578063cfc90c32146104a5578063d7058d8d146104b8578063fc0c546a146104cb578063fd5e6dd1146104d3578063ff59f86d146104e65761023d565b8063a7d4b2d31461045c578063ac04f2431461046f578063b0ecdc2d14610482578063bc5920ba1461048a578063cf756fdf146104925761023d565b80637313ee5a116100ff5780637313ee5a1461041e5780638da5cb5b146104265780638ef4403c1461042e5780638f0a270e14610441578063a63a5e76146104545761023d565b80635cdd7c70146103c85780636a3662f1146103db5780636c8381f8146103ee57806370c88be8146103f6578063715018a6146104165761023d565b8063141eea7f116101c957806336b4402a1161018d57806336b4402a146103575780633ee7a5ce1461037a5780633fc6df6e1461038d57806340bee0ed1461039557806341daeb24146103a85761023d565b8063141eea7f1461031457806316c2f69f1461032957806319762143146103315780631c17820314610344578063239e1d67146103295761023d565b80630cd61a0c116102105780630cd61a0c146102b35780630dc095cf146102d3578063129de5bf146102e657806312b58349146102f957806313af4035146103015761023d565b806301bb7d9c1461024257806303e16d421461025757806304aa4487146102805780630a8d9b67146102a0575b600080fd5b610255610250366004612d23565b6104f9565b005b61026a610265366004612c37565b610696565b6040516102779190613535565b60405180910390f35b61029361028e366004612d7b565b6106a9565b604051610277919061352b565b6102556102ae366004612cee565b6106d9565b6102c66102c1366004612c37565b610802565b6040516102779190612ec1565b6102936102e1366004612dab565b610861565b6102936102f4366004612c37565b6108b6565b610293610919565b61025561030f366004612c37565b610951565b61031c610a2a565b6040516102779190612df6565b61026a610a3a565b61025561033f366004612c37565b610a41565b610255610352366004612d23565b610a98565b61036a610365366004612c37565b610b08565b6040516102779493929190612ecc565b610255610388366004612d23565b610b40565b61031c610c84565b6102556103a3366004612d7b565b610c93565b6103bb6103b6366004612c37565b610cce565b6040516102779190612e68565b6102556103d6366004612c37565b610f0f565b61026a6103e9366004612c37565b610f67565b61031c610f86565b610409610404366004612ca3565b610f95565b6040516102779190613506565b61025561105b565b61026a6110da565b61031c6110e1565b61031c61043c366004612d7b565b6110f0565b61026a61044f366004612c37565b611118565b610255611137565b61029361046a366004612c37565b611316565b61025561047d366004612d3e565b6114b0565b61031c6118cb565b6102556118db565b6102556104a0366004612c53565b61199e565b6102936104b3366004612d7b565b611a7b565b6102936104c6366004612c37565b611aa6565b61031c611ac9565b61031c6104e1366004612d7b565b611ad9565b6102556104f4366004612d23565b611ae7565b600061051261050d36849003840184612d3e565b611d1b565b116105385760405162461bcd60e51b815260040161052f9061304e565b60405180910390fd5b6000610542611d1f565b905061055061050d82611aa6565b61056261050d36859003850185612d3e565b11156105805760405162461bcd60e51b815260040161052f9061312a565b600061059b600161058f610a3a565b9063ffffffff611d2316565b90506105a5612bbc565b6105af8383610f95565b604080516060810190915260018152909150602081016105e86105d736889003880188612d3e565b60208501519063ffffffff611d4816565b81526020016106106105ff36889003880188612d3e565b60408501519063ffffffff611d4816565b90526001600160a01b0384166000908152610165602090815260408083208684526004018252918290208351815460ff1916901515178155908301515160018201559101515160029091015561068b61066e36869003860186612d3e565b60408051602081019091526101635481529063ffffffff611d7416565b516101635550505050565b61016c6020526000908152604090205481565b61016781815481106106b757fe5b6000918252602091829020604080519384019052600290910201548152905081565b6106e1611d1f565b61016d546001600160a01b0390811691161461070f5760405162461bcd60e51b815260040161052f906132b3565b600061072361050d36849003840184612d3e565b116107405760405162461bcd60e51b815260040161052f906132d9565b61078761075236839003830183612d3e565b6001600160a01b038416600090815261016c60209081526040918290208251918201909252905481529063ffffffff611de916565b6001600160a01b038316600090815261016c60205260409020905190556107ad82610802565b6107fe5761016b80546001810182556000919091527f45c4c4b2842a4a2a717cf0ddf6c6d1dee52b7fd8d9da97eb519765c7a27020f40180546001600160a01b0319166001600160a01b0384161790555b5050565b6000805b61016b5481101561085657826001600160a01b031661016b828154811061082957fe5b6000918252602090912001546001600160a01b0316141561084e57600191505061085c565b600101610806565b50600090505b919050565b610869612bea565b610167838154811061087757fe5b600091825260208083206001600160a01b0386168452600160029093020191909101815260409182902082519182019092529054815290505b92915050565b6108be612bea565b6108c6612bea565b6108d283610404610a3a565b6020908101516001600160a01b0385166000908152610165835260409081902081519384019091526001015482529150610912908263ffffffff611d4816565b9392505050565b610921612bea565b610166600061092e610a3a565b815260208082019290925260409081016000208151928301909152548152905090565b610959611d1f565b6065546001600160a01b039081169116146109865760405162461bcd60e51b815260040161052f906131a0565b6001600160a01b0381166109ac5760405162461bcd60e51b815260040161052f9061348d565b6065546001600160a01b03828116911614156109da5760405162461bcd60e51b815260040161052f906133c1565b6066546001600160a01b0382811691161415610a085760405162461bcd60e51b815260040161052f90613007565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61016d546001600160a01b031681565b6101675490565b610a49611d1f565b6065546001600160a01b03908116911614610a765760405162461bcd60e51b815260040161052f906131a0565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6101315460ff16610abb5760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055610ae5610ad1611d1f565b610ae036849003840184612d3e565b611e0c565b610af761047d36839003830183612d3e565b50610131805460ff19166001179055565b610165602090815260009182526040918290208054835192830190935260018101548252600281015460039091015460ff9093169284565b6101315460ff16610b635760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055610b8061050d36839003830183612d3e565b610b9c5760405162461bcd60e51b815260040161052f9061304e565b6000610ba6611d1f565b9050610bb461050d826108b6565b610bc661050d36859003850185612d3e565b1115610be45760405162461bcd60e51b815260040161052f906130bd565b610c2f610bf636849003840184612d3e565b6001600160a01b03831660009081526101656020908152604091829020825191820190925260019091015481529063ffffffff611d4816565b6001600160a01b03808316600090815261016560205260409020915160019092019190915561016954610c72911682610c6d36869003860186612d3e565b611efd565b5050610131805460ff19166001179055565b6099546001600160a01b031681565b610c9b611d1f565b6065546001600160a01b03908116911614610cc85760405162461bcd60e51b815260040161052f906131a0565b61016455565b6001600160a01b038116600090815261016560205260409020606090610cf2610a3a565b81600301541415610d03575061085c565b61016b548067ffffffffffffffff81118015610d1e57600080fd5b50604051908082528060200260200182016040528015610d5857816020015b610d45612bfd565b815260200190600190039081610d3d5790505b509250610d63612bea565b60038301545b610d71610a3a565b811015610f0657600081815260048501602090815260409182902082519182019092526002909101548152610da590611d1b565b15610dd15760008181526004850160209081526040918290208251918201909252600290910154815291505b610dda82611d1b565b610de357610efe565b610deb612bea565b60008281526101666020908152604091829020825191820190925290548152610e1b90849063ffffffff61202c16565b905060005b84811015610efb57600061016b8281548110610e3857fe5b6000918252602090912001546001600160a01b03169050610e57612bea565b610e618583610861565b9050610e6c81611d1b565b610e77575050610ef3565b610eb0610e8a828663ffffffff61204f16565b8a8581518110610e9657fe5b602002602001015160200151611de990919063ffffffff16565b898481518110610ebc57fe5b60200260200101516020018190525081898481518110610ed857fe5b60209081029190910101516001600160a01b03909116905250505b600101610e20565b50505b600101610d69565b50505050919050565b610f17611d1f565b6065546001600160a01b03908116911614610f445760405162461bcd60e51b815260040161052f906131a0565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03166000908152610165602052604090206002015490565b6066546001600160a01b031690565b610f9d612bbc565b610fa5612bbc565b506001600160a01b0383166000908152610165602090815260408083208584526004018252918290208251606081018452815460ff1615158152835180840185526001830154815281840152835192830184526002909101548252918201528051156110125790506108b0565b8261101d5750611029565b60018303925050610f9d565b6040518060600160405280600015158152602001611045612072565b8152602001611052612072565b90529392505050565b611063611d1f565b6065546001600160a01b039081169116146110905760405162461bcd60e51b815260040161052f906131a0565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101645481565b6065546001600160a01b031690565b61016b81815481106110fe57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03166000908152610165602052604090206003015490565b6101315460ff1661115a5760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055600061116f611d1f565b9050611179612bea565b61118282611316565b9050606061118f83610cce565b805190915015156000806111a285611d1b565b11905080806111ae5750815b6111ca5760405162461bcd60e51b815260040161052f9061322e565b610167546001600160a01b038616600090815261016560205260408120600301919091555b835181101561125e5761121884828151811061120757fe5b602002602001015160200151611d1b565b156112565761125684828151811061122c57fe5b6020026020010151600001518786848151811061124557fe5b602002602001015160200151611efd565b6001016111ef565b508080156112725750610164546101675410155b1561130157610164546101675461128e9163ffffffff61208d16565b6001600160a01b0380871660009081526101656020526040902060020191909155610169546112bf91168686611efd565b7f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e1337856112ea86611d1b565b6040516112f8929190612e2e565b60405180910390a15b5050610131805460ff19166001179055505050565b61131e612bea565b6101645461132a610a3a565b101561133f57611338612072565b905061085c565b600061135c61016454611350610a3a565b9063ffffffff61208d16565b6001600160a01b0384166000908152610165602052604090206002810154919250908210156113965761138d612072565b9250505061085c565b61139e612bea565b60028201545b83811015610f06576000818152600484016020908152604091829020825191820190925260029091015481526113d990611d1b565b156114055760008181526004840160209081526040918290208251918201909252600290910154815291505b61140e82611d1b565b611417576114a8565b61141f612bea565b611492610166600084815260200190815260200160002060405180602001604052908160008201548152505061148685610167868154811061145d57fe5b60009182526020918290206040805193840190526002909102015481529063ffffffff61204f16565b9063ffffffff61202c16565b90506114a4868263ffffffff611de916565b9550505b6001016113a4565b60006114bb82611d1b565b116114d85760405162461bcd60e51b815260040161052f9061304e565b60006114e2611d1f565b90506114f061050d826108b6565b6114f983611d1b565b11156115175760405162461bcd60e51b815260040161052f90612f1b565b61016a60009054906101000a90046001600160a01b03166001600160a01b031663544736e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561156657600080fd5b505afa15801561157a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159e9190612cce565b6115ba5760405162461bcd60e51b815260040161052f9061333b565b61016a546040805163a83ef51560e01b815290516000926001600160a01b03169163a83ef515916004808301926020929190829003018186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190612d93565b90506000611649600161058f610a3a565b9050600061016a60009054906101000a90046001600160a01b03166001600160a01b0316638c4e8c216040518163ffffffff1660e01b815260040160206040518083038186803b15801561169c57600080fd5b505afa1580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190612d93565b90506116de612bea565b6116e66120cf565b82111561173a576117258461171961170c6116ff6120cf565b869063ffffffff61208d16565b899063ffffffff6120d316565b9063ffffffff6120f516565b905061173a85611733610a3a565b8884612117565b6001600160a01b038516600090815261016560209081526040808320868452600481019092529091205460ff161561177d576117788685898a612117565b61182d565b611785612bbc565b816004016000611793610a3a565b815260208082019290925260409081016000908120825160608082018552825460ff16151582528451808701865260018085015482528388019182528651808901885260029586015481529387019390935285519182018652828252805182880190815290518287019081528c865260048a01909752949093209251835460ff191690151517835592515192820192909255915151910155505b61186882610166600061183e610a3a565b8152602080820192909252604090810160002081519283019091525481529063ffffffff611de916565b6101666000611875610a3a565b81526020808201929092526040908101600020925190925581519081019091526101635481526118bd9083906118b1908a63ffffffff6121cc16565b9063ffffffff611d7416565b516101635550505050505050565b610169546001600160a01b031681565b6066546001600160a01b03166119035760405162461bcd60e51b815260040161052f90613372565b61190b611d1f565b6066546001600160a01b039081169116146119385760405162461bcd60e51b815260040161052f90612fc0565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806119b757506119b7612237565b806119c5575060005460ff16155b6119e15760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff16158015611a0c576000805460ff1961ff0019909116610100171660011790555b611a1461223d565b611a1c6122d0565b61016980546001600160a01b038088166001600160a01b03199283161790925561016a805487841690831617905561016d8054928616929091169190911790556101648290558015611a74576000805461ff00191690555b5050505050565b611a83612bea565b506000908152610166602090815260409182902082519182019092529054815290565b611aae612bea565b611abf82610404600161058f610a3a565b6020015192915050565b61016e546001600160a01b031681565b61016881815481106110fe57fe5b611aef611d1f565b6099546001600160a01b03908116911614611b1c5760405162461bcd60e51b815260040161052f90613304565b611b24612bea565b611b2c610919565b9050610167604051806020016040528084803603810190611b4d9190612d3e565b9052815460018181018455600093845260208420925151600290920290920155611b7990611350610a3a565b905060005b61016b54811015611c9457600061016b8281548110611b9957fe5b60009182526020808320909101546001600160a01b031680835261016c82526040928390208351928301909352915481529091507f1b97835ae43d7358e1d70d7e50005dc31b89e5e3bf48377750406fa4e6941124908290611bfa90611d1b565b85604051611c0a93929190612e47565b60405180910390a16001600160a01b038116600090815261016c60205260409020610167805485908110611c3a57fe5b600091825260208083206001600160a01b038616845260016002909302019190910190526040902090549055611c6e612072565b6001600160a01b03909116600090815261016c6020526040902090519055600101611b7e565b50611c9d612bea565b6040805160208101909152610163548152611cbe908463ffffffff6121cc16565b90506000611ccb82611d1b565b1215611ce95760405162461bcd60e51b815260040161052f9061312a565b611cf281612346565b6101666000611cff610a3a565b815260208101919091526040016000209051905561068b612072565b5190565b3390565b6000828201838110156109125760405162461bcd60e51b815260040161052f90612f89565b611d50612bea565b611d58612bea565b82518451611d6b9163ffffffff61208d16565b81529392505050565b611d7c612bea565b8180600001516001600160ff1b0310156040518060600160405280603381526020016135806033913990611dc35760405162461bcd60e51b815260040161052f9190612ee8565b50611dcc612bea565b83518551611ddf9163ffffffff61237416565b8152949350505050565b611df1612bea565b611df9612bea565b82518451611d6b9163ffffffff611d2316565b611e1581611d1b565b611e315760405162461bcd60e51b815260040161052f9061304e565b6001600160a01b038216600090815261016560205260409020805460ff16611eb7576101688054600180820183556000929092527f8077777ae4769de06cbfd1c0b8b1f653b51ec156d91a9aca16a4102f19e03d9e0180546001600160a01b0319166001600160a01b038616179055815460ff1916178155611eb1610a3a565b60028201555b604080516020810190915260018201548152611ed9908363ffffffff611de916565b51600182015561016954611ef8906001600160a01b03168430856123ba565b505050565b611f06836124ec565b611f0e612bea565b611f188484612536565b90506000611f2685846125c3565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401611f51929190612e2e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f8f9190612dda565b6000604051808303816000865af19150503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5091509150818015611ffb575080511580611ffb575080806020019051810190611ffb9190612cce565b6120175760405162461bcd60e51b815260040161052f90612f52565b61202387878587612641565b50505050505050565b612034612bea565b61203c612bea565b82518451611d6b9163ffffffff61269a16565b612057612bea565b61205f612bea565b82518451611d6b9163ffffffff6126a816565b61207a612bea565b5060408051602081019091526000815290565b600061091283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126b6565b4290565b6120db612bea565b6120e3612bea565b8351611d6b908463ffffffff6126e216565b6120fd612bea565b612105612bea565b8351611d6b908463ffffffff61271c16565b61211f612bbc565b6121298585610f95565b90506040518060600160405280600115158152602001612156858460200151611de990919063ffffffff16565b8152602001612172848460400151611de990919063ffffffff16565b90526001600160a01b039590951660009081526101656020908152604080832096835260049096018152908590208651815460ff191690151517815590860151516001820155939094015151600290930192909255505050565b6121d4612bea565b8180600001516001600160ff1b031015604051806060016040528060338152602001613580603391399061221b5760405162461bcd60e51b815260040161052f9190612ee8565b50612224612bea565b83518551611ddf9163ffffffff61275e16565b303b1590565b600054610100900460ff16806122565750612256612237565b80612264575060005460ff16155b6122805760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff161580156122ab576000805460ff1961ff0019909116610100171660011790555b6122b36127a4565b6122bb612825565b80156122cd576000805461ff00191690555b50565b600054610100900460ff16806122e957506122e9612237565b806122f7575060005460ff16155b6123135760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff1615801561233e576000805460ff1961ff0019909116610100171660011790555b6122bb6128ff565b61234e612bea565b612356612bea565b82516000131561236c57825160000381526108b0565b915182525090565b60008183038183128015906123895750838113155b8061239e575060008312801561239e57508381135b6109125760405162461bcd60e51b815260040161052f90613449565b6123c3846124ec565b6123cb612bea565b6123d58584612536565b905060006123e386846125c3565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161241093929190612e0a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161244e9190612dda565b6000604051808303816000865af19150503d806000811461248b576040519150601f19603f3d011682016040523d82523d6000602084013e612490565b606091505b50915091508180156124ba5750805115806124ba5750808060200190518101906124ba9190612cce565b6124d65760405162461bcd60e51b815260040161052f9061315f565b6124e288878587612641565b5050505050505050565b60006124f78261298f565b6001600160a01b038316600090815260cc602052604090205490915081146107fe576001600160a01b0391909116600090815260cc6020526040902055565b61253e612bea565b61091283846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161256e9190612df6565b60206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be9190612d93565b612a7c565b6000806125cf8461298f565b90506012811061260d576126056125ed82601263ffffffff61208d16565b600a0a6125f985611d1b565b9063ffffffff6126e216565b9150506108b0565b61263961262160128363ffffffff61208d16565b600a0a61262d85611d1b565b9063ffffffff61271c16565b949350505050565b61267461265e6126518685612a7c565b839063ffffffff611de916565b6126688686612536565b9063ffffffff612b0e16565b60000b156126945760405162461bcd60e51b815260040161052f90613407565b50505050565b600061091283836012612b3f565b600061091283836012612b5e565b600081848411156126da5760405162461bcd60e51b815260040161052f9190612ee8565b505050900390565b6000826126f1575060006108b0565b828202828482816126fe57fe5b04146109125760405162461bcd60e51b815260040161052f906131ed565b600061091283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b7c565b60008282018183128015906127735750838112155b80612788575060008312801561278857508381125b6109125760405162461bcd60e51b815260040161052f9061307c565b600054610100900460ff16806127bd57506127bd612237565b806127cb575060005460ff16155b6127e75760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff161580156122bb576000805460ff1961ff00199091166101001716600117905580156122cd576000805461ff001916905550565b600054610100900460ff168061283e575061283e612237565b8061284c575060005460ff16155b6128685760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff16158015612893576000805460ff1961ff0019909116610100171660011790555b600061289d611d1f565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156122cd576000805461ff001916905550565b600054610100900460ff16806129185750612918612237565b80612926575060005460ff16155b6129425760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff1615801561296d576000805460ff1961ff0019909116610100171660011790555b610131805460ff1916600117905580156122cd576000805461ff001916905550565b6001600160a01b038116600090815260cc6020526040812054806108b05760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916129f191612dda565b600060405180830381855afa9150503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5091509150818015612a435750805115155b612a5f5760405162461bcd60e51b815260040161052f906130e9565b80806020019051810190612a739190612d93565b95945050505050565b612a84612bea565b6000612a8f8461298f565b905060128110612ad457604080516020810190915280612ac9612ab984601263ffffffff61208d16565b8690600a0a63ffffffff61271c16565b8152509150506108b0565b604080516020810190915280612b04612af460128563ffffffff61208d16565b8690600a0a63ffffffff6126e216565b9052949350505050565b805182516000911015612b23575060016108b0565b815183511015612b3657506000196108b0565b50600092915050565b60006126398361262d612b5185612bb3565b879063ffffffff6126e216565b6000612639612b6c83612bb3565b61262d868663ffffffff6126e216565b60008183612b9d5760405162461bcd60e51b815260040161052f9190612ee8565b506000838581612ba957fe5b0495945050505050565b60ff16600a0a90565b6040518060600160405280600015158152602001612bd8612bea565b8152602001612be5612bea565b905290565b6040518060200160405280600081525090565b604051806040016040528060006001600160a01b03168152602001612be5612bea565b600060208284031215612c31578081fd5b50919050565b600060208284031215612c48578081fd5b81356109128161356a565b60008060008060808587031215612c68578283fd5b8435612c738161356a565b93506020850135612c838161356a565b92506040850135612c938161356a565b9396929550929360600135925050565b60008060408385031215612cb5578182fd5b8235612cc08161356a565b946020939093013593505050565b600060208284031215612cdf578081fd5b81518015158114610912578182fd5b60008060408385031215612d00578182fd5b8235612d0b8161356a565b9150612d1a8460208501612c20565b90509250929050565b600060208284031215612d34578081fd5b6109128383612c20565b600060208284031215612d4f578081fd5b6040516020810181811067ffffffffffffffff82111715612d6e578283fd5b6040529135825250919050565b600060208284031215612d8c578081fd5b5035919050565b600060208284031215612da4578081fd5b5051919050565b60008060408385031215612dbd578182fd5b823591506020830135612dcf8161356a565b809150509250929050565b60008251612dec81846020870161353e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015612eb457815180516001600160a01b0316855286015151868501529284019290850190600101612e85565b5091979650505050505050565b901515815260200190565b9315158452915160208401526040830152606082015260800190565b6000602082528251806020840152612f0781604085016020870161353e565b601f01601f19169190910160400192915050565b6020808252601b908201527f5374616b65206d6f7265207468616e20616c6c2062616c616e63650000000000604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b602080825260149082015273496e70757420616d6f756e74206973207a65726f60601b604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252818101527f556e7374616b65206d6f7265207468616e206c6f636b65642062616c616e6365604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6e6f2076657374656420726577617264206f7220666565000000000000000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b10b332b2a737ba34b334b2b960a11b604082015260600190565b6020808252601190820152700616d6f756e742063616e2774206265203607c1b604082015260600190565b60208082526018908201527f6f6e6c792072657761726473446973747269627574696f6e0000000000000000604082015260600190565b6020808252601b908201527f49464e582072657761726420686173206e6f7420737461727465640000000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8151151581526020808301515190820152604091820151519181019190915260600190565b9051815260200190565b90815260200190565b60005b83811015613559578181015183820152602001613541565b838111156126945750506000910152565b6001600160a01b03811681146122cd57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220c562a9b78d568f5f0e8a8b99bbf8a56741a7c4fedb5cd695aa332fa00748889a64736f6c63430006090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80635cdd7c701161013b578063a7d4b2d3116100b8578063cfc90c321161007c578063cfc90c32146104a5578063d7058d8d146104b8578063fc0c546a146104cb578063fd5e6dd1146104d3578063ff59f86d146104e65761023d565b8063a7d4b2d31461045c578063ac04f2431461046f578063b0ecdc2d14610482578063bc5920ba1461048a578063cf756fdf146104925761023d565b80637313ee5a116100ff5780637313ee5a1461041e5780638da5cb5b146104265780638ef4403c1461042e5780638f0a270e14610441578063a63a5e76146104545761023d565b80635cdd7c70146103c85780636a3662f1146103db5780636c8381f8146103ee57806370c88be8146103f6578063715018a6146104165761023d565b8063141eea7f116101c957806336b4402a1161018d57806336b4402a146103575780633ee7a5ce1461037a5780633fc6df6e1461038d57806340bee0ed1461039557806341daeb24146103a85761023d565b8063141eea7f1461031457806316c2f69f1461032957806319762143146103315780631c17820314610344578063239e1d67146103295761023d565b80630cd61a0c116102105780630cd61a0c146102b35780630dc095cf146102d3578063129de5bf146102e657806312b58349146102f957806313af4035146103015761023d565b806301bb7d9c1461024257806303e16d421461025757806304aa4487146102805780630a8d9b67146102a0575b600080fd5b610255610250366004612d23565b6104f9565b005b61026a610265366004612c37565b610696565b6040516102779190613535565b60405180910390f35b61029361028e366004612d7b565b6106a9565b604051610277919061352b565b6102556102ae366004612cee565b6106d9565b6102c66102c1366004612c37565b610802565b6040516102779190612ec1565b6102936102e1366004612dab565b610861565b6102936102f4366004612c37565b6108b6565b610293610919565b61025561030f366004612c37565b610951565b61031c610a2a565b6040516102779190612df6565b61026a610a3a565b61025561033f366004612c37565b610a41565b610255610352366004612d23565b610a98565b61036a610365366004612c37565b610b08565b6040516102779493929190612ecc565b610255610388366004612d23565b610b40565b61031c610c84565b6102556103a3366004612d7b565b610c93565b6103bb6103b6366004612c37565b610cce565b6040516102779190612e68565b6102556103d6366004612c37565b610f0f565b61026a6103e9366004612c37565b610f67565b61031c610f86565b610409610404366004612ca3565b610f95565b6040516102779190613506565b61025561105b565b61026a6110da565b61031c6110e1565b61031c61043c366004612d7b565b6110f0565b61026a61044f366004612c37565b611118565b610255611137565b61029361046a366004612c37565b611316565b61025561047d366004612d3e565b6114b0565b61031c6118cb565b6102556118db565b6102556104a0366004612c53565b61199e565b6102936104b3366004612d7b565b611a7b565b6102936104c6366004612c37565b611aa6565b61031c611ac9565b61031c6104e1366004612d7b565b611ad9565b6102556104f4366004612d23565b611ae7565b600061051261050d36849003840184612d3e565b611d1b565b116105385760405162461bcd60e51b815260040161052f9061304e565b60405180910390fd5b6000610542611d1f565b905061055061050d82611aa6565b61056261050d36859003850185612d3e565b11156105805760405162461bcd60e51b815260040161052f9061312a565b600061059b600161058f610a3a565b9063ffffffff611d2316565b90506105a5612bbc565b6105af8383610f95565b604080516060810190915260018152909150602081016105e86105d736889003880188612d3e565b60208501519063ffffffff611d4816565b81526020016106106105ff36889003880188612d3e565b60408501519063ffffffff611d4816565b90526001600160a01b0384166000908152610165602090815260408083208684526004018252918290208351815460ff1916901515178155908301515160018201559101515160029091015561068b61066e36869003860186612d3e565b60408051602081019091526101635481529063ffffffff611d7416565b516101635550505050565b61016c6020526000908152604090205481565b61016781815481106106b757fe5b6000918252602091829020604080519384019052600290910201548152905081565b6106e1611d1f565b61016d546001600160a01b0390811691161461070f5760405162461bcd60e51b815260040161052f906132b3565b600061072361050d36849003840184612d3e565b116107405760405162461bcd60e51b815260040161052f906132d9565b61078761075236839003830183612d3e565b6001600160a01b038416600090815261016c60209081526040918290208251918201909252905481529063ffffffff611de916565b6001600160a01b038316600090815261016c60205260409020905190556107ad82610802565b6107fe5761016b80546001810182556000919091527f45c4c4b2842a4a2a717cf0ddf6c6d1dee52b7fd8d9da97eb519765c7a27020f40180546001600160a01b0319166001600160a01b0384161790555b5050565b6000805b61016b5481101561085657826001600160a01b031661016b828154811061082957fe5b6000918252602090912001546001600160a01b0316141561084e57600191505061085c565b600101610806565b50600090505b919050565b610869612bea565b610167838154811061087757fe5b600091825260208083206001600160a01b0386168452600160029093020191909101815260409182902082519182019092529054815290505b92915050565b6108be612bea565b6108c6612bea565b6108d283610404610a3a565b6020908101516001600160a01b0385166000908152610165835260409081902081519384019091526001015482529150610912908263ffffffff611d4816565b9392505050565b610921612bea565b610166600061092e610a3a565b815260208082019290925260409081016000208151928301909152548152905090565b610959611d1f565b6065546001600160a01b039081169116146109865760405162461bcd60e51b815260040161052f906131a0565b6001600160a01b0381166109ac5760405162461bcd60e51b815260040161052f9061348d565b6065546001600160a01b03828116911614156109da5760405162461bcd60e51b815260040161052f906133c1565b6066546001600160a01b0382811691161415610a085760405162461bcd60e51b815260040161052f90613007565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b61016d546001600160a01b031681565b6101675490565b610a49611d1f565b6065546001600160a01b03908116911614610a765760405162461bcd60e51b815260040161052f906131a0565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b6101315460ff16610abb5760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055610ae5610ad1611d1f565b610ae036849003840184612d3e565b611e0c565b610af761047d36839003830183612d3e565b50610131805460ff19166001179055565b610165602090815260009182526040918290208054835192830190935260018101548252600281015460039091015460ff9093169284565b6101315460ff16610b635760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055610b8061050d36839003830183612d3e565b610b9c5760405162461bcd60e51b815260040161052f9061304e565b6000610ba6611d1f565b9050610bb461050d826108b6565b610bc661050d36859003850185612d3e565b1115610be45760405162461bcd60e51b815260040161052f906130bd565b610c2f610bf636849003840184612d3e565b6001600160a01b03831660009081526101656020908152604091829020825191820190925260019091015481529063ffffffff611d4816565b6001600160a01b03808316600090815261016560205260409020915160019092019190915561016954610c72911682610c6d36869003860186612d3e565b611efd565b5050610131805460ff19166001179055565b6099546001600160a01b031681565b610c9b611d1f565b6065546001600160a01b03908116911614610cc85760405162461bcd60e51b815260040161052f906131a0565b61016455565b6001600160a01b038116600090815261016560205260409020606090610cf2610a3a565b81600301541415610d03575061085c565b61016b548067ffffffffffffffff81118015610d1e57600080fd5b50604051908082528060200260200182016040528015610d5857816020015b610d45612bfd565b815260200190600190039081610d3d5790505b509250610d63612bea565b60038301545b610d71610a3a565b811015610f0657600081815260048501602090815260409182902082519182019092526002909101548152610da590611d1b565b15610dd15760008181526004850160209081526040918290208251918201909252600290910154815291505b610dda82611d1b565b610de357610efe565b610deb612bea565b60008281526101666020908152604091829020825191820190925290548152610e1b90849063ffffffff61202c16565b905060005b84811015610efb57600061016b8281548110610e3857fe5b6000918252602090912001546001600160a01b03169050610e57612bea565b610e618583610861565b9050610e6c81611d1b565b610e77575050610ef3565b610eb0610e8a828663ffffffff61204f16565b8a8581518110610e9657fe5b602002602001015160200151611de990919063ffffffff16565b898481518110610ebc57fe5b60200260200101516020018190525081898481518110610ed857fe5b60209081029190910101516001600160a01b03909116905250505b600101610e20565b50505b600101610d69565b50505050919050565b610f17611d1f565b6065546001600160a01b03908116911614610f445760405162461bcd60e51b815260040161052f906131a0565b61016d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03166000908152610165602052604090206002015490565b6066546001600160a01b031690565b610f9d612bbc565b610fa5612bbc565b506001600160a01b0383166000908152610165602090815260408083208584526004018252918290208251606081018452815460ff1615158152835180840185526001830154815281840152835192830184526002909101548252918201528051156110125790506108b0565b8261101d5750611029565b60018303925050610f9d565b6040518060600160405280600015158152602001611045612072565b8152602001611052612072565b90529392505050565b611063611d1f565b6065546001600160a01b039081169116146110905760405162461bcd60e51b815260040161052f906131a0565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6101645481565b6065546001600160a01b031690565b61016b81815481106110fe57fe5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b03166000908152610165602052604090206003015490565b6101315460ff1661115a5760405162461bcd60e51b815260040161052f906134cf565b610131805460ff19169055600061116f611d1f565b9050611179612bea565b61118282611316565b9050606061118f83610cce565b805190915015156000806111a285611d1b565b11905080806111ae5750815b6111ca5760405162461bcd60e51b815260040161052f9061322e565b610167546001600160a01b038616600090815261016560205260408120600301919091555b835181101561125e5761121884828151811061120757fe5b602002602001015160200151611d1b565b156112565761125684828151811061122c57fe5b6020026020010151600001518786848151811061124557fe5b602002602001015160200151611efd565b6001016111ef565b508080156112725750610164546101675410155b1561130157610164546101675461128e9163ffffffff61208d16565b6001600160a01b0380871660009081526101656020526040902060020191909155610169546112bf91168686611efd565b7f1d3eee4ca001cff39eec6ec7615aacf2f2bd61791273830728ba00ccbd6e1337856112ea86611d1b565b6040516112f8929190612e2e565b60405180910390a15b5050610131805460ff19166001179055505050565b61131e612bea565b6101645461132a610a3a565b101561133f57611338612072565b905061085c565b600061135c61016454611350610a3a565b9063ffffffff61208d16565b6001600160a01b0384166000908152610165602052604090206002810154919250908210156113965761138d612072565b9250505061085c565b61139e612bea565b60028201545b83811015610f06576000818152600484016020908152604091829020825191820190925260029091015481526113d990611d1b565b156114055760008181526004840160209081526040918290208251918201909252600290910154815291505b61140e82611d1b565b611417576114a8565b61141f612bea565b611492610166600084815260200190815260200160002060405180602001604052908160008201548152505061148685610167868154811061145d57fe5b60009182526020918290206040805193840190526002909102015481529063ffffffff61204f16565b9063ffffffff61202c16565b90506114a4868263ffffffff611de916565b9550505b6001016113a4565b60006114bb82611d1b565b116114d85760405162461bcd60e51b815260040161052f9061304e565b60006114e2611d1f565b90506114f061050d826108b6565b6114f983611d1b565b11156115175760405162461bcd60e51b815260040161052f90612f1b565b61016a60009054906101000a90046001600160a01b03166001600160a01b031663544736e66040518163ffffffff1660e01b815260040160206040518083038186803b15801561156657600080fd5b505afa15801561157a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159e9190612cce565b6115ba5760405162461bcd60e51b815260040161052f9061333b565b61016a546040805163a83ef51560e01b815290516000926001600160a01b03169163a83ef515916004808301926020929190829003018186803b15801561160057600080fd5b505afa158015611614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116389190612d93565b90506000611649600161058f610a3a565b9050600061016a60009054906101000a90046001600160a01b03166001600160a01b0316638c4e8c216040518163ffffffff1660e01b815260040160206040518083038186803b15801561169c57600080fd5b505afa1580156116b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d49190612d93565b90506116de612bea565b6116e66120cf565b82111561173a576117258461171961170c6116ff6120cf565b869063ffffffff61208d16565b899063ffffffff6120d316565b9063ffffffff6120f516565b905061173a85611733610a3a565b8884612117565b6001600160a01b038516600090815261016560209081526040808320868452600481019092529091205460ff161561177d576117788685898a612117565b61182d565b611785612bbc565b816004016000611793610a3a565b815260208082019290925260409081016000908120825160608082018552825460ff16151582528451808701865260018085015482528388019182528651808901885260029586015481529387019390935285519182018652828252805182880190815290518287019081528c865260048a01909752949093209251835460ff191690151517835592515192820192909255915151910155505b61186882610166600061183e610a3a565b8152602080820192909252604090810160002081519283019091525481529063ffffffff611de916565b6101666000611875610a3a565b81526020808201929092526040908101600020925190925581519081019091526101635481526118bd9083906118b1908a63ffffffff6121cc16565b9063ffffffff611d7416565b516101635550505050505050565b610169546001600160a01b031681565b6066546001600160a01b03166119035760405162461bcd60e51b815260040161052f90613372565b61190b611d1f565b6066546001600160a01b039081169116146119385760405162461bcd60e51b815260040161052f90612fc0565b6066546065546040516001600160a01b0392831692909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360668054606580546001600160a01b03199081166001600160a01b03841617909155169055565b600054610100900460ff16806119b757506119b7612237565b806119c5575060005460ff16155b6119e15760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff16158015611a0c576000805460ff1961ff0019909116610100171660011790555b611a1461223d565b611a1c6122d0565b61016980546001600160a01b038088166001600160a01b03199283161790925561016a805487841690831617905561016d8054928616929091169190911790556101648290558015611a74576000805461ff00191690555b5050505050565b611a83612bea565b506000908152610166602090815260409182902082519182019092529054815290565b611aae612bea565b611abf82610404600161058f610a3a565b6020015192915050565b61016e546001600160a01b031681565b61016881815481106110fe57fe5b611aef611d1f565b6099546001600160a01b03908116911614611b1c5760405162461bcd60e51b815260040161052f90613304565b611b24612bea565b611b2c610919565b9050610167604051806020016040528084803603810190611b4d9190612d3e565b9052815460018181018455600093845260208420925151600290920290920155611b7990611350610a3a565b905060005b61016b54811015611c9457600061016b8281548110611b9957fe5b60009182526020808320909101546001600160a01b031680835261016c82526040928390208351928301909352915481529091507f1b97835ae43d7358e1d70d7e50005dc31b89e5e3bf48377750406fa4e6941124908290611bfa90611d1b565b85604051611c0a93929190612e47565b60405180910390a16001600160a01b038116600090815261016c60205260409020610167805485908110611c3a57fe5b600091825260208083206001600160a01b038616845260016002909302019190910190526040902090549055611c6e612072565b6001600160a01b03909116600090815261016c6020526040902090519055600101611b7e565b50611c9d612bea565b6040805160208101909152610163548152611cbe908463ffffffff6121cc16565b90506000611ccb82611d1b565b1215611ce95760405162461bcd60e51b815260040161052f9061312a565b611cf281612346565b6101666000611cff610a3a565b815260208101919091526040016000209051905561068b612072565b5190565b3390565b6000828201838110156109125760405162461bcd60e51b815260040161052f90612f89565b611d50612bea565b611d58612bea565b82518451611d6b9163ffffffff61208d16565b81529392505050565b611d7c612bea565b8180600001516001600160ff1b0310156040518060600160405280603381526020016135806033913990611dc35760405162461bcd60e51b815260040161052f9190612ee8565b50611dcc612bea565b83518551611ddf9163ffffffff61237416565b8152949350505050565b611df1612bea565b611df9612bea565b82518451611d6b9163ffffffff611d2316565b611e1581611d1b565b611e315760405162461bcd60e51b815260040161052f9061304e565b6001600160a01b038216600090815261016560205260409020805460ff16611eb7576101688054600180820183556000929092527f8077777ae4769de06cbfd1c0b8b1f653b51ec156d91a9aca16a4102f19e03d9e0180546001600160a01b0319166001600160a01b038616179055815460ff1916178155611eb1610a3a565b60028201555b604080516020810190915260018201548152611ed9908363ffffffff611de916565b51600182015561016954611ef8906001600160a01b03168430856123ba565b505050565b611f06836124ec565b611f0e612bea565b611f188484612536565b90506000611f2685846125c3565b905060006060866001600160a01b031663a9059cbb60e01b8785604051602401611f51929190612e2e565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611f8f9190612dda565b6000604051808303816000865af19150503d8060008114611fcc576040519150601f19603f3d011682016040523d82523d6000602084013e611fd1565b606091505b5091509150818015611ffb575080511580611ffb575080806020019051810190611ffb9190612cce565b6120175760405162461bcd60e51b815260040161052f90612f52565b61202387878587612641565b50505050505050565b612034612bea565b61203c612bea565b82518451611d6b9163ffffffff61269a16565b612057612bea565b61205f612bea565b82518451611d6b9163ffffffff6126a816565b61207a612bea565b5060408051602081019091526000815290565b600061091283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126b6565b4290565b6120db612bea565b6120e3612bea565b8351611d6b908463ffffffff6126e216565b6120fd612bea565b612105612bea565b8351611d6b908463ffffffff61271c16565b61211f612bbc565b6121298585610f95565b90506040518060600160405280600115158152602001612156858460200151611de990919063ffffffff16565b8152602001612172848460400151611de990919063ffffffff16565b90526001600160a01b039590951660009081526101656020908152604080832096835260049096018152908590208651815460ff191690151517815590860151516001820155939094015151600290930192909255505050565b6121d4612bea565b8180600001516001600160ff1b031015604051806060016040528060338152602001613580603391399061221b5760405162461bcd60e51b815260040161052f9190612ee8565b50612224612bea565b83518551611ddf9163ffffffff61275e16565b303b1590565b600054610100900460ff16806122565750612256612237565b80612264575060005460ff16155b6122805760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff161580156122ab576000805460ff1961ff0019909116610100171660011790555b6122b36127a4565b6122bb612825565b80156122cd576000805461ff00191690555b50565b600054610100900460ff16806122e957506122e9612237565b806122f7575060005460ff16155b6123135760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff1615801561233e576000805460ff1961ff0019909116610100171660011790555b6122bb6128ff565b61234e612bea565b612356612bea565b82516000131561236c57825160000381526108b0565b915182525090565b60008183038183128015906123895750838113155b8061239e575060008312801561239e57508381135b6109125760405162461bcd60e51b815260040161052f90613449565b6123c3846124ec565b6123cb612bea565b6123d58584612536565b905060006123e386846125c3565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161241093929190612e0a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161244e9190612dda565b6000604051808303816000865af19150503d806000811461248b576040519150601f19603f3d011682016040523d82523d6000602084013e612490565b606091505b50915091508180156124ba5750805115806124ba5750808060200190518101906124ba9190612cce565b6124d65760405162461bcd60e51b815260040161052f9061315f565b6124e288878587612641565b5050505050505050565b60006124f78261298f565b6001600160a01b038316600090815260cc602052604090205490915081146107fe576001600160a01b0391909116600090815260cc6020526040902055565b61253e612bea565b61091283846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161256e9190612df6565b60206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be9190612d93565b612a7c565b6000806125cf8461298f565b90506012811061260d576126056125ed82601263ffffffff61208d16565b600a0a6125f985611d1b565b9063ffffffff6126e216565b9150506108b0565b61263961262160128363ffffffff61208d16565b600a0a61262d85611d1b565b9063ffffffff61271c16565b949350505050565b61267461265e6126518685612a7c565b839063ffffffff611de916565b6126688686612536565b9063ffffffff612b0e16565b60000b156126945760405162461bcd60e51b815260040161052f90613407565b50505050565b600061091283836012612b3f565b600061091283836012612b5e565b600081848411156126da5760405162461bcd60e51b815260040161052f9190612ee8565b505050900390565b6000826126f1575060006108b0565b828202828482816126fe57fe5b04146109125760405162461bcd60e51b815260040161052f906131ed565b600061091283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612b7c565b60008282018183128015906127735750838112155b80612788575060008312801561278857508381125b6109125760405162461bcd60e51b815260040161052f9061307c565b600054610100900460ff16806127bd57506127bd612237565b806127cb575060005460ff16155b6127e75760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff161580156122bb576000805460ff1961ff00199091166101001716600117905580156122cd576000805461ff001916905550565b600054610100900460ff168061283e575061283e612237565b8061284c575060005460ff16155b6128685760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff16158015612893576000805460ff1961ff0019909116610100171660011790555b600061289d611d1f565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156122cd576000805461ff001916905550565b600054610100900460ff16806129185750612918612237565b80612926575060005460ff16155b6129425760405162461bcd60e51b815260040161052f90613265565b600054610100900460ff1615801561296d576000805460ff1961ff0019909116610100171660011790555b610131805460ff1916600117905580156122cd576000805461ff001916905550565b6001600160a01b038116600090815260cc6020526040812054806108b05760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b038716916129f191612dda565b600060405180830381855afa9150503d8060008114612a2c576040519150601f19603f3d011682016040523d82523d6000602084013e612a31565b606091505b5091509150818015612a435750805115155b612a5f5760405162461bcd60e51b815260040161052f906130e9565b80806020019051810190612a739190612d93565b95945050505050565b612a84612bea565b6000612a8f8461298f565b905060128110612ad457604080516020810190915280612ac9612ab984601263ffffffff61208d16565b8690600a0a63ffffffff61271c16565b8152509150506108b0565b604080516020810190915280612b04612af460128563ffffffff61208d16565b8690600a0a63ffffffff6126e216565b9052949350505050565b805182516000911015612b23575060016108b0565b815183511015612b3657506000196108b0565b50600092915050565b60006126398361262d612b5185612bb3565b879063ffffffff6126e216565b6000612639612b6c83612bb3565b61262d868663ffffffff6126e216565b60008183612b9d5760405162461bcd60e51b815260040161052f9190612ee8565b506000838581612ba957fe5b0495945050505050565b60ff16600a0a90565b6040518060600160405280600015158152602001612bd8612bea565b8152602001612be5612bea565b905290565b6040518060200160405280600081525090565b604051806040016040528060006001600160a01b03168152602001612be5612bea565b600060208284031215612c31578081fd5b50919050565b600060208284031215612c48578081fd5b81356109128161356a565b60008060008060808587031215612c68578283fd5b8435612c738161356a565b93506020850135612c838161356a565b92506040850135612c938161356a565b9396929550929360600135925050565b60008060408385031215612cb5578182fd5b8235612cc08161356a565b946020939093013593505050565b600060208284031215612cdf578081fd5b81518015158114610912578182fd5b60008060408385031215612d00578182fd5b8235612d0b8161356a565b9150612d1a8460208501612c20565b90509250929050565b600060208284031215612d34578081fd5b6109128383612c20565b600060208284031215612d4f578081fd5b6040516020810181811067ffffffffffffffff82111715612d6e578283fd5b6040529135825250919050565b600060208284031215612d8c578081fd5b5035919050565b600060208284031215612da4578081fd5b5051919050565b60008060408385031215612dbd578182fd5b823591506020830135612dcf8161356a565b809150509250929050565b60008251612dec81846020870161353e565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b602080825282518282018190526000919060409081850190868401855b82811015612eb457815180516001600160a01b0316855286015151868501529284019290850190600101612e85565b5091979650505050505050565b901515815260200190565b9315158452915160208401526040830152606082015260800190565b6000602082528251806020840152612f0781604085016020870161353e565b601f01601f19169190910160400192915050565b6020808252601b908201527f5374616b65206d6f7265207468616e20616c6c2062616c616e63650000000000604082015260600190565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a206e6f7420746865206e656040820152663b9037bbb732b960c91b606082015260800190565b60208082526027908201527f49666e7846694f776e61626c65557067726164653a2073616d652061732063616040820152666e64696461746560c81b606082015260800190565b602080825260149082015273496e70757420616d6f756e74206973207a65726f60601b604082015260600190565b60208082526021908201527f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601290820152714e6f7420656e6f7567682062616c616e636560701b604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b6020808252818101527f556e7374616b65206d6f7265207468616e206c6f636b65642062616c616e6365604082015260600190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b6020808252602d908201527f49666e7846694f776e61626c65557067726164653a2063616c6c65722069732060408201526c3737ba103a34329037bbb732b960991b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526017908201527f6e6f2076657374656420726577617264206f7220666565000000000000000000604082015260600190565b6020808252602e908201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560408201526d195b881a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600c908201526b10b332b2a737ba34b334b2b960a11b604082015260600190565b6020808252601190820152700616d6f756e742063616e2774206265203607c1b604082015260600190565b60208082526018908201527f6f6e6c792072657761726473446973747269627574696f6e0000000000000000604082015260600190565b6020808252601b908201527f49464e582072657761726420686173206e6f7420737461727465640000000000604082015260600190565b6020808252602f908201527f49666e7846694f776e61626c65557067726164653a2063616e6469646174652060408201526e6973207a65726f206164647265737360881b606082015260800190565b60208082526026908201527f49666e7846694f776e61626c65557067726164653a2073616d65206173206f726040820152651a59da5b985b60d21b606082015260800190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b60208082526024908201527f5369676e6564536166654d6174683a207375627472616374696f6e206f766572604082015263666c6f7760e01b606082015260800190565b60208082526022908201527f49666e7846694f776e61626c65557067726164653a207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8151151581526020808301515190820152604091820151519181019190915260600190565b9051815260200190565b90815260200190565b60005b83811015613559578181015183820152602001613541565b838111156126945750506000910152565b6001600160a01b03811681146122cd57600080fdfe4d69786564446563696d616c3a2075696e742076616c756520697320626967676572207468616e205f494e543235365f4d4158a2646970667358221220c562a9b78d568f5f0e8a8b99bbf8a56741a7c4fedb5cd695aa332fa00748889a64736f6c63430006090033",
  "devdoc": {
    "methods": {
      "notifyRewardAmount((uint256))": {
        "details": "add epoch reward, update totalEffectiveStakeMap"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setOwner(address)": {
        "details": "Set ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "stake((uint256))": {
        "details": "staker can increase staking any time,"
      },
      "unstake((uint256))": {
        "details": "staker can decrease staking from stakeBalanceForNextEpoch"
      },
      "updateOwner()": {
        "details": "Transfers ownership of the contract to a new account (`_candidate`). Can only be called by the new owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "getTotalBalance()": {
        "notice": "everyone can query total balance to check current collateralization ratio. TotalBalance of time weighted locked IFNX for coming epoch"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 154,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 219,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18200,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 18202,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "_candidate",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 18376,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11542,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "rewardsDistribution",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 11546,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "154",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17537,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "decimalMap",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17541,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17235,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "255",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2410,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "_notEntered",
        "offset": 0,
        "slot": "305",
        "type": "t_bool"
      },
      {
        "astId": 2451,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11670,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "totalPendingStakeBalance",
        "offset": 0,
        "slot": "355",
        "type": "t_struct(signedDecimal)18667_storage"
      },
      {
        "astId": 11672,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "vestingPeriod",
        "offset": 0,
        "slot": "356",
        "type": "t_uint256"
      },
      {
        "astId": 11676,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "stakeBalanceMap",
        "offset": 0,
        "slot": "357",
        "type": "t_mapping(t_address,t_struct(StakeBalance)11656_storage)"
      },
      {
        "astId": 11680,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "totalEffectiveStakeMap",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_uint256,t_struct(decimal)17269_storage)"
      },
      {
        "astId": 11683,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "epochRewardHistory",
        "offset": 0,
        "slot": "359",
        "type": "t_array(t_struct(EpochReward)11643_storage)dyn_storage"
      },
      {
        "astId": 11686,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "stakers",
        "offset": 0,
        "slot": "360",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11688,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "ifnxToken",
        "offset": 0,
        "slot": "361",
        "type": "t_address"
      },
      {
        "astId": 11690,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "supplySchedule",
        "offset": 0,
        "slot": "362",
        "type": "t_contract(SupplySchedule)13199"
      },
      {
        "astId": 11693,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "feeTokens",
        "offset": 0,
        "slot": "363",
        "type": "t_array(t_contract(IERC20)1832)dyn_storage"
      },
      {
        "astId": 11697,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "feeMap",
        "offset": 0,
        "slot": "364",
        "type": "t_mapping(t_contract(IERC20)1832,t_struct(decimal)17269_storage)"
      },
      {
        "astId": 11699,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "feeNotifier",
        "offset": 0,
        "slot": "365",
        "type": "t_address"
      },
      {
        "astId": 11702,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "token",
        "offset": 0,
        "slot": "366",
        "type": "t_contract(IERC20)1832"
      },
      {
        "astId": 11706,
        "contract": "contracts/StakingReserve.sol:StakingReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "367",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)1832)dyn_storage": {
        "base": "t_contract(IERC20)1832",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EpochReward)11643_storage)dyn_storage": {
        "base": "t_struct(EpochReward)11643_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingReserve.EpochReward[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1832": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(SupplySchedule)13199": {
        "encoding": "inplace",
        "label": "contract SupplySchedule",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(StakeBalance)11656_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingReserve.StakeBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeBalance)11656_storage"
      },
      "t_mapping(t_address,t_struct(decimal)17269_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Decimal.decimal)",
        "numberOfBytes": "32",
        "value": "t_struct(decimal)17269_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1832,t_struct(decimal)17269_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1832",
        "label": "mapping(contract IERC20 => struct Decimal.decimal)",
        "numberOfBytes": "32",
        "value": "t_struct(decimal)17269_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedBalance)11663_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StakingReserve.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)11663_storage"
      },
      "t_mapping(t_uint256,t_struct(decimal)17269_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Decimal.decimal)",
        "numberOfBytes": "32",
        "value": "t_struct(decimal)17269_storage"
      },
      "t_struct(EpochReward)11643_storage": {
        "encoding": "inplace",
        "label": "struct StakingReserve.EpochReward",
        "members": [
          {
            "astId": 11638,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "perpReward",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 11642,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "feeMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(decimal)17269_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedBalance)11663_storage": {
        "encoding": "inplace",
        "label": "struct StakingReserve.LockedBalance",
        "members": [
          {
            "astId": 11658,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "exist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11660,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "locked",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 11662,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "timeWeightedLocked",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(decimal)17269_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(StakeBalance)11656_storage": {
        "encoding": "inplace",
        "label": "struct StakingReserve.StakeBalance",
        "members": [
          {
            "astId": 11645,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "exist",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11647,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "totalBalance",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(decimal)17269_storage"
          },
          {
            "astId": 11649,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "rewardEpochCursor",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11651,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "feeEpochCursor",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11655,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "lockedBalanceMap",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(LockedBalance)11663_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(decimal)17269_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.decimal",
        "members": [
          {
            "astId": 17268,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(signedDecimal)18667_storage": {
        "encoding": "inplace",
        "label": "struct SignedDecimal.signedDecimal",
        "members": [
          {
            "astId": 18666,
            "contract": "contracts/StakingReserve.sol:StakingReserve",
            "label": "d",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}